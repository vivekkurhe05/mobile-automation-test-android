"use strict";

require("source-map-support/register");

var _argSpec = require("../../lib/schema/arg-spec");

const {
  expect
} = chai;
describe('ArgSpec', function () {
  describe('class method', function () {
    describe('create()', function () {
      it('should return a new ArgSpec', function () {
        expect(_argSpec.ArgSpec.create('foo')).to.be.an.instanceof(_argSpec.ArgSpec);
      });
    });
    describe('toSchemaRef()', function () {
      describe('when provided no extension information', function () {
        it('should return a schema ID for a specific argument', function () {
          expect(_argSpec.ArgSpec.toSchemaRef('foo')).to.equal('appium.json#/properties/server/properties/foo');
        });
      });
      describe('when provided extension information', function () {
        it('should return a schema ID for a specific argument within an extension schema', function () {
          expect(_argSpec.ArgSpec.toSchemaRef('bar', 'driver', 'stuff')).to.equal('driver-stuff.json#/properties/bar');
        });
      });
    });
    describe('toSchemaBaseRef()', function () {
      describe('when provided no extension information', function () {
        it('should return the base schema ID', function () {
          expect(_argSpec.ArgSpec.toSchemaBaseRef()).to.equal('appium.json');
        });
      });
      describe('when provided extension information', function () {
        it('should return a schema ID for an extension', function () {
          expect(_argSpec.ArgSpec.toSchemaBaseRef('driver', 'stuff')).to.equal('driver-stuff.json');
        });
      });
    });
    describe('toArg()', function () {
      describe('when provided no extension information', function () {
        it('should return a bare arg name', function () {
          expect(_argSpec.ArgSpec.toArg('foo')).to.equal('foo');
        });
      });
      describe('when provided extension information', function () {
        it('should return an extension-specific arg name', function () {
          expect(_argSpec.ArgSpec.toArg('no-oats', 'driver', 'bad-donkey')).to.equal('driver-bad-donkey-no-oats');
        });
      });
    });
    describe('extensionInfoFromRootSchemaId()', function () {
      describe('when provided the base schema ID', function () {
        it('should return an empty object', function () {
          expect(_argSpec.ArgSpec.extensionInfoFromRootSchemaId('appium.json')).to.be.empty;
        });
      });
      describe('when provided the schema ID of an extension schema', function () {
        expect(_argSpec.ArgSpec.extensionInfoFromRootSchemaId('driver-stuff.json')).to.eql({
          extType: 'driver',
          normalizedExtName: 'stuff'
        });
      });
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Qvc2NoZW1hL2FyZy1zcGVjLXNwZWNzLmpzIl0sIm5hbWVzIjpbImV4cGVjdCIsImNoYWkiLCJkZXNjcmliZSIsIml0IiwiQXJnU3BlYyIsImNyZWF0ZSIsInRvIiwiYmUiLCJhbiIsImluc3RhbmNlb2YiLCJ0b1NjaGVtYVJlZiIsImVxdWFsIiwidG9TY2hlbWFCYXNlUmVmIiwidG9BcmciLCJleHRlbnNpb25JbmZvRnJvbVJvb3RTY2hlbWFJZCIsImVtcHR5IiwiZXFsIiwiZXh0VHlwZSIsIm5vcm1hbGl6ZWRFeHROYW1lIl0sIm1hcHBpbmdzIjoiOzs7O0FBRUE7O0FBRUEsTUFBTTtBQUFDQSxFQUFBQTtBQUFELElBQVdDLElBQWpCO0FBRUFDLFFBQVEsQ0FBQyxTQUFELEVBQVksWUFBWTtBQUM5QkEsRUFBQUEsUUFBUSxDQUFDLGNBQUQsRUFBaUIsWUFBWTtBQUNuQ0EsSUFBQUEsUUFBUSxDQUFDLFVBQUQsRUFBYSxZQUFZO0FBQy9CQyxNQUFBQSxFQUFFLENBQUMsNkJBQUQsRUFBZ0MsWUFBWTtBQUM1Q0gsUUFBQUEsTUFBTSxDQUFDSSxpQkFBUUMsTUFBUixDQUFlLEtBQWYsQ0FBRCxDQUFOLENBQThCQyxFQUE5QixDQUFpQ0MsRUFBakMsQ0FBb0NDLEVBQXBDLENBQXVDQyxVQUF2QyxDQUFrREwsZ0JBQWxEO0FBQ0QsT0FGQyxDQUFGO0FBR0QsS0FKTyxDQUFSO0FBTUFGLElBQUFBLFFBQVEsQ0FBQyxlQUFELEVBQWtCLFlBQVk7QUFDcENBLE1BQUFBLFFBQVEsQ0FBQyx3Q0FBRCxFQUEyQyxZQUFZO0FBQzdEQyxRQUFBQSxFQUFFLENBQUMsbURBQUQsRUFBc0QsWUFBWTtBQUNsRUgsVUFBQUEsTUFBTSxDQUFDSSxpQkFBUU0sV0FBUixDQUFvQixLQUFwQixDQUFELENBQU4sQ0FBbUNKLEVBQW5DLENBQXNDSyxLQUF0QyxDQUNFLCtDQURGO0FBR0QsU0FKQyxDQUFGO0FBS0QsT0FOTyxDQUFSO0FBUUFULE1BQUFBLFFBQVEsQ0FBQyxxQ0FBRCxFQUF3QyxZQUFZO0FBQzFEQyxRQUFBQSxFQUFFLENBQUMsOEVBQUQsRUFBaUYsWUFBWTtBQUM3RkgsVUFBQUEsTUFBTSxDQUFDSSxpQkFBUU0sV0FBUixDQUFvQixLQUFwQixFQUEyQixRQUEzQixFQUFxQyxPQUFyQyxDQUFELENBQU4sQ0FBc0RKLEVBQXRELENBQXlESyxLQUF6RCxDQUNFLG1DQURGO0FBR0QsU0FKQyxDQUFGO0FBS0QsT0FOTyxDQUFSO0FBT0QsS0FoQk8sQ0FBUjtBQWtCQVQsSUFBQUEsUUFBUSxDQUFDLG1CQUFELEVBQXNCLFlBQVk7QUFDeENBLE1BQUFBLFFBQVEsQ0FBQyx3Q0FBRCxFQUEyQyxZQUFZO0FBQzdEQyxRQUFBQSxFQUFFLENBQUMsa0NBQUQsRUFBcUMsWUFBWTtBQUNqREgsVUFBQUEsTUFBTSxDQUFDSSxpQkFBUVEsZUFBUixFQUFELENBQU4sQ0FBa0NOLEVBQWxDLENBQXFDSyxLQUFyQyxDQUNFLGFBREY7QUFHRCxTQUpDLENBQUY7QUFLRCxPQU5PLENBQVI7QUFRQVQsTUFBQUEsUUFBUSxDQUFDLHFDQUFELEVBQXdDLFlBQVk7QUFDMURDLFFBQUFBLEVBQUUsQ0FBQyw0Q0FBRCxFQUErQyxZQUFZO0FBQzNESCxVQUFBQSxNQUFNLENBQUNJLGlCQUFRUSxlQUFSLENBQXdCLFFBQXhCLEVBQWtDLE9BQWxDLENBQUQsQ0FBTixDQUFtRE4sRUFBbkQsQ0FBc0RLLEtBQXRELENBQ0UsbUJBREY7QUFHRCxTQUpDLENBQUY7QUFLRCxPQU5PLENBQVI7QUFPRCxLQWhCTyxDQUFSO0FBa0JBVCxJQUFBQSxRQUFRLENBQUMsU0FBRCxFQUFZLFlBQVk7QUFDOUJBLE1BQUFBLFFBQVEsQ0FBQyx3Q0FBRCxFQUEyQyxZQUFZO0FBQzdEQyxRQUFBQSxFQUFFLENBQUMsK0JBQUQsRUFBa0MsWUFBWTtBQUM5Q0gsVUFBQUEsTUFBTSxDQUFDSSxpQkFBUVMsS0FBUixDQUFjLEtBQWQsQ0FBRCxDQUFOLENBQTZCUCxFQUE3QixDQUFnQ0ssS0FBaEMsQ0FBc0MsS0FBdEM7QUFDRCxTQUZDLENBQUY7QUFHRCxPQUpPLENBQVI7QUFNQVQsTUFBQUEsUUFBUSxDQUFDLHFDQUFELEVBQXdDLFlBQVk7QUFDMURDLFFBQUFBLEVBQUUsQ0FBQyw4Q0FBRCxFQUFpRCxZQUFZO0FBQzdESCxVQUFBQSxNQUFNLENBQUNJLGlCQUFRUyxLQUFSLENBQWMsU0FBZCxFQUF5QixRQUF6QixFQUFtQyxZQUFuQyxDQUFELENBQU4sQ0FBeURQLEVBQXpELENBQTRESyxLQUE1RCxDQUNFLDJCQURGO0FBR0QsU0FKQyxDQUFGO0FBS0QsT0FOTyxDQUFSO0FBT0QsS0FkTyxDQUFSO0FBZ0JBVCxJQUFBQSxRQUFRLENBQUMsaUNBQUQsRUFBb0MsWUFBWTtBQUN0REEsTUFBQUEsUUFBUSxDQUFDLGtDQUFELEVBQXFDLFlBQVk7QUFDdkRDLFFBQUFBLEVBQUUsQ0FBQywrQkFBRCxFQUFrQyxZQUFZO0FBQzlDSCxVQUFBQSxNQUFNLENBQUNJLGlCQUFRVSw2QkFBUixDQUFzQyxhQUF0QyxDQUFELENBQU4sQ0FBNkRSLEVBQTdELENBQWdFQyxFQUFoRSxDQUNHUSxLQURIO0FBRUQsU0FIQyxDQUFGO0FBSUQsT0FMTyxDQUFSO0FBT0FiLE1BQUFBLFFBQVEsQ0FBQyxvREFBRCxFQUF1RCxZQUFZO0FBQ3pFRixRQUFBQSxNQUFNLENBQ0pJLGlCQUFRVSw2QkFBUixDQUFzQyxtQkFBdEMsQ0FESSxDQUFOLENBRUVSLEVBRkYsQ0FFS1UsR0FGTCxDQUVTO0FBQUNDLFVBQUFBLE9BQU8sRUFBRSxRQUFWO0FBQW9CQyxVQUFBQSxpQkFBaUIsRUFBRTtBQUF2QyxTQUZUO0FBR0QsT0FKTyxDQUFSO0FBS0QsS0FiTyxDQUFSO0FBY0QsR0F6RU8sQ0FBUjtBQTBFRCxDQTNFTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQHRzLWNoZWNrXG5cbmltcG9ydCB7QXJnU3BlY30gZnJvbSAnLi4vLi4vbGliL3NjaGVtYS9hcmctc3BlYyc7XG5cbmNvbnN0IHtleHBlY3R9ID0gY2hhaTtcblxuZGVzY3JpYmUoJ0FyZ1NwZWMnLCBmdW5jdGlvbiAoKSB7XG4gIGRlc2NyaWJlKCdjbGFzcyBtZXRob2QnLCBmdW5jdGlvbiAoKSB7XG4gICAgZGVzY3JpYmUoJ2NyZWF0ZSgpJywgZnVuY3Rpb24gKCkge1xuICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gYSBuZXcgQXJnU3BlYycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZXhwZWN0KEFyZ1NwZWMuY3JlYXRlKCdmb28nKSkudG8uYmUuYW4uaW5zdGFuY2VvZihBcmdTcGVjKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3RvU2NoZW1hUmVmKCknLCBmdW5jdGlvbiAoKSB7XG4gICAgICBkZXNjcmliZSgnd2hlbiBwcm92aWRlZCBubyBleHRlbnNpb24gaW5mb3JtYXRpb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGEgc2NoZW1hIElEIGZvciBhIHNwZWNpZmljIGFyZ3VtZW50JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGV4cGVjdChBcmdTcGVjLnRvU2NoZW1hUmVmKCdmb28nKSkudG8uZXF1YWwoXG4gICAgICAgICAgICAnYXBwaXVtLmpzb24jL3Byb3BlcnRpZXMvc2VydmVyL3Byb3BlcnRpZXMvZm9vJyxcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBkZXNjcmliZSgnd2hlbiBwcm92aWRlZCBleHRlbnNpb24gaW5mb3JtYXRpb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGEgc2NoZW1hIElEIGZvciBhIHNwZWNpZmljIGFyZ3VtZW50IHdpdGhpbiBhbiBleHRlbnNpb24gc2NoZW1hJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGV4cGVjdChBcmdTcGVjLnRvU2NoZW1hUmVmKCdiYXInLCAnZHJpdmVyJywgJ3N0dWZmJykpLnRvLmVxdWFsKFxuICAgICAgICAgICAgJ2RyaXZlci1zdHVmZi5qc29uIy9wcm9wZXJ0aWVzL2JhcicsXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCd0b1NjaGVtYUJhc2VSZWYoKScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlc2NyaWJlKCd3aGVuIHByb3ZpZGVkIG5vIGV4dGVuc2lvbiBpbmZvcm1hdGlvbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gdGhlIGJhc2Ugc2NoZW1hIElEJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGV4cGVjdChBcmdTcGVjLnRvU2NoZW1hQmFzZVJlZigpKS50by5lcXVhbChcbiAgICAgICAgICAgICdhcHBpdW0uanNvbicsXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgZGVzY3JpYmUoJ3doZW4gcHJvdmlkZWQgZXh0ZW5zaW9uIGluZm9ybWF0aW9uJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBhIHNjaGVtYSBJRCBmb3IgYW4gZXh0ZW5zaW9uJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGV4cGVjdChBcmdTcGVjLnRvU2NoZW1hQmFzZVJlZignZHJpdmVyJywgJ3N0dWZmJykpLnRvLmVxdWFsKFxuICAgICAgICAgICAgJ2RyaXZlci1zdHVmZi5qc29uJyxcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3RvQXJnKCknLCBmdW5jdGlvbiAoKSB7XG4gICAgICBkZXNjcmliZSgnd2hlbiBwcm92aWRlZCBubyBleHRlbnNpb24gaW5mb3JtYXRpb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGEgYmFyZSBhcmcgbmFtZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBleHBlY3QoQXJnU3BlYy50b0FyZygnZm9vJykpLnRvLmVxdWFsKCdmb28nKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgZGVzY3JpYmUoJ3doZW4gcHJvdmlkZWQgZXh0ZW5zaW9uIGluZm9ybWF0aW9uJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBhbiBleHRlbnNpb24tc3BlY2lmaWMgYXJnIG5hbWUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZXhwZWN0KEFyZ1NwZWMudG9BcmcoJ25vLW9hdHMnLCAnZHJpdmVyJywgJ2JhZC1kb25rZXknKSkudG8uZXF1YWwoXG4gICAgICAgICAgICAnZHJpdmVyLWJhZC1kb25rZXktbm8tb2F0cycsXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdleHRlbnNpb25JbmZvRnJvbVJvb3RTY2hlbWFJZCgpJywgZnVuY3Rpb24gKCkge1xuICAgICAgZGVzY3JpYmUoJ3doZW4gcHJvdmlkZWQgdGhlIGJhc2Ugc2NoZW1hIElEJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBhbiBlbXB0eSBvYmplY3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZXhwZWN0KEFyZ1NwZWMuZXh0ZW5zaW9uSW5mb0Zyb21Sb290U2NoZW1hSWQoJ2FwcGl1bS5qc29uJykpLnRvLmJlXG4gICAgICAgICAgICAuZW1wdHk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGRlc2NyaWJlKCd3aGVuIHByb3ZpZGVkIHRoZSBzY2hlbWEgSUQgb2YgYW4gZXh0ZW5zaW9uIHNjaGVtYScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZXhwZWN0KFxuICAgICAgICAgIEFyZ1NwZWMuZXh0ZW5zaW9uSW5mb0Zyb21Sb290U2NoZW1hSWQoJ2RyaXZlci1zdHVmZi5qc29uJyksXG4gICAgICAgICkudG8uZXFsKHtleHRUeXBlOiAnZHJpdmVyJywgbm9ybWFsaXplZEV4dE5hbWU6ICdzdHVmZid9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sImZpbGUiOiJ0ZXN0L3NjaGVtYS9hcmctc3BlYy1zcGVjcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
