"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _sinon = _interopRequireDefault(require("sinon"));

var _extensionConfig = require("../../lib/extension-config");

var _appiumConfigSchema = _interopRequireDefault(require("../../lib/schema/appium-config-schema"));

var _argSpec = require("../../lib/schema/arg-spec");

var _defaultArgs = _interopRequireDefault(require("../fixtures/default-args"));

var _driver = _interopRequireDefault(require("../fixtures/driver.schema"));

var _flattenedSchema = _interopRequireDefault(require("../fixtures/flattened-schema"));

var _helpers = require("../helpers");

const {
  expect
} = chai;
describe('schema', function () {
  let schema;
  let sandbox;
  let SchemaFinalizationError;
  let SchemaUnknownSchemaError;
  let SchemaUnsupportedSchemaError;
  let mocks;
  beforeEach(function () {
    sandbox = _sinon.default.createSandbox();
    mocks = {
      'resolve-from': sandbox.stub(),
      '@sidvind/better-ajv-errors': sandbox.stub()
    };
    schema = _helpers.rewiremock.proxy(() => require('../../lib/schema/schema'), mocks);
    SchemaFinalizationError = schema.SchemaFinalizationError;
    SchemaUnknownSchemaError = schema.SchemaUnknownSchemaError;
    SchemaUnsupportedSchemaError = schema.SchemaUnsupportedSchemaError;
    schema.resetSchema();
  });
  afterEach(function () {
    sandbox.restore();
  });
  describe('registerSchema()', function () {
    describe('error conditions', function () {
      describe('when provided no parameters', function () {
        it('should throw a TypeError', function () {
          expect(() => {
            schema.registerSchema();
          }).to.throw(TypeError, /expected extension type/i);
        });
      });
      describe('when provided `type` and `name`, but not `schema`', function () {
        it('should throw a TypeError', function () {
          expect(() => schema.registerSchema(_extensionConfig.DRIVER_TYPE, 'whoopeee')).to.throw(TypeError, /expected extension type/i);
        });
      });
      describe('when provided `type` and nonempty `schema`, but no `name`', function () {
        it('should throw a TypeError', function () {
          expect(() => schema.registerSchema(_extensionConfig.DRIVER_TYPE, undefined, {
            title: 'whoopeee'
          })).to.throw(TypeError, /expected extension type/i);
        });
      });
      describe('when the schema is of an unsupported type', function () {
        describe('when schema is a object but not a plain object', function () {
          it('should throw', function () {
            expect(() => {
              schema.registerSchema(_extensionConfig.DRIVER_TYPE, 'whoopeee', [45]);
            }).to.throw(SchemaUnsupportedSchemaError, /must be a plain object/i);
          });
        });
        describe('when the schema is async', function () {
          it('should throw', function () {
            expect(() => {
              schema.registerSchema(_extensionConfig.DRIVER_TYPE, 'whoopee', {
                $async: true
              });
            }).to.throw(SchemaUnsupportedSchemaError, /cannot be an async schema/i);
          });
        });
        describe('when the schema is boolean', function () {
          it('should throw', function () {
            expect(() => {
              schema.registerSchema(_extensionConfig.DRIVER_TYPE, 'whoopee', true);
            }).to.throw(SchemaUnsupportedSchemaError);
          });
        });
      });
      describe('when schema previously registered', function () {
        describe('when the schema is identical', function () {
          it('should not throw', function () {
            const schemaObject = {
              title: 'whoopee'
            };
            schema.registerSchema(_extensionConfig.DRIVER_TYPE, 'whoopee', schemaObject);
            expect(() => schema.registerSchema(_extensionConfig.DRIVER_TYPE, 'whoopee', schemaObject)).not.to.throw();
          });
        });
        describe('when the schema is different', function () {
          it('should throw', function () {
            const schemaObject = {
              title: 'whoopee'
            };
            schema.registerSchema(_extensionConfig.DRIVER_TYPE, 'whoopee', schemaObject);
            expect(() => schema.registerSchema(_extensionConfig.DRIVER_TYPE, 'whoopee', {
              title: 'cushion?'
            })).to.throw(Error, /conflicts with an existing schema/);
          });
        });
      });
    });
    describe('when provided a nonempty `type`, `schema` and `name`', function () {
      it('should register the schema', function () {
        const schemaObject = {
          title: 'whoopee'
        };
        expect(() => schema.registerSchema(_extensionConfig.DRIVER_TYPE, 'whoopee', schemaObject)).not.to.throw();
      });
      describe('when the `name` is not unique but `type` is', function () {
        it('should register both', function () {
          const schema1 = {
            title: 'pro-skub'
          };
          const schema2 = {
            title: 'anti-skub'
          };
          schema.registerSchema(_extensionConfig.DRIVER_TYPE, 'skub', schema1);
          expect(() => schema.registerSchema(_extensionConfig.PLUGIN_TYPE, 'skub', schema2)).not.to.throw();
        });
      });
    });
  });
  describe('getSchema()', function () {
    describe('when schema not yet compiled', function () {
      it('should throw', function () {
        expect(() => schema.getSchema()).to.throw(SchemaFinalizationError);
      });
    });
    describe('when schema already compiled', function () {
      beforeEach(function () {
        schema.finalizeSchema();
      });
      it('should return a schema', function () {
        expect(schema.getSchema()).to.eql(_appiumConfigSchema.default);
      });
    });
    describe('when schema already compiled and provided a schema ID', function () {
      beforeEach(function () {
        schema.finalizeSchema();
      });
      describe('when schema ID is the base schema ID', function () {
        it('should return the base schema', function () {
          expect(schema.getSchema(_argSpec.APPIUM_CONFIG_SCHEMA_ID)).to.eql(_appiumConfigSchema.default);
        });
      });
      describe('when the schema ID is a reference', function () {
        it('should return the schema for the reference', function () {
          expect(schema.getSchema(`${_argSpec.APPIUM_CONFIG_SCHEMA_ID}#/properties/server/properties/address`)).to.exist.and.to.eql(_appiumConfigSchema.default.properties.server.properties.address);
        });
      });
      describe('when schema ID is invalid', function () {
        it('should throw', function () {
          expect(() => schema.getSchema('schema-the-clown')).to.throw(SchemaUnknownSchemaError);
        });
      });
    });
    describe('when schema already compiled including an extension', function () {
      beforeEach(function () {
        schema.registerSchema(_extensionConfig.DRIVER_TYPE, 'stuff', _driver.default);
        schema.finalizeSchema();
      });
      it('should return the extension schema', function () {
        expect(schema.getSchema('driver-stuff.json')).to.eql(_driver.default);
      });
    });
  });
  describe('getDefaultsForSchema()', function () {
    describe('when schema not yet compiled', function () {
      it('should throw', function () {
        expect(() => schema.getDefaultsForSchema()).to.throw(SchemaFinalizationError);
      });
    });
    describe('when schema already compiled', function () {
      it('should return a Record object with only defined default values', function () {
        schema.finalizeSchema();
        const defaults = schema.getDefaultsForSchema();
        expect(defaults).to.eql(_defaultArgs.default);
      });
      describe('when extension schemas include defaults', function () {
        it('should return a Record object containing defaults for the extensions', function () {
          schema.registerSchema(_extensionConfig.DRIVER_TYPE, 'stuff', _driver.default);
          schema.finalizeSchema();
          const defaults = schema.getDefaultsForSchema();
          expect(defaults).to.have.property('driver.stuff.answer', 50);
        });
      });
    });
  });
  describe('flattenSchema()', function () {
    describe('when schema not yet compiled', function () {
      it('should throw', function () {
        expect(() => schema.flattenSchema()).to.throw(SchemaFinalizationError);
      });
    });
    describe('when schema compiled', function () {
      beforeEach(function () {
        schema.resetSchema();
        schema.finalizeSchema();
      });
      it('should flatten a schema', function () {
        expect(schema.flattenSchema()).to.eql(_flattenedSchema.default);
      });
    });
    describe('when extensions provide schemas', function () {
      let expected;
      beforeEach(function () {
        schema.registerSchema(_extensionConfig.DRIVER_TYPE, 'fake', require('@appium/fake-driver/build/lib/fake-driver-schema').default);
        schema.finalizeSchema();
        expected = [..._flattenedSchema.default, {
          schema: {
            type: 'integer',
            minimum: 1,
            maximum: 65535,
            description: 'The port to use for the fake web server'
          },
          argSpec: {
            name: 'silly-web-server-port',
            extType: _extensionConfig.DRIVER_TYPE,
            extName: 'fake',
            ref: 'driver-fake.json#/properties/silly-web-server-port',
            arg: 'driver-fake-silly-web-server-port',
            dest: 'driver.fake.sillyWebServerPort',
            rawDest: 'sillyWebServerPort',
            defaultValue: undefined
          }
        }, {
          schema: {
            type: 'string',
            description: 'The host to use for the fake web server',
            default: 'sillyhost'
          },
          argSpec: {
            name: 'sillyWebServerHost',
            extType: _extensionConfig.DRIVER_TYPE,
            extName: 'fake',
            ref: 'driver-fake.json#/properties/sillyWebServerHost',
            arg: 'driver-fake-silly-web-server-host',
            dest: 'driver.fake.sillyWebServerHost',
            rawDest: 'sillyWebServerHost',
            defaultValue: 'sillyhost'
          }
        }];
      });
      it('should flatten a schema', function () {
        expect(schema.flattenSchema()).to.eql(expected);
      });
    });
  });
  describe('finalizeSchema()', function () {
    describe('when no extensions registered schemas', function () {
      it('should return a Record containing the single base schema', function () {
        expect(schema.finalizeSchema()).to.eql({
          [_argSpec.APPIUM_CONFIG_SCHEMA_ID]: _appiumConfigSchema.default
        });
      });
    });
    describe('when extensions register schemas', function () {
      beforeEach(function () {
        schema.registerSchema(_extensionConfig.DRIVER_TYPE, 'stuff', _driver.default);
      });
      it('should return a Record containing all extension schemas _and_ the base schema containing references to the extension schemas', function () {
        const baseSchemaWithRefs = _lodash.default.cloneDeep(_appiumConfigSchema.default);

        baseSchemaWithRefs.properties.server.properties.driver.properties.stuff = {
          $ref: 'driver-stuff.json',
          $comment: 'stuff'
        };
        expect(schema.finalizeSchema()).to.eql({
          [_argSpec.APPIUM_CONFIG_SCHEMA_ID]: baseSchemaWithRefs,
          'driver-stuff.json': _driver.default
        });
      });
    });
  });
  describe('isFinalized()', function () {
    describe('when the schema is finalized', function () {
      it('should return true', function () {
        schema.finalizeSchema();
        expect(schema.isFinalized()).to.be.true;
      });
    });
    describe('when the schema is not finalized', function () {
      it('should return false', function () {
        schema.resetSchema();
        expect(schema.isFinalized()).to.be.false;
      });
    });
  });
  describe('validate()', function () {
    describe('when schema not yet compiled', function () {
      it('should throw', function () {
        expect(() => schema.validate('foo')).to.throw(SchemaFinalizationError);
      });
    });
    describe('when schema already compiled, with no extensions', function () {
      beforeEach(function () {
        schema.finalizeSchema();
      });
      describe('when provided an invalid schema ID ref', function () {
        it('should throw', function () {
          expect(() => schema.validate('foo', 'bar')).to.throw(SchemaUnknownSchemaError);
        });
      });
      describe('when not provided a schema ID ref', function () {
        describe('when provided a valid value', function () {
          it('should return an empty array of no errors', function () {
            expect(schema.validate({
              server: {
                address: '127.0.0.1'
              }
            })).to.eql([]);
          });
        });
        describe('when provided an invalid value', function () {
          it('should return an array containing errors', function () {
            expect(schema.validate({
              address: '127.0.0.1'
            })).to.be.an('array').and.to.not.be.empty;
          });
        });
      });
      describe('when provided a schema ID ref', function () {
        describe('when provided a valid value', function () {
          it('should return an empty array of no errors', function () {
            expect(schema.validate('127.0.0.1', 'appium.json#/properties/server/properties/address')).to.eql([]);
          });
        });
        describe('when provided an invalid value', function () {
          it('should return an array containing errors', function () {
            expect(schema.validate('127.0.0.1', 'appium.json#/properties/server/properties/port')).to.be.an('array').and.to.not.be.empty;
          });
        });
      });
    });
    describe('when schema already compiled, with extensions', function () {
      beforeEach(function () {
        schema.registerSchema(_extensionConfig.DRIVER_TYPE, 'stuff', _driver.default);
        schema.finalizeSchema();
      });
      describe('when provided an invalid schema ID ref', function () {
        it('should throw', function () {
          expect(() => schema.validate('foo', 'bar')).to.throw(SchemaUnknownSchemaError);
        });
      });
      describe('when not provided a schema ID ref', function () {
        describe('when provided a valid value', function () {
          it('should return an empty array of no errors', function () {
            expect(schema.validate({
              server: {
                driver: {
                  stuff: {
                    answer: 99
                  }
                }
              }
            })).to.eql([]);
          });
        });
        describe('when provided an invalid value', function () {
          it('should return an array containing errors', function () {
            expect(schema.validate({
              server: {
                driver: {
                  stuff: {
                    answer: 101
                  }
                }
              }
            })).to.be.an('array').and.to.not.be.empty;
          });
        });
      });
      describe('when provided a schema ID ref', function () {
        describe('when provided a valid value', function () {
          it('should return an empty array of no errors', function () {
            expect(schema.validate(99, 'driver-stuff.json#/properties/answer')).to.eql([]);
          });
        });
        describe('when provided an invalid value', function () {
          it('should return an array containing errors', function () {
            expect(schema.validate(101, 'driver-stuff.json#/properties/answer')).to.be.an('array').and.to.not.be.empty;
          });
        });
      });
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Qvc2NoZW1hL3NjaGVtYS1zcGVjcy5qcyJdLCJuYW1lcyI6WyJleHBlY3QiLCJjaGFpIiwiZGVzY3JpYmUiLCJzY2hlbWEiLCJzYW5kYm94IiwiU2NoZW1hRmluYWxpemF0aW9uRXJyb3IiLCJTY2hlbWFVbmtub3duU2NoZW1hRXJyb3IiLCJTY2hlbWFVbnN1cHBvcnRlZFNjaGVtYUVycm9yIiwibW9ja3MiLCJiZWZvcmVFYWNoIiwic2lub24iLCJjcmVhdGVTYW5kYm94Iiwic3R1YiIsInJld2lyZW1vY2siLCJwcm94eSIsInJlcXVpcmUiLCJyZXNldFNjaGVtYSIsImFmdGVyRWFjaCIsInJlc3RvcmUiLCJpdCIsInJlZ2lzdGVyU2NoZW1hIiwidG8iLCJ0aHJvdyIsIlR5cGVFcnJvciIsIkRSSVZFUl9UWVBFIiwidW5kZWZpbmVkIiwidGl0bGUiLCIkYXN5bmMiLCJzY2hlbWFPYmplY3QiLCJub3QiLCJFcnJvciIsInNjaGVtYTEiLCJzY2hlbWEyIiwiUExVR0lOX1RZUEUiLCJnZXRTY2hlbWEiLCJmaW5hbGl6ZVNjaGVtYSIsImVxbCIsImFwcGl1bUNvbmZpZ1NjaGVtYSIsIkFQUElVTV9DT05GSUdfU0NIRU1BX0lEIiwiZXhpc3QiLCJhbmQiLCJwcm9wZXJ0aWVzIiwic2VydmVyIiwiYWRkcmVzcyIsIkRSSVZFUl9TQ0hFTUFfRklYVFVSRSIsImdldERlZmF1bHRzRm9yU2NoZW1hIiwiZGVmYXVsdHMiLCJkZWZhdWx0QXJnc0ZpeHR1cmUiLCJoYXZlIiwicHJvcGVydHkiLCJmbGF0dGVuU2NoZW1hIiwiZmxhdHRlbmVkU2NoZW1hRml4dHVyZSIsImV4cGVjdGVkIiwiZGVmYXVsdCIsInR5cGUiLCJtaW5pbXVtIiwibWF4aW11bSIsImRlc2NyaXB0aW9uIiwiYXJnU3BlYyIsIm5hbWUiLCJleHRUeXBlIiwiZXh0TmFtZSIsInJlZiIsImFyZyIsImRlc3QiLCJyYXdEZXN0IiwiZGVmYXVsdFZhbHVlIiwiYmFzZVNjaGVtYVdpdGhSZWZzIiwiXyIsImNsb25lRGVlcCIsImRyaXZlciIsInN0dWZmIiwiJHJlZiIsIiRjb21tZW50IiwiaXNGaW5hbGl6ZWQiLCJiZSIsInRydWUiLCJmYWxzZSIsInZhbGlkYXRlIiwiYW4iLCJlbXB0eSIsImFuc3dlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUEsTUFBTTtBQUFDQSxFQUFBQTtBQUFELElBQVdDLElBQWpCO0FBRUFDLFFBQVEsQ0FBQyxRQUFELEVBQVcsWUFBWTtBQUU3QixNQUFJQyxNQUFKO0FBRUEsTUFBSUMsT0FBSjtBQUtBLE1BQUlDLHVCQUFKO0FBS0EsTUFBSUMsd0JBQUo7QUFLQSxNQUFJQyw0QkFBSjtBQUVBLE1BQUlDLEtBQUo7QUFFQUMsRUFBQUEsVUFBVSxDQUFDLFlBQVk7QUFDckJMLElBQUFBLE9BQU8sR0FBR00sZUFBTUMsYUFBTixFQUFWO0FBRUFILElBQUFBLEtBQUssR0FBRztBQUNOLHNCQUFnQkosT0FBTyxDQUFDUSxJQUFSLEVBRFY7QUFFTixvQ0FBOEJSLE9BQU8sQ0FBQ1EsSUFBUjtBQUZ4QixLQUFSO0FBS0FULElBQUFBLE1BQU0sR0FBR1Usb0JBQVdDLEtBQVgsQ0FBaUIsTUFBTUMsT0FBTyxDQUFDLHlCQUFELENBQTlCLEVBQTJEUCxLQUEzRCxDQUFUO0FBQ0FILElBQUFBLHVCQUF1QixHQUFHRixNQUFNLENBQUNFLHVCQUFqQztBQUNBQyxJQUFBQSx3QkFBd0IsR0FBR0gsTUFBTSxDQUFDRyx3QkFBbEM7QUFDQUMsSUFBQUEsNEJBQTRCLEdBQUdKLE1BQU0sQ0FBQ0ksNEJBQXRDO0FBQ0FKLElBQUFBLE1BQU0sQ0FBQ2EsV0FBUDtBQUNELEdBYlMsQ0FBVjtBQWVBQyxFQUFBQSxTQUFTLENBQUMsWUFBWTtBQUNwQmIsSUFBQUEsT0FBTyxDQUFDYyxPQUFSO0FBQ0QsR0FGUSxDQUFUO0FBSUFoQixFQUFBQSxRQUFRLENBQUMsa0JBQUQsRUFBcUIsWUFBWTtBQUN2Q0EsSUFB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Q0FFK0I4QyxFQUYvQixDQUVrQ0ssS0FGbEM7QUFHRCxXQUpDLENBQUY7QUFLRCxTQU5PLENBQVI7QUFPRCxPQWhCTyxDQUFSO0FBaUJELEtBakRPLENBQVI7QUFrREQsR0FoSE8sQ0FBUjtBQWlIRCxDQWhlTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQHRzLWNoZWNrXG5cbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgc2lub24gZnJvbSAnc2lub24nO1xuaW1wb3J0IHsgRFJJVkVSX1RZUEUsIFBMVUdJTl9UWVBFIH0gZnJvbSAnLi4vLi4vbGliL2V4dGVuc2lvbi1jb25maWcnO1xuaW1wb3J0IGFwcGl1bUNvbmZpZ1NjaGVtYSBmcm9tICcuLi8uLi9saWIvc2NoZW1hL2FwcGl1bS1jb25maWctc2NoZW1hJztcbmltcG9ydCB7IEFQUElVTV9DT05GSUdfU0NIRU1BX0lEIH0gZnJvbSAnLi4vLi4vbGliL3NjaGVtYS9hcmctc3BlYyc7XG5pbXBvcnQgZGVmYXVsdEFyZ3NGaXh0dXJlIGZyb20gJy4uL2ZpeHR1cmVzL2RlZmF1bHQtYXJncyc7XG5pbXBvcnQgRFJJVkVSX1NDSEVNQV9GSVhUVVJFIGZyb20gJy4uL2ZpeHR1cmVzL2RyaXZlci5zY2hlbWEnO1xuaW1wb3J0IGZsYXR0ZW5lZFNjaGVtYUZpeHR1cmUgZnJvbSAnLi4vZml4dHVyZXMvZmxhdHRlbmVkLXNjaGVtYSc7XG5pbXBvcnQgeyByZXdpcmVtb2NrIH0gZnJvbSAnLi4vaGVscGVycyc7XG5cbmNvbnN0IHtleHBlY3R9ID0gY2hhaTtcblxuZGVzY3JpYmUoJ3NjaGVtYScsIGZ1bmN0aW9uICgpIHtcbiAgLyoqIEB0eXBlIHtpbXBvcnQoJy4uLy4uL2xpYi9zY2hlbWEvc2NoZW1hJyl9ICovXG4gIGxldCBzY2hlbWE7XG4gIC8qKiBAdHlwZSB7aW1wb3J0KCdzaW5vbicpLlNpbm9uU2FuZGJveH0gKi9cbiAgbGV0IHNhbmRib3g7XG5cbiAgLyoqXG4gICAqIEB0eXBlIHt0eXBlb2YgaW1wb3J0KCcuLi8uLi9saWIvc2NoZW1hL3NjaGVtYScpLlNjaGVtYUZpbmFsaXphdGlvbkVycm9yfVxuICAgKi9cbiAgbGV0IFNjaGVtYUZpbmFsaXphdGlvbkVycm9yO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7dHlwZW9mIGltcG9ydCgnLi4vLi4vbGliL3NjaGVtYS9zY2hlbWEnKS5TY2hlbWFVbmtub3duU2NoZW1hRXJyb3J9XG4gICAqL1xuICBsZXQgU2NoZW1hVW5rbm93blNjaGVtYUVycm9yO1xuXG4gIC8qKlxuICAgKiBAdHlwZSB7dHlwZW9mIGltcG9ydCgnLi4vLi4vbGliL3NjaGVtYS9zY2hlbWEnKS5TY2hlbWFVbnN1cHBvcnRlZFNjaGVtYUVycm9yfVxuICAgKi9cbiAgbGV0IFNjaGVtYVVuc3VwcG9ydGVkU2NoZW1hRXJyb3I7XG5cbiAgbGV0IG1vY2tzO1xuXG4gIGJlZm9yZUVhY2goZnVuY3Rpb24gKCkge1xuICAgIHNhbmRib3ggPSBzaW5vbi5jcmVhdGVTYW5kYm94KCk7XG5cbiAgICBtb2NrcyA9IHtcbiAgICAgICdyZXNvbHZlLWZyb20nOiBzYW5kYm94LnN0dWIoKSxcbiAgICAgICdAc2lkdmluZC9iZXR0ZXItYWp2LWVycm9ycyc6IHNhbmRib3guc3R1YigpLFxuICAgIH07XG5cbiAgICBzY2hlbWEgPSByZXdpcmVtb2NrLnByb3h5KCgpID0+IHJlcXVpcmUoJy4uLy4uL2xpYi9zY2hlbWEvc2NoZW1hJyksIG1vY2tzKTtcbiAgICBTY2hlbWFGaW5hbGl6YXRpb25FcnJvciA9IHNjaGVtYS5TY2hlbWFGaW5hbGl6YXRpb25FcnJvcjtcbiAgICBTY2hlbWFVbmtub3duU2NoZW1hRXJyb3IgPSBzY2hlbWEuU2NoZW1hVW5rbm93blNjaGVtYUVycm9yO1xuICAgIFNjaGVtYVVuc3VwcG9ydGVkU2NoZW1hRXJyb3IgPSBzY2hlbWEuU2NoZW1hVW5zdXBwb3J0ZWRTY2hlbWFFcnJvcjtcbiAgICBzY2hlbWEucmVzZXRTY2hlbWEoKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICBzYW5kYm94LnJlc3RvcmUoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3JlZ2lzdGVyU2NoZW1hKCknLCBmdW5jdGlvbiAoKSB7XG4gICAgZGVzY3JpYmUoJ2Vycm9yIGNvbmRpdGlvbnMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBkZXNjcmliZSgnd2hlbiBwcm92aWRlZCBubyBwYXJhbWV0ZXJzJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdCgnc2hvdWxkIHRocm93IGEgVHlwZUVycm9yJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBzY2hlbWEucmVnaXN0ZXJTY2hlbWEoKTtcbiAgICAgICAgICB9KS50by50aHJvdyhUeXBlRXJyb3IsIC9leHBlY3RlZCBleHRlbnNpb24gdHlwZS9pKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgZGVzY3JpYmUoJ3doZW4gcHJvdmlkZWQgYHR5cGVgIGFuZCBgbmFtZWAsIGJ1dCBub3QgYHNjaGVtYWAnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGl0KCdzaG91bGQgdGhyb3cgYSBUeXBlRXJyb3InLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZXhwZWN0KCgpID0+XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBzY2hlbWEucmVnaXN0ZXJTY2hlbWEoRFJJVkVSX1RZUEUsICd3aG9vcGVlZScpLFxuICAgICAgICAgICkudG8udGhyb3coVHlwZUVycm9yLCAvZXhwZWN0ZWQgZXh0ZW5zaW9uIHR5cGUvaSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGRlc2NyaWJlKCd3aGVuIHByb3ZpZGVkIGB0eXBlYCBhbmQgbm9uZW1wdHkgYHNjaGVtYWAsIGJ1dCBubyBgbmFtZWAnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGl0KCdzaG91bGQgdGhyb3cgYSBUeXBlRXJyb3InLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZXhwZWN0KCgpID0+XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBzY2hlbWEucmVnaXN0ZXJTY2hlbWEoRFJJVkVSX1RZUEUsIHVuZGVmaW5lZCwge1xuICAgICAgICAgICAgICB0aXRsZTogJ3dob29wZWVlJyxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICkudG8udGhyb3coVHlwZUVycm9yLCAvZXhwZWN0ZWQgZXh0ZW5zaW9uIHR5cGUvaSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGRlc2NyaWJlKCd3aGVuIHRoZSBzY2hlbWEgaXMgb2YgYW4gdW5zdXBwb3J0ZWQgdHlwZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVzY3JpYmUoJ3doZW4gc2NoZW1hIGlzIGEgb2JqZWN0IGJ1dCBub3QgYSBwbGFpbiBvYmplY3QnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaXQoJ3Nob3VsZCB0aHJvdycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgc2NoZW1hLnJlZ2lzdGVyU2NoZW1hKERSSVZFUl9UWVBFLCAnd2hvb3BlZWUnLCBbNDVdKTtcbiAgICAgICAgICAgIH0pLnRvLnRocm93KFxuICAgICAgICAgICAgICBTY2hlbWFVbnN1cHBvcnRlZFNjaGVtYUVycm9yLFxuICAgICAgICAgICAgICAvbXVzdCBiZSBhIHBsYWluIG9iamVjdC9pLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVzY3JpYmUoJ3doZW4gdGhlIHNjaGVtYSBpcyBhc3luYycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpdCgnc2hvdWxkIHRocm93JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZXhwZWN0KCgpID0+IHtcbiAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgICAgICAgICBzY2hlbWEucmVnaXN0ZXJTY2hlbWEoRFJJVkVSX1RZUEUsICd3aG9vcGVlJywgeyRhc3luYzogdHJ1ZX0pO1xuICAgICAgICAgICAgfSkudG8udGhyb3coXG4gICAgICAgICAgICAgIFNjaGVtYVVuc3VwcG9ydGVkU2NoZW1hRXJyb3IsXG4gICAgICAgICAgICAgIC9jYW5ub3QgYmUgYW4gYXN5bmMgc2NoZW1hL2ksXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBkZXNjcmliZSgnd2hlbiB0aGUgc2NoZW1hIGlzIGJvb2xlYW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaXQoJ3Nob3VsZCB0aHJvdycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgc2NoZW1hLnJlZ2lzdGVyU2NoZW1hKERSSVZFUl9UWVBFLCAnd2hvb3BlZScsIHRydWUpO1xuICAgICAgICAgICAgfSkudG8udGhyb3coU2NoZW1hVW5zdXBwb3J0ZWRTY2hlbWFFcnJvcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGRlc2NyaWJlKCd3aGVuIHNjaGVtYSBwcmV2aW91c2x5IHJlZ2lzdGVyZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRlc2NyaWJlKCd3aGVuIHRoZSBzY2hlbWEgaXMgaWRlbnRpY2FsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGl0KCdzaG91bGQgbm90IHRocm93JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc3Qgc2NoZW1hT2JqZWN0ID0ge3RpdGxlOiAnd2hvb3BlZSd9O1xuICAgICAgICAgICAgc2NoZW1hLnJlZ2lzdGVyU2NoZW1hKERSSVZFUl9UWVBFLCAnd2hvb3BlZScsIHNjaGVtYU9iamVjdCk7XG4gICAgICAgICAgICBleHBlY3QoKCkgPT5cbiAgICAgICAgICAgICAgc2NoZW1hLnJlZ2lzdGVyU2NoZW1hKERSSVZFUl9UWVBFLCAnd2hvb3BlZScsIHNjaGVtYU9iamVjdCksXG4gICAgICAgICAgICApLm5vdC50by50aHJvdygpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBkZXNjcmliZSgnd2hlbiB0aGUgc2NoZW1hIGlzIGRpZmZlcmVudCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpdCgnc2hvdWxkIHRocm93JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc3Qgc2NoZW1hT2JqZWN0ID0ge3RpdGxlOiAnd2hvb3BlZSd9O1xuICAgICAgICAgICAgc2NoZW1hLnJlZ2lzdGVyU2NoZW1hKERSSVZFUl9UWVBFLCAnd2hvb3BlZScsIHNjaGVtYU9iamVjdCk7XG4gICAgICAgICAgICBleHBlY3QoKCkgPT5cbiAgICAgICAgICAgICAgc2NoZW1hLnJlZ2lzdGVyU2NoZW1hKERSSVZFUl9UWVBFLCAnd2hvb3BlZScsIHtcbiAgICAgICAgICAgICAgICB0aXRsZTogJ2N1c2hpb24/JyxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICApLnRvLnRocm93KEVycm9yLCAvY29uZmxpY3RzIHdpdGggYW4gZXhpc3Rpbmcgc2NoZW1hLyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnd2hlbiBwcm92aWRlZCBhIG5vbmVtcHR5IGB0eXBlYCwgYHNjaGVtYWAgYW5kIGBuYW1lYCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGl0KCdzaG91bGQgcmVnaXN0ZXIgdGhlIHNjaGVtYScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3Qgc2NoZW1hT2JqZWN0ID0ge3RpdGxlOiAnd2hvb3BlZSd9O1xuICAgICAgICBleHBlY3QoKCkgPT5cbiAgICAgICAgICBzY2hlbWEucmVnaXN0ZXJTY2hlbWEoRFJJVkVSX1RZUEUsICd3aG9vcGVlJywgc2NoZW1hT2JqZWN0KSxcbiAgICAgICAgKS5ub3QudG8udGhyb3coKTtcbiAgICAgIH0pO1xuXG4gICAgICBkZXNjcmliZSgnd2hlbiB0aGUgYG5hbWVgIGlzIG5vdCB1bmlxdWUgYnV0IGB0eXBlYCBpcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQoJ3Nob3VsZCByZWdpc3RlciBib3RoJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNvbnN0IHNjaGVtYTEgPSB7dGl0bGU6ICdwcm8tc2t1Yid9O1xuICAgICAgICAgIGNvbnN0IHNjaGVtYTIgPSB7dGl0bGU6ICdhbnRpLXNrdWInfTtcbiAgICAgICAgICBzY2hlbWEucmVnaXN0ZXJTY2hlbWEoRFJJVkVSX1RZUEUsICdza3ViJywgc2NoZW1hMSk7XG4gICAgICAgICAgZXhwZWN0KCgpID0+XG4gICAgICAgICAgICBzY2hlbWEucmVnaXN0ZXJTY2hlbWEoUExVR0lOX1RZUEUsICdza3ViJywgc2NoZW1hMiksXG4gICAgICAgICAgKS5ub3QudG8udGhyb3coKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dldFNjaGVtYSgpJywgZnVuY3Rpb24gKCkge1xuICAgIGRlc2NyaWJlKCd3aGVuIHNjaGVtYSBub3QgeWV0IGNvbXBpbGVkJywgZnVuY3Rpb24gKCkge1xuICAgICAgaXQoJ3Nob3VsZCB0aHJvdycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZXhwZWN0KCgpID0+IHNjaGVtYS5nZXRTY2hlbWEoKSkudG8udGhyb3coU2NoZW1hRmluYWxpemF0aW9uRXJyb3IpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnd2hlbiBzY2hlbWEgYWxyZWFkeSBjb21waWxlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGJlZm9yZUVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBzY2hlbWEuZmluYWxpemVTY2hlbWEoKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIHJldHVybiBhIHNjaGVtYScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZXhwZWN0KHNjaGVtYS5nZXRTY2hlbWEoKSkudG8uZXFsKGFwcGl1bUNvbmZpZ1NjaGVtYSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCd3aGVuIHNjaGVtYSBhbHJlYWR5IGNvbXBpbGVkIGFuZCBwcm92aWRlZCBhIHNjaGVtYSBJRCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGJlZm9yZUVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBzY2hlbWEuZmluYWxpemVTY2hlbWEoKTtcbiAgICAgIH0pO1xuXG4gICAgICBkZXNjcmliZSgnd2hlbiBzY2hlbWEgSUQgaXMgdGhlIGJhc2Ugc2NoZW1hIElEJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdCgnc2hvdWxkIHJldHVybiB0aGUgYmFzZSBzY2hlbWEnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZXhwZWN0KHNjaGVtYS5nZXRTY2hlbWEoQVBQSVVNX0NPTkZJR19TQ0hFTUFfSUQpKS50by5lcWwoXG4gICAgICAgICAgICBhcHBpdW1Db25maWdTY2hlbWEsXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgZGVzY3JpYmUoJ3doZW4gdGhlIHNjaGVtYSBJRCBpcyBhIHJlZmVyZW5jZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gdGhlIHNjaGVtYSBmb3IgdGhlIHJlZmVyZW5jZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBleHBlY3QoXG4gICAgICAgICAgICBzY2hlbWEuZ2V0U2NoZW1hKFxuICAgICAgICAgICAgICBgJHtBUFBJVU1fQ09ORklHX1NDSEVNQV9JRH0jL3Byb3BlcnRpZXMvc2VydmVyL3Byb3BlcnRpZXMvYWRkcmVzc2AsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICkudG8uZXhpc3QuYW5kLnRvLmVxbChcbiAgICAgICAgICAgIGFwcGl1bUNvbmZpZ1NjaGVtYS5wcm9wZXJ0aWVzLnNlcnZlci5wcm9wZXJ0aWVzLmFkZHJlc3MsXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgZGVzY3JpYmUoJ3doZW4gc2NoZW1hIElEIGlzIGludmFsaWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGl0KCdzaG91bGQgdGhyb3cnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZXhwZWN0KCgpID0+IHNjaGVtYS5nZXRTY2hlbWEoJ3NjaGVtYS10aGUtY2xvd24nKSkudG8udGhyb3coXG4gICAgICAgICAgICBTY2hlbWFVbmtub3duU2NoZW1hRXJyb3IsXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCd3aGVuIHNjaGVtYSBhbHJlYWR5IGNvbXBpbGVkIGluY2x1ZGluZyBhbiBleHRlbnNpb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2NoZW1hLnJlZ2lzdGVyU2NoZW1hKERSSVZFUl9UWVBFLCAnc3R1ZmYnLCBEUklWRVJfU0NIRU1BX0ZJWFRVUkUpO1xuICAgICAgICBzY2hlbWEuZmluYWxpemVTY2hlbWEoKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIHJldHVybiB0aGUgZXh0ZW5zaW9uIHNjaGVtYScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZXhwZWN0KHNjaGVtYS5nZXRTY2hlbWEoJ2RyaXZlci1zdHVmZi5qc29uJykpLnRvLmVxbChcbiAgICAgICAgICBEUklWRVJfU0NIRU1BX0ZJWFRVUkUsXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2dldERlZmF1bHRzRm9yU2NoZW1hKCknLCBmdW5jdGlvbiAoKSB7XG4gICAgZGVzY3JpYmUoJ3doZW4gc2NoZW1hIG5vdCB5ZXQgY29tcGlsZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpdCgnc2hvdWxkIHRocm93JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBleHBlY3QoKCkgPT4gc2NoZW1hLmdldERlZmF1bHRzRm9yU2NoZW1hKCkpLnRvLnRocm93KFxuICAgICAgICAgIFNjaGVtYUZpbmFsaXphdGlvbkVycm9yLFxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnd2hlbiBzY2hlbWEgYWxyZWFkeSBjb21waWxlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGEgUmVjb3JkIG9iamVjdCB3aXRoIG9ubHkgZGVmaW5lZCBkZWZhdWx0IHZhbHVlcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2NoZW1hLmZpbmFsaXplU2NoZW1hKCk7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRzID0gc2NoZW1hLmdldERlZmF1bHRzRm9yU2NoZW1hKCk7XG4gICAgICAgIGV4cGVjdChkZWZhdWx0cykudG8uZXFsKGRlZmF1bHRBcmdzRml4dHVyZSk7XG4gICAgICB9KTtcblxuICAgICAgZGVzY3JpYmUoJ3doZW4gZXh0ZW5zaW9uIHNjaGVtYXMgaW5jbHVkZSBkZWZhdWx0cycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gYSBSZWNvcmQgb2JqZWN0IGNvbnRhaW5pbmcgZGVmYXVsdHMgZm9yIHRoZSBleHRlbnNpb25zJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHNjaGVtYS5yZWdpc3RlclNjaGVtYShEUklWRVJfVFlQRSwgJ3N0dWZmJywgRFJJVkVSX1NDSEVNQV9GSVhUVVJFKTtcbiAgICAgICAgICBzY2hlbWEuZmluYWxpemVTY2hlbWEoKTtcbiAgICAgICAgICBjb25zdCBkZWZhdWx0cyA9IHNjaGVtYS5nZXREZWZhdWx0c0ZvclNjaGVtYSgpO1xuICAgICAgICAgIC8vIGV4dGVuc2lvbnMgaGF2ZSBhIGtleSB0aGF0IGxvb2tzIGxpa2UgYSBrZXlwYXRoLiB3ZSBtYXkgd2FudCB0byBjaGFuZ2UgdGhhdFxuICAgICAgICAgIGV4cGVjdChkZWZhdWx0cykudG8uaGF2ZS5wcm9wZXJ0eSgnZHJpdmVyLnN0dWZmLmFuc3dlcicsIDUwKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2ZsYXR0ZW5TY2hlbWEoKScsIGZ1bmN0aW9uICgpIHtcbiAgICBkZXNjcmliZSgnd2hlbiBzY2hlbWEgbm90IHlldCBjb21waWxlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGl0KCdzaG91bGQgdGhyb3cnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGV4cGVjdCgoKSA9PiBzY2hlbWEuZmxhdHRlblNjaGVtYSgpKS50by50aHJvdyhTY2hlbWFGaW5hbGl6YXRpb25FcnJvcik7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCd3aGVuIHNjaGVtYSBjb21waWxlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGJlZm9yZUVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBzY2hlbWEucmVzZXRTY2hlbWEoKTtcbiAgICAgICAgc2NoZW1hLmZpbmFsaXplU2NoZW1hKCk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBmbGF0dGVuIGEgc2NoZW1hJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBleHBlY3Qoc2NoZW1hLmZsYXR0ZW5TY2hlbWEoKSkudG8uZXFsKGZsYXR0ZW5lZFNjaGVtYUZpeHR1cmUpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnd2hlbiBleHRlbnNpb25zIHByb3ZpZGUgc2NoZW1hcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBleHBlY3RlZDtcblxuICAgICAgYmVmb3JlRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNjaGVtYS5yZWdpc3RlclNjaGVtYShcbiAgICAgICAgICBEUklWRVJfVFlQRSxcbiAgICAgICAgICAnZmFrZScsXG4gICAgICAgICAgLy8gVFMgY29tcGxhaW5zIGFib3V0IHRoaXMgcmVxdWlyZSgpXG4gICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgIHJlcXVpcmUoJ0BhcHBpdW0vZmFrZS1kcml2ZXIvYnVpbGQvbGliL2Zha2UtZHJpdmVyLXNjaGVtYScpLmRlZmF1bHQsXG4gICAgICAgICk7XG4gICAgICAgIHNjaGVtYS5maW5hbGl6ZVNjaGVtYSgpO1xuXG4gICAgICAgIC8vIHRoZXNlIHByb3BzIHdvdWxkIGJlIGFkZGVkIGJ5IHRoZSBmYWtlLWRyaXZlciBleHRlbnNpb25cbiAgICAgICAgZXhwZWN0ZWQgPSBbXG4gICAgICAgICAgLi4uZmxhdHRlbmVkU2NoZW1hRml4dHVyZSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzY2hlbWE6IHtcbiAgICAgICAgICAgICAgdHlwZTogJ2ludGVnZXInLFxuICAgICAgICAgICAgICBtaW5pbXVtOiAxLFxuICAgICAgICAgICAgICBtYXhpbXVtOiA2NTUzNSxcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdUaGUgcG9ydCB0byB1c2UgZm9yIHRoZSBmYWtlIHdlYiBzZXJ2ZXInLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFyZ1NwZWM6IHtcbiAgICAgICAgICAgICAgbmFtZTogJ3NpbGx5LXdlYi1zZXJ2ZXItcG9ydCcsXG4gICAgICAgICAgICAgIGV4dFR5cGU6IERSSVZFUl9UWVBFLFxuICAgICAgICAgICAgICBleHROYW1lOiAnZmFrZScsXG4gICAgICAgICAgICAgIHJlZjogJ2RyaXZlci1mYWtlLmpzb24jL3Byb3BlcnRpZXMvc2lsbHktd2ViLXNlcnZlci1wb3J0JyxcbiAgICAgICAgICAgICAgYXJnOiAnZHJpdmVyLWZha2Utc2lsbHktd2ViLXNlcnZlci1wb3J0JyxcbiAgICAgICAgICAgICAgZGVzdDogJ2RyaXZlci5mYWtlLnNpbGx5V2ViU2VydmVyUG9ydCcsXG4gICAgICAgICAgICAgIHJhd0Rlc3Q6ICdzaWxseVdlYlNlcnZlclBvcnQnLFxuICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzY2hlbWE6IHtcbiAgICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnVGhlIGhvc3QgdG8gdXNlIGZvciB0aGUgZmFrZSB3ZWIgc2VydmVyJyxcbiAgICAgICAgICAgICAgZGVmYXVsdDogJ3NpbGx5aG9zdCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXJnU3BlYzoge1xuICAgICAgICAgICAgICBuYW1lOiAnc2lsbHlXZWJTZXJ2ZXJIb3N0JyxcbiAgICAgICAgICAgICAgZXh0VHlwZTogRFJJVkVSX1RZUEUsXG4gICAgICAgICAgICAgIGV4dE5hbWU6ICdmYWtlJyxcbiAgICAgICAgICAgICAgcmVmOiAnZHJpdmVyLWZha2UuanNvbiMvcHJvcGVydGllcy9zaWxseVdlYlNlcnZlckhvc3QnLFxuICAgICAgICAgICAgICBhcmc6ICdkcml2ZXItZmFrZS1zaWxseS13ZWItc2VydmVyLWhvc3QnLFxuICAgICAgICAgICAgICBkZXN0OiAnZHJpdmVyLmZha2Uuc2lsbHlXZWJTZXJ2ZXJIb3N0JyxcbiAgICAgICAgICAgICAgcmF3RGVzdDogJ3NpbGx5V2ViU2VydmVySG9zdCcsXG4gICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogJ3NpbGx5aG9zdCcsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIF07XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBmbGF0dGVuIGEgc2NoZW1hJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBleHBlY3Qoc2NoZW1hLmZsYXR0ZW5TY2hlbWEoKSkudG8uZXFsKGV4cGVjdGVkKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZmluYWxpemVTY2hlbWEoKScsIGZ1bmN0aW9uICgpIHtcbiAgICBkZXNjcmliZSgnd2hlbiBubyBleHRlbnNpb25zIHJlZ2lzdGVyZWQgc2NoZW1hcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGEgUmVjb3JkIGNvbnRhaW5pbmcgdGhlIHNpbmdsZSBiYXNlIHNjaGVtYScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZXhwZWN0KHNjaGVtYS5maW5hbGl6ZVNjaGVtYSgpKS50by5lcWwoe1xuICAgICAgICAgIFtBUFBJVU1fQ09ORklHX1NDSEVNQV9JRF06IGFwcGl1bUNvbmZpZ1NjaGVtYSxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCd3aGVuIGV4dGVuc2lvbnMgcmVnaXN0ZXIgc2NoZW1hcycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGJlZm9yZUVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBzY2hlbWEucmVnaXN0ZXJTY2hlbWEoRFJJVkVSX1RZUEUsICdzdHVmZicsIERSSVZFUl9TQ0hFTUFfRklYVFVSRSk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gYSBSZWNvcmQgY29udGFpbmluZyBhbGwgZXh0ZW5zaW9uIHNjaGVtYXMgX2FuZF8gdGhlIGJhc2Ugc2NoZW1hIGNvbnRhaW5pbmcgcmVmZXJlbmNlcyB0byB0aGUgZXh0ZW5zaW9uIHNjaGVtYXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IGJhc2VTY2hlbWFXaXRoUmVmcyA9IF8uY2xvbmVEZWVwKGFwcGl1bUNvbmZpZ1NjaGVtYSk7XG4gICAgICAgIGJhc2VTY2hlbWFXaXRoUmVmcy5wcm9wZXJ0aWVzLnNlcnZlci5wcm9wZXJ0aWVzLmRyaXZlci5wcm9wZXJ0aWVzLnN0dWZmID1cbiAgICAgICAgICB7JHJlZjogJ2RyaXZlci1zdHVmZi5qc29uJywgJGNvbW1lbnQ6ICdzdHVmZid9O1xuICAgICAgICBleHBlY3Qoc2NoZW1hLmZpbmFsaXplU2NoZW1hKCkpLnRvLmVxbCh7XG4gICAgICAgICAgW0FQUElVTV9DT05GSUdfU0NIRU1BX0lEXTogYmFzZVNjaGVtYVdpdGhSZWZzLFxuICAgICAgICAgICdkcml2ZXItc3R1ZmYuanNvbic6IERSSVZFUl9TQ0hFTUFfRklYVFVSRSxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2lzRmluYWxpemVkKCknLCBmdW5jdGlvbiAoKSB7XG4gICAgZGVzY3JpYmUoJ3doZW4gdGhlIHNjaGVtYSBpcyBmaW5hbGl6ZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpdCgnc2hvdWxkIHJldHVybiB0cnVlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBzY2hlbWEuZmluYWxpemVTY2hlbWEoKTtcbiAgICAgICAgZXhwZWN0KHNjaGVtYS5pc0ZpbmFsaXplZCgpKS50by5iZS50cnVlO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnd2hlbiB0aGUgc2NoZW1hIGlzIG5vdCBmaW5hbGl6ZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpdCgnc2hvdWxkIHJldHVybiBmYWxzZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2NoZW1hLnJlc2V0U2NoZW1hKCk7XG4gICAgICAgIGV4cGVjdChzY2hlbWEuaXNGaW5hbGl6ZWQoKSkudG8uYmUuZmFsc2U7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3ZhbGlkYXRlKCknLCBmdW5jdGlvbiAoKSB7XG4gICAgZGVzY3JpYmUoJ3doZW4gc2NoZW1hIG5vdCB5ZXQgY29tcGlsZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpdCgnc2hvdWxkIHRocm93JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBleHBlY3QoKCkgPT4gc2NoZW1hLnZhbGlkYXRlKCdmb28nKSkudG8udGhyb3coU2NoZW1hRmluYWxpemF0aW9uRXJyb3IpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnd2hlbiBzY2hlbWEgYWxyZWFkeSBjb21waWxlZCwgd2l0aCBubyBleHRlbnNpb25zJywgZnVuY3Rpb24gKCkge1xuICAgICAgYmVmb3JlRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNjaGVtYS5maW5hbGl6ZVNjaGVtYSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGRlc2NyaWJlKCd3aGVuIHByb3ZpZGVkIGFuIGludmFsaWQgc2NoZW1hIElEIHJlZicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXQoJ3Nob3VsZCB0aHJvdycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBleHBlY3QoKCkgPT4gc2NoZW1hLnZhbGlkYXRlKCdmb28nLCAnYmFyJykpLnRvLnRocm93KFxuICAgICAgICAgICAgU2NoZW1hVW5rbm93blNjaGVtYUVycm9yLFxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGRlc2NyaWJlKCd3aGVuIG5vdCBwcm92aWRlZCBhIHNjaGVtYSBJRCByZWYnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRlc2NyaWJlKCd3aGVuIHByb3ZpZGVkIGEgdmFsaWQgdmFsdWUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gYW4gZW1wdHkgYXJyYXkgb2Ygbm8gZXJyb3JzJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZXhwZWN0KHNjaGVtYS52YWxpZGF0ZSh7c2VydmVyOiB7YWRkcmVzczogJzEyNy4wLjAuMSd9fSkpLnRvLmVxbChcbiAgICAgICAgICAgICAgW10sXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBkZXNjcmliZSgnd2hlbiBwcm92aWRlZCBhbiBpbnZhbGlkIHZhbHVlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGFuIGFycmF5IGNvbnRhaW5pbmcgZXJyb3JzJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZXhwZWN0KHNjaGVtYS52YWxpZGF0ZSh7YWRkcmVzczogJzEyNy4wLjAuMSd9KSkudG8uYmUuYW4oJ2FycmF5JylcbiAgICAgICAgICAgICAgLmFuZC50by5ub3QuYmUuZW1wdHk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGRlc2NyaWJlKCd3aGVuIHByb3ZpZGVkIGEgc2NoZW1hIElEIHJlZicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVzY3JpYmUoJ3doZW4gcHJvdmlkZWQgYSB2YWxpZCB2YWx1ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBhbiBlbXB0eSBhcnJheSBvZiBubyBlcnJvcnMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBleHBlY3QoXG4gICAgICAgICAgICAgIHNjaGVtYS52YWxpZGF0ZShcbiAgICAgICAgICAgICAgICAnMTI3LjAuMC4xJyxcbiAgICAgICAgICAgICAgICAnYXBwaXVtLmpzb24jL3Byb3BlcnRpZXMvc2VydmVyL3Byb3BlcnRpZXMvYWRkcmVzcycsXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICApLnRvLmVxbChbXSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRlc2NyaWJlKCd3aGVuIHByb3ZpZGVkIGFuIGludmFsaWQgdmFsdWUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gYW4gYXJyYXkgY29udGFpbmluZyBlcnJvcnMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBleHBlY3QoXG4gICAgICAgICAgICAgIHNjaGVtYS52YWxpZGF0ZShcbiAgICAgICAgICAgICAgICAnMTI3LjAuMC4xJyxcbiAgICAgICAgICAgICAgICAnYXBwaXVtLmpzb24jL3Byb3BlcnRpZXMvc2VydmVyL3Byb3BlcnRpZXMvcG9ydCcsXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICApLnRvLmJlLmFuKCdhcnJheScpLmFuZC50by5ub3QuYmUuZW1wdHk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnd2hlbiBzY2hlbWEgYWxyZWFkeSBjb21waWxlZCwgd2l0aCBleHRlbnNpb25zJywgZnVuY3Rpb24gKCkge1xuICAgICAgYmVmb3JlRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNjaGVtYS5yZWdpc3RlclNjaGVtYShEUklWRVJfVFlQRSwgJ3N0dWZmJywgRFJJVkVSX1NDSEVNQV9GSVhUVVJFKTtcbiAgICAgICAgc2NoZW1hLmZpbmFsaXplU2NoZW1hKCk7XG4gICAgICB9KTtcblxuICAgICAgZGVzY3JpYmUoJ3doZW4gcHJvdmlkZWQgYW4gaW52YWxpZCBzY2hlbWEgSUQgcmVmJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpdCgnc2hvdWxkIHRocm93JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGV4cGVjdCgoKSA9PiBzY2hlbWEudmFsaWRhdGUoJ2ZvbycsICdiYXInKSkudG8udGhyb3coXG4gICAgICAgICAgICBTY2hlbWFVbmtub3duU2NoZW1hRXJyb3IsXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgZGVzY3JpYmUoJ3doZW4gbm90IHByb3ZpZGVkIGEgc2NoZW1hIElEIHJlZicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVzY3JpYmUoJ3doZW4gcHJvdmlkZWQgYSB2YWxpZCB2YWx1ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBhbiBlbXB0eSBhcnJheSBvZiBubyBlcnJvcnMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBleHBlY3QoXG4gICAgICAgICAgICAgIHNjaGVtYS52YWxpZGF0ZSh7c2VydmVyOiB7ZHJpdmVyOiB7c3R1ZmY6IHthbnN3ZXI6IDk5fX19fSksXG4gICAgICAgICAgICApLnRvLmVxbChbXSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGRlc2NyaWJlKCd3aGVuIHByb3ZpZGVkIGFuIGludmFsaWQgdmFsdWUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gYW4gYXJyYXkgY29udGFpbmluZyBlcnJvcnMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBleHBlY3QoXG4gICAgICAgICAgICAgIHNjaGVtYS52YWxpZGF0ZSh7c2VydmVyOiB7ZHJpdmVyOiB7c3R1ZmY6IHthbnN3ZXI6IDEwMX19fX0pLFxuICAgICAgICAgICAgKS50by5iZS5hbignYXJyYXknKS5hbmQudG8ubm90LmJlLmVtcHR5O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBkZXNjcmliZSgnd2hlbiBwcm92aWRlZCBhIHNjaGVtYSBJRCByZWYnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRlc2NyaWJlKCd3aGVuIHByb3ZpZGVkIGEgdmFsaWQgdmFsdWUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gYW4gZW1wdHkgYXJyYXkgb2Ygbm8gZXJyb3JzJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZXhwZWN0KFxuICAgICAgICAgICAgICBzY2hlbWEudmFsaWRhdGUoOTksICdkcml2ZXItc3R1ZmYuanNvbiMvcHJvcGVydGllcy9hbnN3ZXInKSxcbiAgICAgICAgICAgICkudG8uZXFsKFtdKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVzY3JpYmUoJ3doZW4gcHJvdmlkZWQgYW4gaW52YWxpZCB2YWx1ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBhbiBhcnJheSBjb250YWluaW5nIGVycm9ycycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGV4cGVjdChcbiAgICAgICAgICAgICAgc2NoZW1hLnZhbGlkYXRlKDEwMSwgJ2RyaXZlci1zdHVmZi5qc29uIy9wcm9wZXJ0aWVzL2Fuc3dlcicpLFxuICAgICAgICAgICAgKS50by5iZS5hbignYXJyYXknKS5hbmQudG8ubm90LmJlLmVtcHR5O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuXG4vKipcbiAqIEB0ZW1wbGF0ZSBQLFJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ3Npbm9uJykuU2lub25TdHViPFAsUj59IFNpbm9uU3R1YjxQLFI+XG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdhanYnKS5kZWZhdWx0WydhZGRTY2hlbWEnXX0gQWp2QWRkU2NoZW1hXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdhanYnKS5kZWZhdWx0WydnZXRTY2hlbWEnXX0gQWp2R2V0U2NoZW1hPGFueT5cbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ2FqdicpLmRlZmF1bHRbJ3ZhbGlkYXRlU2NoZW1hJ119IEFqdlZhbGlkYXRlU2NoZW1hXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdhanYvZGlzdC9jb3JlJykuQW55VmFsaWRhdGVGdW5jdGlvbjxhbnk+fSBBbnlWYWxpZGF0ZUZ1bmN0aW9uXG4gKi9cbiJdLCJmaWxlIjoidGVzdC9zY2hlbWEvc2NoZW1hLXNwZWNzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
