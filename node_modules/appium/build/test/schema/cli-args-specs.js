"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _schema = require("../../lib/schema");

var _cliArgs = require("../../lib/schema/cli-args");

var _cliTransformers = require("../../lib/schema/cli-transformers");

const {
  expect
} = chai;
describe('cli-args', function () {
  describe('toParserArgs()', function () {
    function getArgs(opts = {}) {
      let {
        extName,
        extType,
        schema
      } = opts;

      if (schema && extName && extType) {
        (0, _schema.registerSchema)(extType, extName, schema);
      }

      (0, _schema.finalizeSchema)();
      return _lodash.default.fromPairs([...(0, _cliArgs.toParserArgs)()]);
    }

    beforeEach(_schema.resetSchema);
    afterEach(_schema.resetSchema);
    describe('schema contents', function () {
      const extName = 'blob';
      const extType = 'plugin';
      describe('type', function () {
        let result;
        describe('boolean', function () {
          beforeEach(function () {
            const schema = {
              properties: {
                foo: {
                  type: 'boolean'
                }
              },
              type: 'object'
            };
            result = getArgs({
              schema,
              extName,
              extType
            });
          });
          it('should return options containing `action` prop of `store_const` and no `type`', function () {
            expect(result['--plugin-blob-foo']).to.have.property('action', 'store_const');
          });
          it('should not contain a `metavar` property', function () {
            expect(result['--plugin-blob-foo']).not.to.have.property('metavar');
          });
        });
        describe('object', function () {
          beforeEach(function () {
            const schema = {
              properties: {
                foo: {
                  type: 'object'
                }
              },
              type: 'object'
            };
            result = getArgs({
              schema,
              extName,
              extType
            });
          });
          it('should use the `json` transformer', function () {
            expect(result['--plugin-blob-foo']).to.have.property('type', _cliTransformers.transformers.json);
          });
          it('should contain a SCREAMING_SNAKE_CASE `metavar` prop', function () {
            expect(result['--plugin-blob-foo']).to.have.property('metavar', 'FOO');
          });
        });
        describe('array', function () {
          beforeEach(function () {
            const schema = {
              properties: {
                foo: {
                  type: 'array'
                }
              },
              type: 'object'
            };
            result = getArgs({
              schema,
              extName,
              extType
            });
          });
          it('should use the `csv` transformer', function () {
            expect(result['--plugin-blob-foo']).to.have.property('type', _cliTransformers.transformers.csv);
          });
          it('should contain a SCREAMING_SNAKE_CASE `metavar` prop', function () {
            expect(result['--plugin-blob-foo']).to.have.property('metavar', 'FOO');
          });
        });
        describe('number', function () {
          beforeEach(function () {
            const schema = {
              properties: {
                foo: {
                  type: 'number'
                }
              },
              type: 'object'
            };
            result = getArgs({
              schema,
              extName,
              extType
            });
          });
          it('should parse the value as a float', function () {
            expect(result['--plugin-blob-foo'].type('10.5')).to.equal(10.5);
          });
          it('should contain a SCREAMING_SNAKE_CASE `metavar` prop', function () {
            expect(result['--plugin-blob-foo']).to.have.property('metavar', 'FOO');
          });
        });
        describe('integer', function () {
          beforeEach(function () {
            const schema = {
              properties: {
                foo: {
                  type: 'integer'
                }
              },
              type: 'object'
            };
            result = getArgs({
              schema,
              extName,
              extType
            });
          });
          it('should parse the value as an integer', function () {
            expect(result['--plugin-blob-foo'].type('10.5')).to.equal(10);
          });
          it('should contain a SCREAMING_SNAKE_CASE `metavar` prop', function () {
            expect(result['--plugin-blob-foo']).to.have.property('metavar', 'FOO');
          });
        });
        describe('string', function () {
          beforeEach(function () {
            const schema = {
              properties: {
                foo: {
                  type: 'string'
                }
              },
              type: 'object'
            };
            result = getArgs({
              schema,
              extName,
              extType
            });
          });
          it('should parse the value as an integer', function () {
            expect(result['--plugin-blob-foo'].type('10.5')).to.equal('10.5');
          });
          it('should contain a SCREAMING_SNAKE_CASE `metavar` prop', function () {
            expect(result['--plugin-blob-foo']).to.have.property('metavar', 'FOO');
          });
        });
        describe('null', function () {
          it('should throw', function () {
            const schema = {
              properties: {
                foo: {
                  type: 'null'
                }
              },
              type: 'object'
            };
            expect(() => getArgs({
              extType,
              extName,
              schema
            })).to.throw(TypeError, /unknown or disallowed/);
          });
        });
        describe('(unknown)', function () {
          it('should throw', function () {
            const schema = {
              properties: {
                foo: {
                  type: 'donkey'
                }
              },
              type: 'object'
            };
            expect(() => getArgs({
              extType,
              extName,
              schema
            })).to.throw(Error, /schema is invalid/);
          });
        });
      });
      describe('appiumCliAliases', function () {
        let result;
        it('should not allow short aliases for extensions', function () {
          const schema = {
            properties: {
              foo: {
                type: 'string',
                appiumCliAliases: ['fooooo', 'F']
              }
            },
            type: 'object'
          };
          result = getArgs({
            schema,
            extName,
            extType
          });
          expect(result).to.have.property('--plugin-blob-foo,--plugin-blob-fooooo,--plugin-blob-F');
        });
      });
      describe('appiumCliDescription', function () {
        let result;
        it('should be preferred over `description`', function () {
          const schema = {
            properties: {
              foo: {
                type: 'string',
                appiumCliDescription: 'foo',
                description: 'bar'
              }
            },
            type: 'object'
          };
          result = getArgs({
            schema,
            extName,
            extType
          });
          expect(result['--plugin-blob-foo']).to.have.property('help', 'foo');
        });
      });
      describe('appiumCliTransformer', function () {
        let result;
        it('should use the transformer', function () {
          const schema = {
            properties: {
              foo: {
                type: 'string',
                appiumCliTransformer: 'json'
              }
            },
            type: 'object'
          };
          result = getArgs({
            schema,
            extName,
            extType
          });
          expect(result['--plugin-blob-foo'].type('{"herp": "derp"}')).to.eql({
            herp: 'derp'
          });
        });
        it('should error if the value is not valid for the transformer', function () {
          const schema = {
            properties: {
              foo: {
                type: 'string',
                appiumCliTransformer: 'json'
              }
            },
            type: 'object'
          };
          result = getArgs({
            schema,
            extName,
            extType
          });
          expect(() => result['--plugin-blob-foo'].type('123')).to.throw(/must be a valid json/i);
        });
        describe('when used with `enum`', function () {
          describe('and enum members are invalid as per the transformer', function () {
            describe('when provided an enum member', function () {
              it('should throw', function () {
                const schema = {
                  properties: {
                    foo: {
                      type: 'string',
                      appiumCliTransformer: 'json',
                      enum: ['herp', 'derp']
                    }
                  },
                  type: 'object'
                };
                result = getArgs({
                  schema,
                  extName,
                  extType
                });
                expect(() => result['--plugin-blob-foo'].type('herp')).to.throw(/must be a valid json/i);
              });
            });
          });
          describe('and enum members are valid as per the transformer', function () {
            describe('when provided an enum member', function () {
              it('should return a transformed value', function () {
                const schema = {
                  properties: {
                    foo: {
                      type: 'string',
                      appiumCliTransformer: 'json',
                      enum: ['{"herp": "derp"}', '{"derp": "herp"}']
                    }
                  },
                  type: 'object'
                };
                result = getArgs({
                  schema,
                  extName,
                  extType
                });
                expect(result['--plugin-blob-foo'].type('{"herp": "derp"}')).to.eql({
                  herp: 'derp'
                });
              });
            });
            describe('when not provided an enum member', function () {
              it('should throw', function () {
                const schema = {
                  properties: {
                    foo: {
                      type: 'string',
                      appiumCliTransformer: 'json',
                      enum: ['{"herp": "derp"}', '{"derp": "herp"}']
                    }
                  },
                  type: 'object'
                };
                result = getArgs({
                  schema,
                  extName,
                  extType
                });
                expect(() => result['--plugin-blob-foo'].type('{"georgy": "porgy"}')).to.throw(/one of the allowed values/i);
              });
            });
          });
        });
      });
      describe('enum', function () {
        describe('when used with a non-`string` type', function () {
          it('should throw', function () {
            const schema = {
              properties: {
                foo: {
                  type: 'number',
                  enum: ['herp', 'derp']
                }
              },
              type: 'object'
            };
            expect(() => getArgs({
              schema,
              extName,
              extType
            })).to.throw(TypeError, /`enum` is only supported for `type: 'string'`/i);
          });
          it('should actually throw earlier by failing schema validation, but that would mean overriding the behavior of `enum` which sounds inadvisable');
        });
        describe('when used with a `string` type', function () {
          it('should set `choices` prop', function () {
            const schema = {
              properties: {
                foo: {
                  type: 'string',
                  enum: ['herp', 'derp']
                }
              },
              type: 'object'
            };
            const result = getArgs({
              schema,
              extName,
              extType
            });
            expect(result['--plugin-blob-foo']).to.have.deep.property('choices', ['herp', 'derp']);
          });
        });
      });
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Qvc2NoZW1hL2NsaS1hcmdzLXNwZWNzLmpzIl0sIm5hbWVzIjpbImV4cGVjdCIsImNoYWkiLCJkZXNjcmliZSIsImdldEFyZ3MiLCJvcHRzIiwiZXh0TmFtZSIsImV4dFR5cGUiLCJzY2hlbWEiLCJfIiwiZnJvbVBhaXJzIiwiYmVmb3JlRWFjaCIsInJlc2V0U2NoZW1hIiwiYWZ0ZXJFYWNoIiwicmVzdWx0IiwicHJvcGVydGllcyIsImZvbyIsInR5cGUiLCJpdCIsInRvIiwiaGF2ZSIsInByb3BlcnR5Iiwibm90IiwidHJhbnNmb3JtZXJzIiwianNvbiIsImNzdiIsImVxdWFsIiwidGhyb3ciLCJUeXBlRXJyb3IiLCJFcnJvciIsImFwcGl1bUNsaUFsaWFzZXMiLCJhcHBpdW1DbGlEZXNjcmlwdGlvbiIsImRlc2NyaXB0aW9uIiwiYXBwaXVtQ2xpVHJhbnNmb3JtZXIiLCJlcWwiLCJoZXJwIiwiZW51bSIsImRlZXAiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU07QUFBQ0EsRUFBQUE7QUFBRCxJQUFXQyxJQUFqQjtBQUVBQyxRQUFRLENBQUMsVUFBRCxFQUFhLFlBQVk7QUFDL0JBLEVBQUFBLFFBQVEsQ0FBQyxnQkFBRCxFQUFtQixZQUFZO0FBTXJDLGFBQVNDLE9BQVQsQ0FBa0JDLElBQUksR0FBRyxFQUF6QixFQUE2QjtBQUMzQixVQUFJO0FBQUNDLFFBQUFBLE9BQUQ7QUFBVUMsUUFBQUEsT0FBVjtBQUFtQkMsUUFBQUE7QUFBbkIsVUFBNkJILElBQWpDOztBQUNBLFVBQUlHLE1BQU0sSUFBSUYsT0FBVixJQUFxQkMsT0FBekIsRUFBa0M7QUFDaEMsb0NBQWVBLE9BQWYsRUFBd0JELE9BQXhCLEVBQWlDRSxNQUFqQztBQUNEOztBQUNEO0FBQ0EsYUFBT0MsZ0JBQUVDLFNBQUYsQ0FBWSxDQUFDLEdBQUcsNEJBQUosQ0FBWixDQUFQO0FBQ0Q7O0FBRURDLElBQUFBLFVBQVUsQ0FBQ0MsbUJBQUQs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RGhCLFFBQWpELENBQ0UsU0FERixFQUVFLENBQUMsTUFBRCxFQUFTLE1BQVQsQ0FGRjtBQUlELFdBZkMsQ0FBRjtBQWdCRCxTQWpCTyxDQUFSO0FBa0JELE9BekNPLENBQVI7QUEwQ0QsS0E1VE8sQ0FBUjtBQTZURCxHQWhWTyxDQUFSO0FBaVZELENBbFZPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAdHMtY2hlY2tcblxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7cmVzZXRTY2hlbWEsIGZpbmFsaXplU2NoZW1hLCByZWdpc3RlclNjaGVtYX0gZnJvbSAnLi4vLi4vbGliL3NjaGVtYSc7XG5pbXBvcnQge3RvUGFyc2VyQXJnc30gZnJvbSAnLi4vLi4vbGliL3NjaGVtYS9jbGktYXJncyc7XG5pbXBvcnQge3RyYW5zZm9ybWVyc30gZnJvbSAnLi4vLi4vbGliL3NjaGVtYS9jbGktdHJhbnNmb3JtZXJzJztcblxuY29uc3Qge2V4cGVjdH0gPSBjaGFpO1xuXG5kZXNjcmliZSgnY2xpLWFyZ3MnLCBmdW5jdGlvbiAoKSB7XG4gIGRlc2NyaWJlKCd0b1BhcnNlckFyZ3MoKScsIGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gb3B0c1xuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QXJncyAob3B0cyA9IHt9KSB7XG4gICAgICBsZXQge2V4dE5hbWUsIGV4dFR5cGUsIHNjaGVtYX0gPSBvcHRzO1xuICAgICAgaWYgKHNjaGVtYSAmJiBleHROYW1lICYmIGV4dFR5cGUpIHtcbiAgICAgICAgcmVnaXN0ZXJTY2hlbWEoZXh0VHlwZSwgZXh0TmFtZSwgc2NoZW1hKTtcbiAgICAgIH1cbiAgICAgIGZpbmFsaXplU2NoZW1hKCk7XG4gICAgICByZXR1cm4gXy5mcm9tUGFpcnMoWy4uLnRvUGFyc2VyQXJncygpXSk7XG4gICAgfVxuXG4gICAgYmVmb3JlRWFjaChyZXNldFNjaGVtYSk7XG5cbiAgICBhZnRlckVhY2gocmVzZXRTY2hlbWEpO1xuXG4gICAgZGVzY3JpYmUoJ3NjaGVtYSBjb250ZW50cycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGV4dE5hbWUgPSAnYmxvYic7XG4gICAgICBjb25zdCBleHRUeXBlID0gJ3BsdWdpbic7XG5cbiAgICAgIGRlc2NyaWJlKCd0eXBlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgcmVzdWx0O1xuXG4gICAgICAgIGRlc2NyaWJlKCdib29sZWFuJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGJlZm9yZUVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc3Qgc2NoZW1hID0ge3Byb3BlcnRpZXM6IHtmb286IHt0eXBlOiAnYm9vbGVhbid9fSwgdHlwZTogJ29iamVjdCd9O1xuICAgICAgICAgICAgcmVzdWx0ID0gZ2V0QXJncyh7c2NoZW1hLCBleHROYW1lLCBleHRUeXBlfSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBvcHRpb25zIGNvbnRhaW5pbmcgYGFjdGlvbmAgcHJvcCBvZiBgc3RvcmVfY29uc3RgIGFuZCBubyBgdHlwZWAnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBleHBlY3QocmVzdWx0WyctLXBsdWdpbi1ibG9iLWZvbyddKS50by5oYXZlLnByb3BlcnR5KFxuICAgICAgICAgICAgICAnYWN0aW9uJyxcbiAgICAgICAgICAgICAgJ3N0b3JlX2NvbnN0JyxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIG5vdCBjb250YWluIGEgYG1ldGF2YXJgIHByb3BlcnR5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdFsnLS1wbHVnaW4tYmxvYi1mb28nXSkubm90LnRvLmhhdmUucHJvcGVydHkoJ21ldGF2YXInKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVzY3JpYmUoJ29iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHNjaGVtYSA9IHtwcm9wZXJ0aWVzOiB7Zm9vOiB7dHlwZTogJ29iamVjdCd9fSwgdHlwZTogJ29iamVjdCd9O1xuICAgICAgICAgICAgcmVzdWx0ID0gZ2V0QXJncyh7c2NoZW1hLCBleHROYW1lLCBleHRUeXBlfSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIHVzZSB0aGUgYGpzb25gIHRyYW5zZm9ybWVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdFsnLS1wbHVnaW4tYmxvYi1mb28nXSkudG8uaGF2ZS5wcm9wZXJ0eShcbiAgICAgICAgICAgICAgJ3R5cGUnLFxuICAgICAgICAgICAgICB0cmFuc2Zvcm1lcnMuanNvbixcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGNvbnRhaW4gYSBTQ1JFQU1JTkdfU05BS0VfQ0FTRSBgbWV0YXZhcmAgcHJvcCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHRbJy0tcGx1Z2luLWJsb2ItZm9vJ10pLnRvLmhhdmUucHJvcGVydHkoXG4gICAgICAgICAgICAgICdtZXRhdmFyJyxcbiAgICAgICAgICAgICAgJ0ZPTycsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBkZXNjcmliZSgnYXJyYXknLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgYmVmb3JlRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zdCBzY2hlbWEgPSB7cHJvcGVydGllczoge2Zvbzoge3R5cGU6ICdhcnJheSd9fSwgdHlwZTogJ29iamVjdCd9O1xuICAgICAgICAgICAgcmVzdWx0ID0gZ2V0QXJncyh7c2NoZW1hLCBleHROYW1lLCBleHRUeXBlfSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIHVzZSB0aGUgYGNzdmAgdHJhbnNmb3JtZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBleHBlY3QocmVzdWx0WyctLXBsdWdpbi1ibG9iLWZvbyddKS50by5oYXZlLnByb3BlcnR5KFxuICAgICAgICAgICAgICAndHlwZScsXG4gICAgICAgICAgICAgIHRyYW5zZm9ybWVycy5jc3YsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBjb250YWluIGEgU0NSRUFNSU5HX1NOQUtFX0NBU0UgYG1ldGF2YXJgIHByb3AnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBleHBlY3QocmVzdWx0WyctLXBsdWdpbi1ibG9iLWZvbyddKS50by5oYXZlLnByb3BlcnR5KFxuICAgICAgICAgICAgICAnbWV0YXZhcicsXG4gICAgICAgICAgICAgICdGT08nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVzY3JpYmUoJ251bWJlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHNjaGVtYSA9IHtwcm9wZXJ0aWVzOiB7Zm9vOiB7dHlwZTogJ251bWJlcid9fSwgdHlwZTogJ29iamVjdCd9O1xuICAgICAgICAgICAgcmVzdWx0ID0gZ2V0QXJncyh7c2NoZW1hLCBleHROYW1lLCBleHRUeXBlfSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIHBhcnNlIHRoZSB2YWx1ZSBhcyBhIGZsb2F0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdFsnLS1wbHVnaW4tYmxvYi1mb28nXS50eXBlKCcxMC41JykpLnRvLmVxdWFsKDEwLjUpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBjb250YWluIGEgU0NSRUFNSU5HX1NOQUtFX0NBU0UgYG1ldGF2YXJgIHByb3AnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBleHBlY3QocmVzdWx0WyctLXBsdWdpbi1ibG9iLWZvbyddKS50by5oYXZlLnByb3BlcnR5KFxuICAgICAgICAgICAgICAnbWV0YXZhcicsXG4gICAgICAgICAgICAgICdGT08nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVzY3JpYmUoJ2ludGVnZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgYmVmb3JlRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zdCBzY2hlbWEgPSB7cHJvcGVydGllczoge2Zvbzoge3R5cGU6ICdpbnRlZ2VyJ319LCB0eXBlOiAnb2JqZWN0J307XG4gICAgICAgICAgICByZXN1bHQgPSBnZXRBcmdzKHtzY2hlbWEsIGV4dE5hbWUsIGV4dFR5cGV9KTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgcGFyc2UgdGhlIHZhbHVlIGFzIGFuIGludGVnZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBleHBlY3QocmVzdWx0WyctLXBsdWdpbi1ibG9iLWZvbyddLnR5cGUoJzEwLjUnKSkudG8uZXF1YWwoMTApO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBjb250YWluIGEgU0NSRUFNSU5HX1NOQUtFX0NBU0UgYG1ldGF2YXJgIHByb3AnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBleHBlY3QocmVzdWx0WyctLXBsdWdpbi1ibG9iLWZvbyddKS50by5oYXZlLnByb3BlcnR5KFxuICAgICAgICAgICAgICAnbWV0YXZhcicsXG4gICAgICAgICAgICAgICdGT08nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVzY3JpYmUoJ3N0cmluZycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHNjaGVtYSA9IHtcbiAgICAgICAgICAgICAgcHJvcGVydGllczoge2Zvbzoge3R5cGU6ICdzdHJpbmcnfX0sXG4gICAgICAgICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGdldEFyZ3Moe3NjaGVtYSwgZXh0TmFtZSwgZXh0VHlwZX0pO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBwYXJzZSB0aGUgdmFsdWUgYXMgYW4gaW50ZWdlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGV4cGVjdChyZXN1bHRbJy0tcGx1Z2luLWJsb2ItZm9vJ10udHlwZSgnMTAuNScpKS50by5lcXVhbCgnMTAuNScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBjb250YWluIGEgU0NSRUFNSU5HX1NOQUtFX0NBU0UgYG1ldGF2YXJgIHByb3AnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBleHBlY3QocmVzdWx0WyctLXBsdWdpbi1ibG9iLWZvbyddKS50by5oYXZlLnByb3BlcnR5KFxuICAgICAgICAgICAgICAnbWV0YXZhcicsXG4gICAgICAgICAgICAgICdGT08nLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVzY3JpYmUoJ251bGwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaXQoJ3Nob3VsZCB0aHJvdycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHNjaGVtYSA9IHtwcm9wZXJ0aWVzOiB7Zm9vOiB7dHlwZTogJ251bGwnfX0sIHR5cGU6ICdvYmplY3QnfTtcbiAgICAgICAgICAgIGV4cGVjdCgoKSA9PiBnZXRBcmdzKHtleHRUeXBlLCBleHROYW1lLCBzY2hlbWF9KSkudG8udGhyb3coXG4gICAgICAgICAgICAgIFR5cGVFcnJvcixcbiAgICAgICAgICAgICAgL3Vua25vd24gb3IgZGlzYWxsb3dlZC8sXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBkZXNjcmliZSgnKHVua25vd24pJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGl0KCdzaG91bGQgdGhyb3cnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zdCBzY2hlbWEgPSB7XG4gICAgICAgICAgICAgIHByb3BlcnRpZXM6IHtmb286IHt0eXBlOiAnZG9ua2V5J319LFxuICAgICAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBleHBlY3QoKCkgPT4gZ2V0QXJncyh7ZXh0VHlwZSwgZXh0TmFtZSwgc2NoZW1hfSkpLnRvLnRocm93KFxuICAgICAgICAgICAgICBFcnJvcixcbiAgICAgICAgICAgICAgL3NjaGVtYSBpcyBpbnZhbGlkLyxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGRlc2NyaWJlKCdhcHBpdW1DbGlBbGlhc2VzJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBsZXQgcmVzdWx0O1xuXG4gICAgICAgIGl0KCdzaG91bGQgbm90IGFsbG93IHNob3J0IGFsaWFzZXMgZm9yIGV4dGVuc2lvbnMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uc3Qgc2NoZW1hID0ge1xuICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICBmb286IHt0eXBlOiAnc3RyaW5nJywgYXBwaXVtQ2xpQWxpYXNlczogWydmb29vb28nLCAnRiddfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJlc3VsdCA9IGdldEFyZ3Moe3NjaGVtYSwgZXh0TmFtZSwgZXh0VHlwZX0pO1xuICAgICAgICAgIGV4cGVjdChyZXN1bHQpLnRvLmhhdmUucHJvcGVydHkoXG4gICAgICAgICAgICAnLS1wbHVnaW4tYmxvYi1mb28sLS1wbHVnaW4tYmxvYi1mb29vb28sLS1wbHVnaW4tYmxvYi1GJyxcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBkZXNjcmliZSgnYXBwaXVtQ2xpRGVzY3JpcHRpb24nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCByZXN1bHQ7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBwcmVmZXJyZWQgb3ZlciBgZGVzY3JpcHRpb25gJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNvbnN0IHNjaGVtYSA9IHtcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgZm9vOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgYXBwaXVtQ2xpRGVzY3JpcHRpb246ICdmb28nLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnYmFyJyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJlc3VsdCA9IGdldEFyZ3Moe3NjaGVtYSwgZXh0TmFtZSwgZXh0VHlwZX0pO1xuICAgICAgICAgIGV4cGVjdChyZXN1bHRbJy0tcGx1Z2luLWJsb2ItZm9vJ10pLnRvLmhhdmUucHJvcGVydHkoJ2hlbHAnLCAnZm9vJyk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGRlc2NyaWJlKCdhcHBpdW1DbGlUcmFuc2Zvcm1lcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IHJlc3VsdDtcblxuICAgICAgICBpdCgnc2hvdWxkIHVzZSB0aGUgdHJhbnNmb3JtZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uc3Qgc2NoZW1hID0ge1xuICAgICAgICAgICAgcHJvcGVydGllczoge2Zvbzoge3R5cGU6ICdzdHJpbmcnLCBhcHBpdW1DbGlUcmFuc2Zvcm1lcjogJ2pzb24nfX0sXG4gICAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJlc3VsdCA9IGdldEFyZ3Moe3NjaGVtYSwgZXh0TmFtZSwgZXh0VHlwZX0pO1xuICAgICAgICAgIGV4cGVjdChyZXN1bHRbJy0tcGx1Z2luLWJsb2ItZm9vJ10udHlwZSgne1wiaGVycFwiOiBcImRlcnBcIn0nKSkudG8uZXFsKHtcbiAgICAgICAgICAgIGhlcnA6ICdkZXJwJyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBlcnJvciBpZiB0aGUgdmFsdWUgaXMgbm90IHZhbGlkIGZvciB0aGUgdHJhbnNmb3JtZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uc3Qgc2NoZW1hID0ge1xuICAgICAgICAgICAgcHJvcGVydGllczoge2Zvbzoge3R5cGU6ICdzdHJpbmcnLCBhcHBpdW1DbGlUcmFuc2Zvcm1lcjogJ2pzb24nfX0sXG4gICAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJlc3VsdCA9IGdldEFyZ3Moe3NjaGVtYSwgZXh0TmFtZSwgZXh0VHlwZX0pO1xuICAgICAgICAgIGV4cGVjdCgoKSA9PiByZXN1bHRbJy0tcGx1Z2luLWJsb2ItZm9vJ10udHlwZSgnMTIzJykpLnRvLnRocm93KFxuICAgICAgICAgICAgL211c3QgYmUgYSB2YWxpZCBqc29uL2ksXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gdGhpcyBpcyB1bmxpa2VseSB0byBoYXBwZW4sIGJ1dCBJIHdhbnQgdG8gZXN0YWJsaXNoIHRoZSBiZWhhdmlvciBhcyBkZWZpbmVkLlxuICAgICAgICBkZXNjcmliZSgnd2hlbiB1c2VkIHdpdGggYGVudW1gJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRlc2NyaWJlKCdhbmQgZW51bSBtZW1iZXJzIGFyZSBpbnZhbGlkIGFzIHBlciB0aGUgdHJhbnNmb3JtZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkZXNjcmliZSgnd2hlbiBwcm92aWRlZCBhbiBlbnVtIG1lbWJlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaXQoJ3Nob3VsZCB0aHJvdycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzY2hlbWEgPSB7XG4gICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbzoge1xuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgICAgICAgIGFwcGl1bUNsaVRyYW5zZm9ybWVyOiAnanNvbicsXG4gICAgICAgICAgICAgICAgICAgICAgZW51bTogWydoZXJwJywgJ2RlcnAnXSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGdldEFyZ3Moe3NjaGVtYSwgZXh0TmFtZSwgZXh0VHlwZX0pO1xuICAgICAgICAgICAgICAgIGV4cGVjdCgoKSA9PiByZXN1bHRbJy0tcGx1Z2luLWJsb2ItZm9vJ10udHlwZSgnaGVycCcpKS50by50aHJvdyhcbiAgICAgICAgICAgICAgICAgIC9tdXN0IGJlIGEgdmFsaWQganNvbi9pLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBkZXNjcmliZSgnYW5kIGVudW0gbWVtYmVycyBhcmUgdmFsaWQgYXMgcGVyIHRoZSB0cmFuc2Zvcm1lcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGRlc2NyaWJlKCd3aGVuIHByb3ZpZGVkIGFuIGVudW0gbWVtYmVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpdCgnc2hvdWxkIHJldHVybiBhIHRyYW5zZm9ybWVkIHZhbHVlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjaGVtYSA9IHtcbiAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9vOiB7XG4gICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgICAgICAgYXBwaXVtQ2xpVHJhbnNmb3JtZXI6ICdqc29uJyxcbiAgICAgICAgICAgICAgICAgICAgICBlbnVtOiBbJ3tcImhlcnBcIjogXCJkZXJwXCJ9JywgJ3tcImRlcnBcIjogXCJoZXJwXCJ9J10sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBnZXRBcmdzKHtzY2hlbWEsIGV4dE5hbWUsIGV4dFR5cGV9KTtcbiAgICAgICAgICAgICAgICBleHBlY3QoXG4gICAgICAgICAgICAgICAgICByZXN1bHRbJy0tcGx1Z2luLWJsb2ItZm9vJ10udHlwZSgne1wiaGVycFwiOiBcImRlcnBcIn0nKSxcbiAgICAgICAgICAgICAgICApLnRvLmVxbCh7aGVycDogJ2RlcnAnfSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGRlc2NyaWJlKCd3aGVuIG5vdCBwcm92aWRlZCBhbiBlbnVtIG1lbWJlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaXQoJ3Nob3VsZCB0aHJvdycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzY2hlbWEgPSB7XG4gICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbzoge1xuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgICAgICAgIGFwcGl1bUNsaVRyYW5zZm9ybWVyOiAnanNvbicsXG4gICAgICAgICAgICAgICAgICAgICAgZW51bTogWyd7XCJoZXJwXCI6IFwiZGVycFwifScsICd7XCJkZXJwXCI6IFwiaGVycFwifSddLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gZ2V0QXJncyh7c2NoZW1hLCBleHROYW1lLCBleHRUeXBlfSk7XG4gICAgICAgICAgICAgICAgZXhwZWN0KCgpID0+XG4gICAgICAgICAgICAgICAgICByZXN1bHRbJy0tcGx1Z2luLWJsb2ItZm9vJ10udHlwZSgne1wiZ2Vvcmd5XCI6IFwicG9yZ3lcIn0nKSxcbiAgICAgICAgICAgICAgICApLnRvLnRocm93KC9vbmUgb2YgdGhlIGFsbG93ZWQgdmFsdWVzL2kpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBkZXNjcmliZSgnZW51bScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVzY3JpYmUoJ3doZW4gdXNlZCB3aXRoIGEgbm9uLWBzdHJpbmdgIHR5cGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaXQoJ3Nob3VsZCB0aHJvdycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHNjaGVtYSA9IHtcbiAgICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgIGZvbzoge1xuICAgICAgICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICAgICAgICBlbnVtOiBbJ2hlcnAnLCAnZGVycCddLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGV4cGVjdCgoKSA9PiBnZXRBcmdzKHtzY2hlbWEsIGV4dE5hbWUsIGV4dFR5cGV9KSkudG8udGhyb3coXG4gICAgICAgICAgICAgIFR5cGVFcnJvcixcbiAgICAgICAgICAgICAgL2BlbnVtYCBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgYHR5cGU6ICdzdHJpbmcnYC9pLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KFxuICAgICAgICAgICAgJ3Nob3VsZCBhY3R1YWxseSB0aHJvdyBlYXJsaWVyIGJ5IGZhaWxpbmcgc2NoZW1hIHZhbGlkYXRpb24sIGJ1dCB0aGF0IHdvdWxkIG1lYW4gb3ZlcnJpZGluZyB0aGUgYmVoYXZpb3Igb2YgYGVudW1gIHdoaWNoIHNvdW5kcyBpbmFkdmlzYWJsZScsXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVzY3JpYmUoJ3doZW4gdXNlZCB3aXRoIGEgYHN0cmluZ2AgdHlwZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpdCgnc2hvdWxkIHNldCBgY2hvaWNlc2AgcHJvcCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnN0IHNjaGVtYSA9IHtcbiAgICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgIGZvbzoge1xuICAgICAgICAgICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgICAgICAgICBlbnVtOiBbJ2hlcnAnLCAnZGVycCddLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGdldEFyZ3Moe3NjaGVtYSwgZXh0TmFtZSwgZXh0VHlwZX0pO1xuICAgICAgICAgICAgZXhwZWN0KHJlc3VsdFsnLS1wbHVnaW4tYmxvYi1mb28nXSkudG8uaGF2ZS5kZWVwLnByb3BlcnR5KFxuICAgICAgICAgICAgICAnY2hvaWNlcycsXG4gICAgICAgICAgICAgIFsnaGVycCcsICdkZXJwJ10sXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sImZpbGUiOiJ0ZXN0L3NjaGVtYS9jbGktYXJncy1zcGVjcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
