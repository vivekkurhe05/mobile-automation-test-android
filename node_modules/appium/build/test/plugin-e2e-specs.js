"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _webdriverio = require("webdriverio");

var _axios = _interopRequireDefault(require("axios"));

var _main = require("../lib/main");

var _extensionConfig = require("../lib/extension-config");

var _helpers = require("./helpers");

var _extension = require("../lib/cli/extension");

const FAKE_ARGS = {
  sillyWebServerPort: 1234,
  host: 'hey'
};
const FAKE_PLUGIN_ARGS = {
  fake: FAKE_ARGS
};
const wdOpts = {
  hostname: _helpers.TEST_HOST,
  port: null,
  connectionRetryCount: 0,
  capabilities: _helpers.W3C_PREFIXED_CAPS
};
describe('FakePlugin', function () {
  const fakePluginDir = _path.default.join(_helpers.PROJECT_ROOT, 'node_modules', '@appium', 'fake-plugin');

  const fakeDriverDir = _path.default.join(_helpers.PROJECT_ROOT, 'packages', 'fake-driver');

  const appiumHome = _extensionConfig.DEFAULT_APPIUM_HOME;
  let baseArgs;
  let testServer;
  let testPort;
  let baseUrl;
  before(async function () {
    wdOpts.port = testPort = await (0, _helpers.getTestPort)();
    testServer = `http://${_helpers.TEST_HOST}:${testPort}`;
    baseUrl = `${testServer}/session`;
    const driverList = await (0, _extension.runExtensionCommand)({
      appiumHome,
      driverCommand: 'list',
      showInstalled: true
    }, _extensionConfig.DRIVER_TYPE);

    if (!_lodash.default.has(driverList, 'fake')) {
      await (0, _extension.runExtensionCommand)({
        appiumHome,
        driverCommand: 'install',
        driver: fakeDriverDir,
        installType: _extensionConfig.INSTALL_TYPE_LOCAL
      }, _extensionConfig.DRIVER_TYPE);
    }

    const pluginList = await (0, _extension.runExtensionCommand)({
      appiumHome,
      pluginCommand: 'list',
      showInstalled: true
    }, _extensionConfig.PLUGIN_TYPE);

    if (!_lodash.default.has(pluginList, 'fake')) {
      await (0, _extension.runExtensionCommand)({
        appiumHome,
        pluginCommand: 'install',
        plugin: fakePluginDir,
        installType: _extensionConfig.INSTALL_TYPE_LOCAL
      }, _extensionConfig.PLUGIN_TYPE);
    }

    baseArgs = {
      port: testPort,
      host: _helpers.TEST_HOST,
      appiumHome,
      usePlugins: ['fake'],
      useDrivers: ['fake']
    };
  });
  describe('without plugin registered', function () {
    let server = null;
    before(async function () {
      const args = {
        port: testPort,
        host: _helpers.TEST_HOST,
        appiumHome,
        usePlugins: ['other1', 'other2']
      };
      server = await (0, _main.main)(args);
    });
    after(async function () {
      if (server) {
        await server.close();
      }
    });
    it('should not update the server if plugin is not activated', async function () {
      await _axios.default.post(`http://${_helpers.TEST_HOST}:${testPort}/fake`).should.eventually.be.rejectedWith(/404/);
    });
    it('should not update method map if plugin is not activated', async function () {
      const driver = await (0, _webdriverio.remote)(wdOpts);
      const {
        sessionId
      } = driver;

      try {
        await _axios.default.post(`${baseUrl}/${sessionId}/fake_data`, {
          data: {
            fake: 'data'
          }
        }).should.eventually.be.rejectedWith(/404/);
      } finally {
        await driver.deleteSession();
      }
    });
    it('should not handle commands if plugin is not activated', async function () {
      const driver = await (0, _webdriverio.remote)(wdOpts);
      const {
        sessionId
      } = driver;

      try {
        const el = (await _axios.default.post(`${baseUrl}/${sessionId}/element`, {
          using: 'xpath',
          value: '//MockWebView'
        })).data.value;
        el.should.not.have.property('fake');
      } finally {
        await driver.deleteSession();
      }
    });
  });

  for (const registrationType of ['explicit', 'all']) {
    describe(`with plugin registered via type ${registrationType}`, function () {
      let server = null;
      before(async function () {
        const usePlugins = registrationType === 'explicit' ? ['fake', 'p2', 'p3'] : ['all'];
        const args = {
          port: testPort,
          host: _helpers.TEST_HOST,
          appiumHome,
          usePlugins,
          useDrivers: ['fake']
        };
        server = await (0, _main.main)(args);
      });
      after(async function () {
        if (server) {
          await server.close();
        }
      });
      it('should update the server', async function () {
        const res = {
          fake: 'fakeResponse'
        };
        (await _axios.default.post(`http://${_helpers.TEST_HOST}:${testPort}/fake`)).data.should.eql(res);
      });
      it('should modify the method map with new commands', async function () {
        const driver = await (0, _webdriverio.remote)(wdOpts);
        const {
          sessionId
        } = driver;

        try {
          await _axios.default.post(`${baseUrl}/${sessionId}/fake_data`, {
            data: {
              fake: 'data'
            }
          });
          (await _axios.default.get(`${baseUrl}/${sessionId}/fake_data`)).data.value.should.eql({
            fake: 'data'
          });
        } finally {
          await driver.deleteSession();
        }
      });
      it('should handle commands and not call the original', async function () {
        const driver = await (0, _webdriverio.remote)(wdOpts);
        const {
          sessionId
        } = driver;

        try {
          await driver.getPageSource().should.eventually.eql(`<Fake>${JSON.stringify([sessionId])}</Fake>`);
        } finally {
          await driver.deleteSession();
        }
      });
      it('should handle commands and call the original if designed', async function () {
        const driver = await (0, _webdriverio.remote)(wdOpts);
        const {
          sessionId
        } = driver;

        try {
          const el = (await _axios.default.post(`${baseUrl}/${sessionId}/element`, {
            using: 'xpath',
            value: '//MockWebView'
          })).data.value;
          el.should.have.property('fake');
        } finally {
          await driver.deleteSession();
        }
      });
      it('should allow original command to be proxied if supported', async function () {
        const driver = await (0, _webdriverio.remote)(wdOpts);
        const {
          sessionId
        } = driver;

        try {
          await _axios.default.post(`${baseUrl}/${sessionId}/context`, {
            name: 'PROXY'
          });
          const handle = (await _axios.default.get(`${baseUrl}/${sessionId}/window/handle`)).data.value;
          handle.should.eql('<<proxied via proxyCommand>>');
        } finally {
          await _axios.default.post(`${baseUrl}/${sessionId}/context`, {
            name: 'NATIVE_APP'
          });
          await driver.deleteSession();
        }
      });
      it('should handle unexpected driver shutdown', async function () {
        const newOpts = { ...wdOpts
        };
        newOpts.capabilities['appium:newCommandTimeout'] = 1;
        const driver = await (0, _webdriverio.remote)(wdOpts);
        let shutdownErr;

        try {
          let res = await _axios.default.get(`http://${_helpers.TEST_HOST}:${testPort}/unexpected`);
          should.not.exist(res.data);
          await _bluebird.default.delay(1500);
          res = await _axios.default.get(`http://${_helpers.TEST_HOST}:${testPort}/unexpected`);
          res.data.should.match(/Session ended/);
          res.data.should.match(/timeout/);
          await driver.deleteSession();
        } catch (e) {
          shutdownErr = e;
        }

        shutdownErr.message.should.match(/either terminated or not started/);
      });
    });
  }

  describe('cli args handling for plugin args', function () {
    let server = null;
    before(async function () {
      const args = { ...baseArgs,
        plugin: FAKE_PLUGIN_ARGS
      };
      server = await (0, _main.main)(args);
    });
    after(async function () {
      if (server) {
        await server.close();
      }
    });
    it('should receive user cli args for plugin if passed in', async function () {
      const driver = await (0, _webdriverio.remote)(wdOpts);
      const {
        sessionId
      } = driver;

      try {
        const {
          data
        } = await _axios.default.get(`${baseUrl}/${sessionId}/fakepluginargs`);
        data.value.should.eql(FAKE_ARGS);
      } finally {
        await driver.deleteSession();
      }
    });
  });
  describe('cli args handling for empty plugin args', function () {
    let server = null;
    before(async function () {
      server = await (0, _main.main)(baseArgs);
    });
    after(async function () {
      if (server) {
        await server.close();
      }
    });
    it('should not receive user cli args for plugin if none were passed in', async function () {
      const driver = await (0, _webdriverio.remote)(wdOpts);
      const {
        sessionId
      } = driver;

      try {
        const {
          data
        } = await _axios.default.get(`${baseUrl}/${sessionId}/fakepluginargs`);
        should.not.exist(data.value);
      } finally {
        await driver.deleteSession();
      }
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
