"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _fs = _interopRequireDefault(require("fs"));

var _sinon = _interopRequireDefault(require("sinon"));

var _yaml = _interopRequireDefault(require("yaml"));

var schema = _interopRequireWildcard(require("../lib/schema/schema"));

var _helpers = require("./helpers");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const expect = chai.expect;
describe('config-file', function () {
  const GOOD_YAML_CONFIG_FILEPATH = (0, _helpers.resolveFixture)('config', 'appium.config.good.yaml');
  const GOOD_JSON_CONFIG_FILEPATH = (0, _helpers.resolveFixture)('config', 'appium.config.good.json');
  const GOOD_JS_CONFIG_FILEPATH = (0, _helpers.resolveFixture)('config', 'appium.config.good.js');

  const GOOD_YAML_CONFIG = _yaml.default.parse(_fs.default.readFileSync(GOOD_YAML_CONFIG_FILEPATH, 'utf8'));

  const GOOD_JSON_CONFIG = require(GOOD_JSON_CONFIG_FILEPATH);

  const BAD_JSON_CONFIG_FILEPATH = (0, _helpers.resolveFixture)('config', 'appium.config.bad.json');

  const BAD_JSON_CONFIG = require(BAD_JSON_CONFIG_FILEPATH);

  let sandbox;
  let readConfigFile;
  let lc;
  let configFileModule;
  let mocks;
  before(function () {
    schema.finalizeSchema();
  });
  beforeEach(function () {
    sandbox = _sinon.default.createSandbox();
    const load = sandbox.stub().resolves({
      config: GOOD_JSON_CONFIG,
      filepath: GOOD_JSON_CONFIG_FILEPATH
    });
    load.withArgs(GOOD_YAML_CONFIG_FILEPATH).resolves({
      config: GOOD_YAML_CONFIG,
      filepath: GOOD_YAML_CONFIG_FILEPATH
    });
    load.withArgs(BAD_JSON_CONFIG_FILEPATH).resolves({
      config: BAD_JSON_CONFIG,
      filepath: BAD_JSON_CONFIG_FILEPATH
    });
    const search = sandbox.stub().resolves({
      config: GOOD_JSON_CONFIG,
      filepath: GOOD_JSON_CONFIG_FILEPATH
    });
    lc = {
      load,
      search
    };
    mocks = {
      lilconfig: {
        lilconfig: sandbox.stub().returns(lc)
      },
      '@sidvind/better-ajv-errors': sandbox.stub().returns('')
    };
    configFileModule = _helpers.rewiremock.proxy(() => require('../lib/config-file'), mocks);
    readConfigFile = configFileModule.readConfigFile;
    sandbox.spy(schema, 'validate');
  });
  afterEach(function () {
    sandbox.restore();
  });
  describe('readConfigFile()', function () {
    let result;
    it('should support yaml', async function () {
      const {
        config
      } = await readConfigFile(GOOD_YAML_CONFIG_FILEPATH);
      expect(config).to.eql(GOOD_JSON_CONFIG);
      expect(schema.validate).to.have.been.calledOnce;
    });
    it('should support json', async function () {
      const {
        config
      } = await readConfigFile(GOOD_JSON_CONFIG_FILEPATH);
      expect(config).to.eql(GOOD_JSON_CONFIG);
      expect(schema.validate).to.have.been.calledOnce;
    });
    it('should support js', async function () {
      const {
        config
      } = await readConfigFile(GOOD_JS_CONFIG_FILEPATH);
      expect(config).to.eql(GOOD_JSON_CONFIG);
      expect(schema.validate).to.have.been.calledOnce;
    });
    describe('when no filepath provided', function () {
      beforeEach(async function () {
        result = await readConfigFile();
      });
      it('should search for a config file', function () {
        expect(lc.search).to.have.been.calledOnce;
        expect(schema.validate).to.have.been.calledOnce;
      });
      it('should not try to load a config file directly', function () {
        expect(lc.load).to.not.have.been.called;
      });
      describe('when no config file is found', function () {
        beforeEach(async function () {
          lc.search.resolves();
          schema.validate.resetHistory();
          result = await readConfigFile();
        });
        it('should resolve with an empty object', function () {
          expect(result).to.be.an('object').that.is.empty;
          expect(schema.validate).not.to.have.been.called;
        });
      });
      describe('when a config file is found', function () {
        describe('when the config file is empty', function () {
          beforeEach(async function () {
            lc.search.resolves({
              isEmpty: true,
              filepath: '/path/to/file.json',
              config: {}
            });
            result = await readConfigFile();
          });
          it('should resolve with an object with an `isEmpty` property', function () {
            expect(result).to.have.property('isEmpty', true);
          });
        });
        describe('when the config file is not empty', function () {
          it('should validate the config against a schema', function () {
            expect(schema.validate).to.have.been.calledOnceWith(GOOD_JSON_CONFIG);
          });
          describe('when the config file is valid', function () {
            beforeEach(async function () {
              result = await readConfigFile();
            });
            it('should resolve with an object having `config` property and empty array of errors', function () {
              expect(result).to.deep.equal({
                config: GOOD_JSON_CONFIG,
                errors: [],
                filepath: GOOD_JSON_CONFIG_FILEPATH
              });
            });
          });
          describe('when the config file is invalid', function () {
            beforeEach(function () {
              lc.search.resolves({
                config: {
                  foo: 'bar'
                },
                filepath: '/path/to/file.json'
              });
            });
            beforeEach(async function () {
              result = await readConfigFile();
            });
            it('should resolve with an object having a nonempty array of errors', function () {
              expect(result).to.have.property('errors').that.is.not.empty;
            });
          });
        });
      });
    });
    describe('when filepath provided', function () {
      beforeEach(async function () {
        result = await readConfigFile('appium.json');
      });
      it('should not attempt to find a config file', function () {
        expect(lc.search).to.not.have.been.called;
      });
      it('should try to load a config file directly', function () {
        expect(lc.load).to.have.been.calledOnce;
      });
      describe('when no config file exists at path', function () {
        beforeEach(function () {
          lc.load.rejects(Object.assign(new Error(), {
            code: 'ENOENT'
          }));
        });
        it('should reject with user-friendly message', async function () {
          await expect(readConfigFile('appium.json')).to.be.rejectedWith(/not found at user-provided path/);
        });
      });
      describe('when the config file is invalid JSON', function () {
        beforeEach(function () {
          lc.load.rejects(new SyntaxError());
        });
        it('should reject with user-friendly message', async function () {
          await expect(readConfigFile('appium.json')).to.be.rejectedWith(/Config file at user-provided path appium.json is invalid/);
        });
      });
      describe('when something else is wrong with loading the config file', function () {
        beforeEach(function () {
          lc.load.rejects(new Error('guru meditation'));
        });
        it('should pass error through', async function () {
          await expect(readConfigFile('appium.json')).to.be.rejectedWith(/guru meditation/);
        });
      });
      describe('when a config file is found', function () {
        describe('when the config file is empty', function () {
          beforeEach(async function () {
            lc.search.resolves({
              isEmpty: true,
              filepath: '/path/to/file.json',
              config: {}
            });
            result = await readConfigFile();
          });
          it('should resolve with an object with an `isEmpty` property', function () {
            expect(result).to.have.property('isEmpty', true);
          });
        });
        describe('when the config file is not empty', function () {
          it('should validate the config against a schema', function () {
            expect(schema.validate).to.have.been.calledOnceWith(GOOD_JSON_CONFIG);
          });
          describe('when the config file is valid', function () {
            beforeEach(async function () {
              result = await readConfigFile();
            });
            it('should resolve with an object having `config` property and empty array of errors', function () {
              expect(result).to.deep.equal({
                errors: [],
                config: GOOD_JSON_CONFIG,
                filepath: GOOD_JSON_CONFIG_FILEPATH
              });
            });
          });
          describe('when the config file is invalid', function () {
            beforeEach(async function () {
              result = await readConfigFile(BAD_JSON_CONFIG_FILEPATH);
            });
            it('should resolve with an object having a nonempty array of errors', function () {
              expect(result).to.have.property('errors').that.is.not.empty;
            });
          });
        });
      });
    });
  });
  describe('formatErrors()', function () {
    describe('when provided `errors` as an empty array', function () {
      it('should throw', function () {
        expect(() => configFileModule.formatErrors([])).to.throw(TypeError, 'Array of errors must be non-empty');
      });
    });
    describe('when provided `errors` as `undefined`', function () {
      it('should throw', function () {
        expect(() => configFileModule.formatErrors()).to.throw(TypeError, 'Array of errors must be non-empty');
      });
    });
    describe('when provided `errors` as a non-empty array', function () {
      it('should return a string', function () {
        expect(configFileModule.formatErrors([{}])).to.be.a('string');
      });
    });
    describe('when `opts.json` is a string', function () {
      it('should call `betterAjvErrors()` with option `json: opts.json`', function () {
        configFileModule.formatErrors([{}], {}, {
          json: '{"foo": "bar"}'
        });
        expect(mocks['@sidvind/better-ajv-errors']).to.have.been.calledWith(schema.getSchema(), {}, [{}], {
          format: 'cli',
          json: '{"foo": "bar"}'
        });
      });
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
