"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _sinon = _interopRequireDefault(require("sinon"));

var _parser = _interopRequireDefault(require("../lib/cli/parser"));

var _config = require("../lib/config");

var _logger = _interopRequireDefault(require("../lib/logger"));

var _schema = require("../lib/schema/schema");

describe('Config', function () {
  let sandbox;
  beforeEach(function () {
    sandbox = _sinon.default.createSandbox();
  });
  afterEach(function () {
    sandbox.restore();
  });
  describe('Appium config', function () {
    let log;
    let dir;
    beforeEach(function () {
      log = sandbox.spy(console, 'log');
      dir = sandbox.spy(console, 'dir');
    });
    describe('showBuildInfo()', function () {
      it('should log build info to console', async function () {
        const config = (0, _config.getBuildInfo)();
        await (0, _config.showBuildInfo)();
        log.should.have.been.calledOnce;
        log.firstCall.args.should.contain(JSON.stringify(config));
      });
    });
    describe('showConfig()', function () {
      describe('when a config file is present', function () {
        it('should dump the current Appium config', function () {
          (0, _config.showConfig)({
            address: 'bar'
          }, {
            config: {
              server: {
                callbackAddress: 'quux'
              }
            }
          }, {
            port: 1234
          }, {
            allowCors: false
          });
          log.should.have.been.calledWith('Appium Configuration\n');
        });
        it('should skip empty objects', function () {
          (0, _config.showConfig)({
            foo: 'bar',
            cows: {},
            pigs: [],
            sheep: 0,
            ducks: false
          }, {
            config: {
              server: {
                address: 'quux'
              }
            }
          }, {
            spam: 'food'
          }, {});
          dir.should.have.been.calledWith({
            foo: 'bar',
            sheep: 0,
            ducks: false
          });
        });
      });
      describe('when a config file is not present', function () {
        it('should dump the current Appium config (sans config file contents)', function () {
          (0, _config.showConfig)({
            foo: 'bar',
            cows: {},
            pigs: [],
            sheep: 0,
            ducks: false
          }, {}, {
            spam: 'food'
          }, {});
          log.should.have.been.calledWith('\n(no configuration file loaded)');
        });
      });
      describe('when no CLI arguments (other than --show-config) provided', function () {
        it('should not dump CLI args', function () {
          (0, _config.showConfig)({}, {}, {}, {});
          log.should.have.been.calledWith('\n(no CLI parameters provided)');
        });
      });
    });
  });
  describe('node.js config', function () {
    let _process = process;
    before(function () {
      process = { ...process
      };
    });
    after(function () {
      process = _process;
    });
    describe('checkNodeOk', function () {
      describe('unsupported nodes', function () {
        const unsupportedVersions = ['v0.1', 'v0.9.12', 'v0.10.36', 'v0.12.14', 'v4.4.7', 'v5.7.0', 'v6.3.1', 'v7.1.1', 'v8.0.0', 'v9.2.3', 'v10.1.0'];

        for (const version of unsupportedVersions) {
          it(`should fail if node is ${version}`, function () {
            process.version = version;

            _config.checkNodeOk.should.throw();
          });
        }
      });
      describe('supported nodes', function () {
        it('should succeed if node is 12+', function () {
          process.version = 'v12.0.1';

          _config.checkNodeOk.should.not.throw();
        });
        it('should succeed if node is 13+', function () {
          process.version = 'v13.6.0';

          _config.checkNodeOk.should.not.throw();
        });
        it('should succeed if node is 14+', function () {
          process.version = 'v14.0.0';

          _config.checkNodeOk.should.not.throw();
        });
      });
    });
    describe('warnNodeDeprecations', function () {
      let spy;
      before(function () {
        spy = sandbox.spy(_logger.default, 'warn');
      });
      beforeEach(function () {
        spy.resetHistory();
      });
      it('should not log a warning if node is 8+', function () {
        process.version = 'v8.0.0';
        (0, _config.warnNodeDeprecations)();

        _logger.default.warn.callCount.should.equal(0);
      });
      it('should not log a warning if node is 9+', function () {
        process.version = 'v9.0.0';
        (0, _config.warnNodeDeprecations)();

        _logger.default.warn.callCount.should.equal(0);
      });
    });
  });
  describe('server arguments', function () {
    let args;
    describe('getNonDefaultServerArgs', function () {
      describe('without extension schemas', function () {
        beforeEach(async function () {
          await (0, _parser.default)(true);
          args = (0, _schema.getDefaultsForSchema)();
        });
        it('should show none if we have all the defaults', function () {
          let nonDefaultArgs = (0, _config.getNonDefaultServerArgs)(args);
          nonDefaultArgs.should.be.empty;
        });
        it('should catch a non-default argument', function () {
          args.allowCors = true;
          let nonDefaultArgs = (0, _config.getNonDefaultServerArgs)(args);
          nonDefaultArgs.should.eql({
            allowCors: true
          });
        });
        describe('when arg is an array', function () {
          it('should return the arg as an array', function () {
            args.usePlugins = ['all'];
            (0, _config.getNonDefaultServerArgs)(args).should.eql({
              usePlugins: ['all']
            });
          });
        });
      });
      describe('with extension schemas', function () {
        beforeEach(async function () {
          (0, _schema.resetSchema)();
          (0, _schema.registerSchema)('plugin', 'crypto-fiend', {
            type: 'object',
            properties: {
              elite: {
                type: 'boolean',
                default: true
              }
            }
          });
          (0, _schema.finalizeSchema)();
          await (0, _parser.default)(true);
          args = (0, _schema.getDefaultsForSchema)();
        });
        it('should take extension schemas into account', function () {
          const nonDefaultArgs = (0, _config.getNonDefaultServerArgs)(args);
          nonDefaultArgs.should.be.empty;
        });
        it('should catch a non-default argument', function () {
          args['plugin.crypto-fiend.elite'] = false;
          const nonDefaultArgs = (0, _config.getNonDefaultServerArgs)(args);
          nonDefaultArgs.should.eql(_lodash.default.set({}, 'plugin.crypto-fiend.elite', false));
        });
      });
    });
  });
  describe('validateTmpDir', function () {
    it('should fail to use a tmp dir with incorrect permissions', function () {
      (0, _config.validateTmpDir)('/private/if_you_run_with_sudo_this_wont_fail').should.be.rejectedWith(/could not ensure/);
    });
    it('should fail to use an undefined tmp dir', function () {
      (0, _config.validateTmpDir)().should.be.rejectedWith(/could not ensure/);
    });
    it('should be able to use a tmp dir with correct permissions', function () {
      (0, _config.validateTmpDir)('/tmp/test_tmp_dir/with/any/number/of/levels').should.not.be.rejected;
    });
  });
  describe('parsing args with empty argv[1]', function () {
    let argv1;
    before(function () {
      argv1 = process.argv[1];
    });
    beforeEach(function () {
      (0, _schema.resetSchema)();
    });
    after(function () {
      process.argv[1] = argv1;
    });
    it('should not fail if process.argv[1] is undefined', async function () {
      delete process.argv[1];
      let args = await (0, _parser.default)();
      args.prog.should.be.equal('appium');
    });
    it('should set "prog" to process.argv[1]', async function () {
      process.argv[1] = 'Hello World';
      let args = await (0, _parser.default)();
      args.prog.should.be.equal('Hello World');
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
