"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _utils = require("../lib/utils");

var _helpers = require("./helpers");

var _lodash = _interopRequireDefault(require("lodash"));

var _colors = require("@dabh/colors");

var _sinon = _interopRequireDefault(require("sinon"));

var _logger = _interopRequireDefault(require("../lib/logger"));

describe('utils', function () {
  describe('parseCapsForInnerDriver()', function () {
    it('should return an error if only JSONWP provided', function () {
      let {
        error,
        protocol
      } = (0, _utils.parseCapsForInnerDriver)(_helpers.BASE_CAPS);
      protocol.should.equal('W3C');
      error.message.should.match(/W3C/);
    });
    it('should return W3C caps unchanged if only W3C caps were provided', function () {
      let {
        desiredCaps,
        processedJsonwpCapabilities,
        processedW3CCapabilities,
        protocol
      } = (0, _utils.parseCapsForInnerDriver)(undefined, _helpers.W3C_CAPS);
      desiredCaps.should.deep.equal(_helpers.BASE_CAPS);
      should.not.exist(processedJsonwpCapabilities);
      processedW3CCapabilities.should.deep.equal(_helpers.W3C_CAPS);
      protocol.should.equal('W3C');
    });
    it('should return JSONWP and W3C caps if both were provided', function () {
      let {
        desiredCaps,
        processedJsonwpCapabilities,
        processedW3CCapabilities,
        protocol
      } = (0, _utils.parseCapsForInnerDriver)(_helpers.BASE_CAPS, _helpers.W3C_CAPS);
      desiredCaps.should.deep.equal(_helpers.BASE_CAPS);
      processedJsonwpCapabilities.should.deep.equal(_helpers.BASE_CAPS);
      processedW3CCapabilities.should.deep.equal(_helpers.W3C_CAPS);
      protocol.should.equal('W3C');
    });
    it('should include default capabilities in results', function () {
      const defaultW3CCaps = {
        'appium:foo': 'bar',
        'appium:baz': 'bla'
      };
      const expectedDefaultCaps = {
        foo: 'bar',
        baz: 'bla'
      };
      const {
        desiredCaps,
        processedJsonwpCapabilities,
        processedW3CCapabilities
      } = (0, _utils.parseCapsForInnerDriver)(_helpers.BASE_CAPS, _helpers.W3C_CAPS, {}, defaultW3CCaps);
      desiredCaps.should.deep.equal({ ...expectedDefaultCaps,
        ..._helpers.BASE_CAPS
      });
      processedJsonwpCapabilities.should.deep.equal({ ...expectedDefaultCaps,
        ..._helpers.BASE_CAPS
      });
      processedW3CCapabilities.alwaysMatch.should.deep.equal({ ...(0, _utils.insertAppiumPrefixes)(expectedDefaultCaps),
        ...(0, _utils.insertAppiumPrefixes)(_helpers.BASE_CAPS)
      });
    });
    it('should allow valid default capabilities', function () {
      const res = (0, _utils.parseCapsForInnerDriver)(null, _helpers.W3C_CAPS, {}, {
        'appium:foo': 'bar2'
      });
      res.processedW3CCapabilities.alwaysMatch['appium:foo'].should.eql('bar2');
    });
    it('should not allow invalid default capabilities', function () {
      const res = (0, _utils.parseCapsForInnerDriver)(null, _helpers.W3C_CAPS, {}, {
        foo: 'bar',
        'appium:foo2': 'bar2'
      });
      res.error.should.eql({
        jsonwpCode: 61,
        error: 'invalid argument',
        w3cStatus: 400,
        _stacktrace: null
      });
    });
    it('should reject if W3C caps are not passing constraints', function () {
      const err = (0, _utils.parseCapsForInnerDriver)(undefined, _helpers.W3C_CAPS, {
        hello: {
          presence: true
        }
      }).error;
      err.message.should.match(/'hello' can't be blank/);
      _lodash.default.isError(err).should.be.true;
    });
    it('should only accept W3C caps that have passing constraints', function () {
      let w3cCaps = { ..._helpers.W3C_CAPS,
        firstMatch: [{
          foo: 'bar'
        }, {
          'appium:hello': 'world'
        }]
      };
      (0, _utils.parseCapsForInnerDriver)(_helpers.BASE_CAPS, w3cCaps, {
        hello: {
          presence: true
        }
      }).error.should.eql({
        jsonwpCode: 61,
        error: 'invalid argument',
        w3cStatus: 400,
        _stacktrace: null
      });
    });
    it('should add appium prefixes to W3C caps that are not standard in W3C', function () {
      (0, _utils.parseCapsForInnerDriver)(undefined, {
        alwaysMatch: {
          platformName: 'Fake',
          propertyName: 'PROP_NAME'
        }
      }).error.error.should.includes('invalid argument');
    });
  });
  describe('removeAppiumPrefixes()', function () {
    it('should remove appium prefixes from cap names', function () {
      (0, _utils.removeAppiumPrefixes)({
        'appium:cap1': 'value1',
        'ms:cap2': 'value2',
        someCap: 'someCap'
      }).should.eql({
        'cap1': 'value1',
        'ms:cap2': 'value2',
        someCap: 'someCap'
      });
    });
  });
  describe('insertAppiumPrefixes()', function () {
    it('should apply prefixes to non-standard capabilities', function () {
      (0, _utils.insertAppiumPrefixes)({
        someCap: 'someCap'
      }).should.deep.equal({
        'appium:someCap': 'someCap'
      });
    });
    it('should not apply prefixes to standard capabilities', function () {
      (0, _utils.insertAppiumPrefixes)({
        browserName: 'BrowserName',
        platformName: 'PlatformName'
      }).should.deep.equal({
        browserName: 'BrowserName',
        platformName: 'PlatformName'
      });
    });
    it('should not apply prefixes to capabilities that already have a prefix', function () {
      (0, _utils.insertAppiumPrefixes)({
        'appium:someCap': 'someCap',
        'moz:someOtherCap': 'someOtherCap'
      }).should.deep.equal({
        'appium:someCap': 'someCap',
        'moz:someOtherCap': 'someOtherCap'
      });
    });
    it('should apply prefixes to non-prefixed, non-standard capabilities; should not apply prefixes to any other capabilities', function () {
      (0, _utils.insertAppiumPrefixes)({
        'appium:someCap': 'someCap',
        'moz:someOtherCap': 'someOtherCap',
        browserName: 'BrowserName',
        platformName: 'PlatformName',
        someOtherCap: 'someOtherCap',
        yetAnotherCap: 'yetAnotherCap'
      }).should.deep.equal({
        'appium:someCap': 'someCap',
        'moz:someOtherCap': 'someOtherCap',
        browserName: 'BrowserName',
        platformName: 'PlatformName',
        'appium:someOtherCap': 'someOtherCap',
        'appium:yetAnotherCap': 'yetAnotherCap'
      });
    });
  });
  describe('pullSettings()', function () {
    it('should pull settings from caps', function () {
      const caps = {
        platformName: 'foo',
        browserName: 'bar',
        'settings[settingName]': 'baz',
        'settings[settingName2]': 'baz2'
      };
      const settings = (0, _utils.pullSettings)(caps);
      settings.should.eql({
        settingName: 'baz',
        settingName2: 'baz2'
      });
      caps.should.eql({
        platformName: 'foo',
        browserName: 'bar'
      });
    });
    it('should pull settings dict if object values are present in caps', function () {
      const caps = {
        platformName: 'foo',
        browserName: 'bar',
        'settings[settingName]': {
          key: 'baz'
        }
      };
      const settings = (0, _utils.pullSettings)(caps);
      settings.should.eql({
        settingName: {
          key: 'baz'
        }
      });
      caps.should.eql({
        platformName: 'foo',
        browserName: 'bar'
      });
    });
    it('should pull empty dict if no settings are present in caps', function () {
      const caps = {
        platformName: 'foo',
        browserName: 'bar',
        'setting[settingName]': 'baz'
      };
      const settings = (0, _utils.pullSettings)(caps);
      settings.should.eql({});
      caps.should.eql({
        platformName: 'foo',
        browserName: 'bar',
        'setting[settingName]': 'baz'
      });
    });
    it('should pull empty dict if caps are empty', function () {
      const caps = {};
      const settings = (0, _utils.pullSettings)(caps);
      settings.should.eql({});
      caps.should.eql({});
    });
  });
  describe('ReadonlyMap', function () {
    it('should allow writing', function () {
      const map = new _utils.ReadonlyMap();
      (() => map.set('foo', 'bar')).should.not.throw();
    });
    it('should allow reading', function () {
      const map = new _utils.ReadonlyMap([['foo', 'bar']]);
      (() => map.get('foo')).should.not.throw();
    });
    it('should not allow deletion', function () {
      const map = new _utils.ReadonlyMap([['foo', 'bar']]);
      map.delete('foo').should.be.false;
    });
    it('should not allow clearing', function () {
      const map = new _utils.ReadonlyMap([['foo', 'bar']]);
      (() => map.clear()).should.throw();
    });
    it('should not allow updating', function () {
      const map = new _utils.ReadonlyMap([['foo', 'bar']]);
      (() => map.set('foo', 'baz')).should.throw();
    });
  });
  describe('inspect()', function () {
    let sandbox;
    beforeEach(function () {
      sandbox = _sinon.default.createSandbox();
      sandbox.spy(_logger.default, 'info');
    });
    afterEach(function () {
      sandbox.restore();
    });
    it('should log the result of inspecting a value', function () {
      (0, _utils.inspect)({
        foo: 'bar'
      });
      (0, _colors.stripColors)(_logger.default.info.firstCall.firstArg).should.equal('{ foo: \'bar\' }');
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
