"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _axios = _interopRequireDefault(require("axios"));

var _webdriverio = require("webdriverio");

var _main = require("../lib/main");

var _extensionConfig = require("../lib/extension-config");

var _helpers = require("./helpers");

var _baseDriver = require("@appium/base-driver");

var _driverConfig = _interopRequireDefault(require("../lib/driver-config"));

var _extension = require("../lib/cli/extension");

var _utils = require("../lib/utils");

var _sinon = _interopRequireDefault(require("sinon"));

let TEST_SERVER;
let TEST_PORT;
const sillyWebServerPort = 1234;
const sillyWebServerHost = 'hey';
const FAKE_ARGS = {
  sillyWebServerPort,
  sillyWebServerHost
};
const FAKE_DRIVER_ARGS = {
  driver: {
    fake: FAKE_ARGS
  }
};
const shouldStartServer = process.env.USE_RUNNING_SERVER !== '0';
const caps = _helpers.W3C_PREFIXED_CAPS;
const wdOpts = {
  hostname: _helpers.TEST_HOST,
  port: null,
  connectionRetryCount: 0
};
describe('FakeDriver - via HTTP', function () {
  let server = null;
  const appiumHome = _extensionConfig.DEFAULT_APPIUM_HOME;
  let FakeDriver = null;
  let baseUrl;

  const FAKE_DRIVER_DIR = _path.default.join(_helpers.PROJECT_ROOT, 'packages', 'fake-driver');

  before(async function () {
    wdOpts.port = TEST_PORT = await (0, _helpers.getTestPort)();
    TEST_SERVER = `http://${_helpers.TEST_HOST}:${TEST_PORT}`;
    baseUrl = `${TEST_SERVER}/session`;
    const driverList = await (0, _extension.runExtensionCommand)({
      appiumHome,
      driverCommand: 'list',
      showInstalled: true
    }, _extensionConfig.DRIVER_TYPE);

    if (!_lodash.default.has(driverList, 'fake')) {
      await (0, _extension.runExtensionCommand)({
        appiumHome,
        driverCommand: 'install',
        driver: FAKE_DRIVER_DIR,
        installType: _extensionConfig.INSTALL_TYPE_LOCAL
      }, _extensionConfig.DRIVER_TYPE);
    }

    const config = _driverConfig.default.getInstance(appiumHome);

    FakeDriver = config.require('fake');
    await serverStart();
  });
  after(async function () {
    await serverClose();
  });

  async function serverStart(args = {}) {
    args = {
      port: TEST_PORT,
      host: _helpers.TEST_HOST,
      appiumHome,
      ...args
    };

    if (shouldStartServer) {
      server = await (0, _main.main)(args);
    }
  }

  async function serverClose() {
    if (server) {
      await server.close();
    }
  }

  describe('server updating', function () {
    it('should allow drivers to update the server in arbitrary ways', async function () {
      const {
        data
      } = await _axios.default.get(`${TEST_SERVER}/fakedriver`);
      data.should.eql({
        fakedriver: 'fakeResponse'
      });
    });
  });
  describe('cli args handling for empty args', function () {
    it('should not recieve user cli args if none passed in', async function () {
      let driver = await (0, _webdriverio.remote)({ ...wdOpts,
        capabilities: caps
      });
      const {
        sessionId
      } = driver;

      try {
        const {
          data
        } = await _axios.default.get(`${baseUrl}/${sessionId}/fakedriverargs`);
        should.not.exist(data.value.sillyWebServerPort);
        should.not.exist(data.value.sillyWebServerHost);
      } finally {
        await driver.deleteSession();
      }
    });
  });
  describe('cli args handling for passed in args', function () {
    before(async function () {
      await serverClose();
      await serverStart(FAKE_DRIVER_ARGS);
    });
    after(async function () {
      await serverClose();
      await serverStart();
    });
    it('should receive user cli args from a driver if arguments were passed in', async function () {
      let driver = await (0, _webdriverio.remote)({ ...wdOpts,
        capabilities: caps
      });
      const {
        sessionId
      } = driver;

      try {
        const {
          data
        } = await _axios.default.get(`${baseUrl}/${sessionId}/fakedriverargs`);
        data.value.sillyWebServerPort.should.eql(sillyWebServerPort);
        data.value.sillyWebServerHost.should.eql(sillyWebServerHost);
      } finally {
        await driver.deleteSession();
      }
    });
  });
  describe('session handling', function () {
    it('should start and stop a session and not allow commands after session stopped', async function () {
      let driver = await (0, _webdriverio.remote)({ ...wdOpts,
        capabilities: caps
      });
      should.exist(driver.sessionId);
      driver.sessionId.should.be.a('string');
      await driver.deleteSession();
      await driver.getTitle().should.eventually.be.rejectedWith(/terminated/);
    });
    it('should be able to run two FakeDriver sessions simultaneously', async function () {
      let driver1 = await (0, _webdriverio.remote)({ ...wdOpts,
        capabilities: caps
      });
      should.exist(driver1.sessionId);
      driver1.sessionId.should.be.a('string');
      let driver2 = await (0, _webdriverio.remote)({ ...wdOpts,
        capabilities: caps
      });
      should.exist(driver2.sessionId);
      driver2.sessionId.should.be.a('string');
      driver2.sessionId.should.not.equal(driver1.sessionId);
      await driver1.deleteSession();
      await driver2.deleteSession();
    });
    it('should not be able to run two FakeDriver sessions simultaneously when one is unique', async function () {
      let uniqueCaps = _lodash.default.clone(caps);

      uniqueCaps['appium:uniqueApp'] = true;
      let driver1 = await (0, _webdriverio.remote)({ ...wdOpts,
        capabilities: uniqueCaps
      });
      should.exist(driver1.sessionId);
      driver1.sessionId.should.be.a('string');
      await (0, _webdriverio.remote)({ ...wdOpts,
        capabilities: caps
      }).should.eventually.be.rejected;
      await driver1.deleteSession();
    });
    it('should use the newCommandTimeout of the inner Driver on session creation', async function () {
      let localCaps = Object.assign({
        'appium:newCommandTimeout': 0.25
      }, caps);
      let driver = await (0, _webdriverio.remote)({ ...wdOpts,
        capabilities: localCaps
      });
      should.exist(driver.sessionId);
      await _bluebird.default.delay(250);
      await driver.getPageSource().should.eventually.be.rejectedWith(/terminated/);
    });
    it('should accept valid W3C capabilities and start a W3C session', async function () {
      const w3cCaps = {
        capabilities: {
          alwaysMatch: {
            'appium:automationName': 'Fake',
            platformName: 'Fake'
          },
          firstMatch: [{
            'appium:deviceName': 'Fake',
            'appium:app': _helpers.TEST_FAKE_APP
          }]
        }
      };
      const {
        status,
        value,
        sessionId
      } = (await _axios.default.post(baseUrl, w3cCaps)).data;

      try {
        should.not.exist(status);
        should.not.exist(sessionId);
        value.sessionId.should.be.a.string;
        value.should.exist;
        value.capabilities.should.deep.equal({
          automationName: 'Fake',
          platformName: 'Fake',
          deviceName: 'Fake',
          app: _helpers.TEST_FAKE_APP
        });
        const {
          status: screenshotStatus,
          value: screenshotValue
        } = (await (0, _axios.default)({
          url: `${baseUrl}/${value.sessionId}/screenshot`
        })).data;
        should.not.exist(screenshotStatus);
        screenshotValue.should.match(/^iVBOR/);
        await _axios.default.post(`${baseUrl}/${value.sessionId}/execute/async`, {
          script: '',
          args: ['a']
        }).should.eventually.be.rejectedWith(/405/);
      } finally {
        await _axios.default.delete(`${baseUrl}/${value.sessionId}`);
      }
    });
    it('should reject invalid W3C capabilities and respond with a 400 Bad Parameters error', async function () {
      const badW3Ccaps = {
        capabilities: {
          alwaysMatch: {},
          firstMatch: [{
            'appium:deviceName': 'Fake',
            'appium:app': _helpers.TEST_FAKE_APP
          }]
        }
      };
      await _axios.default.post(baseUrl, badW3Ccaps).should.eventually.be.rejectedWith(/400/);
    });
    it('should accept a combo of W3C and JSONWP capabilities but completely ignore JSONWP', async function () {
      const combinedCaps = {
        'desiredCapabilities': { ...caps,
          jsonwpParam: 'jsonwpParam'
        },
        'capabilities': {
          'alwaysMatch': { ...caps
          },
          'firstMatch': [{
            'appium:w3cParam': 'w3cParam'
          }]
        }
      };
      const {
        status,
        value,
        sessionId
      } = (await _axios.default.post(baseUrl, combinedCaps)).data;

      try {
        should.not.exist(status);
        should.not.exist(sessionId);
        value.sessionId.should.exist;
        value.capabilities.should.deep.equal({ ...(0, _utils.removeAppiumPrefixes)(caps),
          w3cParam: 'w3cParam'
        });
      } finally {
        await _axios.default.delete(`${baseUrl}/${value.sessionId}`);
      }
    });
    it('should reject bad automation name with an appropriate error', async function () {
      const w3cCaps = {
        capabilities: {
          alwaysMatch: { ...caps,
            'appium:automationName': 'BadAutomationName'
          }
        }
      };
      await _axios.default.post(baseUrl, w3cCaps).should.eventually.be.rejectedWith(/500/);
    });
    it('should accept capabilities that are provided in the firstMatch array', async function () {
      const w3cCaps = {
        capabilities: {
          alwaysMatch: {},
          firstMatch: [{}, { ...caps
          }]
        }
      };
      const {
        value,
        sessionId,
        status
      } = (await _axios.default.post(baseUrl, w3cCaps)).data;

      try {
        should.not.exist(status);
        should.not.exist(sessionId);
        value.capabilities.should.deep.equal((0, _utils.removeAppiumPrefixes)(caps));
      } finally {
        await _axios.default.delete(`${baseUrl}/${value.sessionId}`);
      }
    });
    it('should not fall back to MJSONWP if w3c caps are invalid', async function () {
      const combinedCaps = {
        desiredCapabilities: { ...caps
        },
        capabilities: {
          alwaysMatch: {},
          firstMatch: [{}, { ...caps,
            platformName: null,
            'appium:automationName': null,
            'appium:deviceName': null
          }]
        }
      };
      const res = await _axios.default.post(baseUrl, combinedCaps, {
        validateStatus: null
      });
      res.status.should.eql(400);
      res.data.value.error.should.match(/invalid argument/);
    });
    it('should not fall back to MJSONWP even if Inner Driver is not ready for W3C', async function () {
      const combinedCaps = {
        desiredCapabilities: { ...caps
        },
        capabilities: {
          alwaysMatch: { ...caps,
            'appium:deviceName': 'Fake'
          }
        }
      };

      const createSessionStub = _sinon.default.stub(FakeDriver.prototype, 'createSession').callsFake(async function (jsonwpCaps) {
        const res = await _baseDriver.BaseDriver.prototype.createSession.call(this, jsonwpCaps);
        this.protocol.should.equal('MJSONWP');
        return res;
      });

      const res = await _axios.default.post(baseUrl, combinedCaps, {
        validateStatus: null
      });
      const {
        data,
        status
      } = res;
      status.should.eql(500);
      data.value.message.should.match(/older capabilities/);
      createSessionStub.restore();
    });
    it('should allow drivers to update the method map with new routes and commands', async function () {
      let driver = await (0, _webdriverio.remote)({ ...wdOpts,
        capabilities: caps
      });
      const {
        sessionId
      } = driver;

      try {
        await _axios.default.post(`${baseUrl}/${sessionId}/fakedriver`, {
          thing: {
            yes: 'lolno'
          }
        });
        (await _axios.default.get(`${baseUrl}/${sessionId}/fakedriver`)).data.value.should.eql({
          yes: 'lolno'
        });
      } finally {
        await driver.deleteSession();
      }
    });
  });
});
describe.skip('Logsink', function () {
  let server = null;
  let logs = [];

  let logHandler = function (level, message) {
    logs.push([level, message]);
  };

  let args = {
    port: TEST_PORT,
    host: _helpers.TEST_HOST,
    appiumHome: _extensionConfig.DEFAULT_APPIUM_HOME,
    logHandler
  };
  before(async function () {
    server = await (0, _main.main)(args);
  });
  after(async function () {
    await server.close();
  });
  it('should send logs to a logHandler passed in by a parent package', function () {
    logs.length.should.be.above(1);
    let welcomeIndex = logs[0][1].includes('versions of node') ? 1 : 0;
    logs[welcomeIndex].length.should.equal(2);
    logs[welcomeIndex][1].should.include('Welcome to Appium');
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
