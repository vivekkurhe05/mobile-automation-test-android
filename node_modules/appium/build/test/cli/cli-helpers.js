"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runAppiumRaw = exports.runAppiumJson = exports.runAppium = exports.installLocalExtension = exports.EXECUTABLE = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _teen_process = require("teen_process");

var _helpers = require("../helpers");

var _path = _interopRequireDefault(require("path"));

const EXECUTABLE = _path.default.join(_helpers.PROJECT_ROOT, 'packages', 'appium', 'build', 'lib', 'main.js');

exports.EXECUTABLE = EXECUTABLE;

async function run(appiumHome, args) {
  const env = {
    APPIUM_HOME: appiumHome,
    PATH: process.env.PATH
  };

  try {
    return await (0, _teen_process.exec)(process.execPath, [EXECUTABLE, ...args], {
      cwd: _helpers.PROJECT_ROOT,
      env
    });
  } catch (err) {
    const {
      stdout,
      stderr
    } = err;
    const runErr = Object.assign(err, {
      originalMessage: err.message,
      message: `${stdout.trim()}\n\n${stderr.trim()}`,
      command: `${process.execPath} ${EXECUTABLE} ${args.join(' ')}`,
      env,
      cwd: _helpers.PROJECT_ROOT
    });
    throw runErr;
  }
}

const runAppium = _lodash.default.curry(async (appiumHome, args) => {
  const {
    stdout
  } = await run(appiumHome, args);
  return stdout;
});

exports.runAppium = runAppium;

const runAppiumRaw = _lodash.default.curry(async (appiumHome, args) => await run(appiumHome, args));

exports.runAppiumRaw = runAppiumRaw;

const runAppiumJson = _lodash.default.curry(async (appiumHome, args) => {
  if (!args.includes('--json')) {
    args.push('--json');
  }

  const result = await runAppium(appiumHome, args);

  try {
    return JSON.parse(result);
  } catch (err) {
    err.message = `Error parsing JSON. Contents of STDOUT: ${result}`;
    throw err;
  }
});

exports.runAppiumJson = runAppiumJson;

const installLocalExtension = _lodash.default.curry(async (appiumHome, type, pathToExtension) => await runAppiumJson(appiumHome, [type, 'install', '--source', 'local', pathToExtension]));

exports.installLocalExtension = installLocalExtension;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
