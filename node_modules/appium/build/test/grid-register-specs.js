"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _sinon = _interopRequireDefault(require("sinon"));

var _helpers = require("./helpers");

describe('grid-register', function () {
  let sandbox;
  beforeEach(function () {
    sandbox = _sinon.default.createSandbox();
  });
  afterEach(function () {
    sandbox.restore();
  });
  describe('registerNode()', function () {
    let registerNode;
    let mocks;
    beforeEach(function () {
      mocks = {
        '@appium/support': {
          fs: {
            readFile: sandbox.stub().resolves('{}')
          }
        },
        axios: sandbox.stub().resolves({
          data: '',
          status: 200
        })
      };
      registerNode = _helpers.rewiremock.proxy(() => require('../lib/grid-register'), mocks).default;
    });
    describe('when provided a path to a config file', function () {
      it('should read the config file', async function () {
        await registerNode('/path/to/config-file.json');
        mocks['@appium/support'].fs.readFile.should.have.been.calledOnceWith('/path/to/config-file.json', 'utf-8');
      });
      it('should parse the config file as JSON', async function () {
        sandbox.spy(JSON, 'parse');
        await registerNode('/path/to/config-file.json');
        JSON.parse.should.have.been.calledOnceWith(await mocks['@appium/support'].fs.readFile.firstCall.returnValue);
      });
      describe('when the config file is invalid', function () {
        beforeEach(function () {
          mocks['@appium/support'].fs.readFile.resolves('');
        });
        it('should reject', async function () {
          await registerNode('/path/to/config-file.json').should.be.rejected;
        });
      });
    });
    describe('when provided a config object', function () {
      it('should not attempt to read the object as a config file', async function () {
        await registerNode({
          my: 'config'
        });
        mocks['@appium/support'].fs.readFile.should.not.have.been.called;
      });
      it('should not attempt to parse any JSON', async function () {
        sandbox.spy(JSON, 'parse');
        await registerNode({
          my: 'config'
        });
        JSON.parse.should.not.have.been.called;
      });
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZ3JpZC1yZWdpc3Rlci1zcGVjcy5qcyJdLCJuYW1lcyI6WyJkZXNjcmliZSIsInNhbmRib3giLCJiZWZvcmVFYWNoIiwic2lub24iLCJjcmVhdGVTYW5kYm94IiwiYWZ0ZXJFYWNoIiwicmVzdG9yZSIsInJlZ2lzdGVyTm9kZSIsIm1vY2tzIiwiZnMiLCJyZWFkRmlsZSIsInN0dWIiLCJyZXNvbHZlcyIsImF4aW9zIiwiZGF0YSIsInN0YXR1cyIsInJld2lyZW1vY2siLCJwcm94eSIsInJlcXVpcmUiLCJkZWZhdWx0IiwiaXQiLCJzaG91bGQiLCJoYXZlIiwiYmVlbiIsImNhbGxlZE9uY2VXaXRoIiwic3B5IiwiSlNPTiIsInBhcnNlIiwiZmlyc3RDYWxsIiwicmV0dXJuVmFsdWUiLCJiZSIsInJlamVjdGVkIiwibXkiLCJub3QiLCJjYWxsZWQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBOztBQUNBOztBQUVBQSxRQUFRLENBQUMsZUFBRCxFQUFrQixZQUFZO0FBQ3BDLE1BQUlDLE9BQUo7QUFFQUMsRUFBQUEsVUFBVSxDQUFDLFlBQVk7QUFDckJELElBQUFBLE9BQU8sR0FBR0UsZUFBTUMsYUFBTixFQUFWO0FBQ0QsR0FGUyxDQUFWO0FBSUFDLEVBQUFBLFNBQVMsQ0FBQyxZQUFZO0FBQ3BCSixJQUFBQSxPQUFPLENBQUNLLE9BQVI7QUFDRCxHQUZRLENBQVQ7QUFJQU4sRUFBQUEsUUFBUSxDQUFDLGdCQUFELEVBQW1CLFlBQVk7QUFDckMsUUFBSU8sWUFBSjtBQUNBLFFBQUlDLEtBQUo7QUFFQU4sSUFBQUEsVUFBVSxDQUFDLFlBQVk7QUFDckJNLE1BQUFBLEtBQUssR0FBRztBQUNOLDJCQUFtQjtBQUNqQkMsVUFBQUEsRUFBRSxFQUFFO0FBQ0ZDLFlBQUFBLFFBQVEsRUFBRVQsT0FBTyxDQUFDVSxJQUFSLEdBQWVDLFFBQWYsQ0FBd0IsSUFBeEI7QUFEUjtBQURhLFNBRGI7QUFNTkMsUUFBQUEsS0FBSyxFQUFFWixPQUFPLENBQUNVLElBQVIsR0FBZUMsUUFBZixDQUF3QjtBQUFDRSxVQUFBQSxJQUFJLEVBQUUsRUFBUDtBQUFXQyxVQUFBQSxNQUFNLEVBQUU7QUFBbkIsU0FBeEI7QUFORCxPQUFSO0FBU0FSLE1BQUFBLFlBQVksR0FBR1Msb0JBQVdDLEtBQVgsQ0FDYixNQUFNQyxPQUFPLENBQUMsc0JBQUQsQ0FEQSxFQUViVixLQUZhLEVBR2JXLE9BSEY7QUFJRCxLQWRTLENBQVY7QUFnQkFuQixJQUFBQSxRQUFRLENBQUMsdUNBQUQsRUFBMEMsWUFBWTtBQUM1RG9CLE1BQUFBLEVBQUUsQ0FBQyw2QkFBRCxFQUFnQyxrQkFBa0I7QUFDbEQsY0FBTWIsWUFBWSxDQUFDLDJCQUFELENBQWxCO0FBQ0FDLFFBQUFBLEtBQUssQ0FBQyxpQkFBRCxDQUFMLENBQXlCQyxFQUF6QixDQUE0QkMsUUFBNUIsQ0FBcUNXLE1BQXJDLENBQTRDQyxJQUE1QyxDQUFpREMsSUFBakQsQ0FBc0RDLGNBQXRELENBQ0UsMkJBREYsRUFFRSxPQUZGO0FBSUQsT0FOQyxDQUFGO0FBUUFKLE1BQUFBLEVBQUUsQ0FBQyxzQ0FBRCxFQUF5QyxrQkFBa0I7QUFDM0RuQixRQUFBQSxPQUFPLENBQUN3QixHQUFSLENBQVlDLElBQVosRUFBa0IsT0FBbEI7QUFDQSxjQUFNbkIsWUFBWSxDQUFDLDJCQUFELENBQWxCO0FBQ0FtQixRQUFBQSxJQUFJLENBQUNDLEtBQUwsQ0FBV04sTUFBWCxDQUFrQkMsSUFBbEIsQ0FBdUJDLElBQXZCLENBQTRCQyxjQUE1QixDQUNFLE1BQU1oQixLQUFLLENBQUMsaUJBQUQsQ0FBTCxDQUF5QkMsRUFBekIsQ0FBNEJDLFFBQTVCLENBQXFDa0IsU0FBckMsQ0FBK0NDLFdBRHZEO0FBR0QsT0FOQyxDQUFGO0FBUUE3QixNQUFBQSxRQUFRLENBQUMsaUNBQUQsRUFBb0MsWUFBWTtBQUN0REUsUUFBQUEsVUFBVSxDQUFDLFlBQVk7QUFDckJNLFVBQUFBLEtBQUssQ0FBQyxpQkFBRCxDQUFMLENBQXlCQyxFQUF6QixDQUE0QkMsUUFBNUIsQ0FBcUNFLFFBQXJDLENBQThDLEVBQTlDO0FBQ0QsU0FGUyxDQUFWO0FBR0FRLFFBQUFBLEVBQUUsQ0FBQyxlQUFELEVBQWtCLGtCQUFrQjtBQUNwQyxnQkFBTWIsWUFBWSxDQUFDLDJCQUFELENBQVosQ0FBMENjLE1BQTFDLENBQWlEUyxFQUFqRCxDQUFvREMsUUFBMUQ7QUFDRCxTQUZDLENBQUY7QUFHRCxPQVBPLENBQVI7QUFRRCxLQXpCTyxDQUFSO0FBMkJBL0IsSUFBQUEsUUFBUSxDQUFDLCtCQUFELEVBQWtDLFlBQVk7QUFDcERvQixNQUFBQSxFQUFFLENBQUMsd0RBQUQsRUFBMkQsa0JBQWtCO0FBQzdFLGNBQU1iLFlBQVksQ0FBQztBQUFDeUIsVUFBQUEsRUFBRSxFQUFFO0FBQUwsU0FBRCxDQUFsQjtBQUNBeEIsUUFBQUEsS0FBSyxDQUFDLGlCQUFELENBQUwsQ0FBeUJDLEVBQXpCLENBQTRCQyxRQUE1QixDQUFxQ1csTUFBckMsQ0FBNENZLEdBQTVDLENBQWdEWCxJQUFoRCxDQUFxREMsSUFBckQsQ0FBMERXLE1BQTFEO0FBQ0QsT0FIQyxDQUFGO0FBS0FkLE1BQUFBLEVBQUUsQ0FBQyxzQ0FBRCxFQUF5QyxrQkFBa0I7QUFDM0RuQixRQUFBQSxPQUFPLENBQUN3QixHQUFSLENBQVlDLElBQVosRUFBa0IsT0FBbEI7QUFDQSxjQUFNbkIsWUFBWSxDQUFDO0FBQUN5QixVQUFBQSxFQUFFLEVBQUU7QUFBTCxTQUFELENBQWxCO0FBQ0FOLFFBQUFBLElBQUksQ0FBQ0MsS0FBTCxDQUFXTixNQUFYLENBQWtCWSxHQUFsQixDQUFzQlgsSUFBdEIsQ0FBMkJDLElBQTNCLENBQWdDVyxNQUFoQztBQUNELE9BSkMsQ0FBRjtBQUtELEtBWE8sQ0FBUjtBQVlELEdBM0RPLENBQVI7QUE0REQsQ0F2RU8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbIi8vIEB0cy1jaGVja1xuXG5pbXBvcnQgc2lub24gZnJvbSAnc2lub24nO1xuaW1wb3J0IHsgcmV3aXJlbW9jayB9IGZyb20gJy4vaGVscGVycyc7XG5cbmRlc2NyaWJlKCdncmlkLXJlZ2lzdGVyJywgZnVuY3Rpb24gKCkge1xuICBsZXQgc2FuZGJveDtcblxuICBiZWZvcmVFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICBzYW5kYm94ID0gc2lub24uY3JlYXRlU2FuZGJveCgpO1xuICB9KTtcblxuICBhZnRlckVhY2goZnVuY3Rpb24gKCkge1xuICAgIHNhbmRib3gucmVzdG9yZSgpO1xuICB9KTtcblxuICBkZXNjcmliZSgncmVnaXN0ZXJOb2RlKCknLCBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHJlZ2lzdGVyTm9kZTtcbiAgICBsZXQgbW9ja3M7XG5cbiAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIG1vY2tzID0ge1xuICAgICAgICAnQGFwcGl1bS9zdXBwb3J0Jzoge1xuICAgICAgICAgIGZzOiB7XG4gICAgICAgICAgICByZWFkRmlsZTogc2FuZGJveC5zdHViKCkucmVzb2x2ZXMoJ3t9JyksXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgYXhpb3M6IHNhbmRib3guc3R1YigpLnJlc29sdmVzKHtkYXRhOiAnJywgc3RhdHVzOiAyMDB9KSxcbiAgICAgIH07XG5cbiAgICAgIHJlZ2lzdGVyTm9kZSA9IHJld2lyZW1vY2sucHJveHkoXG4gICAgICAgICgpID0+IHJlcXVpcmUoJy4uL2xpYi9ncmlkLXJlZ2lzdGVyJyksXG4gICAgICAgIG1vY2tzLFxuICAgICAgKS5kZWZhdWx0O1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3doZW4gcHJvdmlkZWQgYSBwYXRoIHRvIGEgY29uZmlnIGZpbGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpdCgnc2hvdWxkIHJlYWQgdGhlIGNvbmZpZyBmaWxlJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBhd2FpdCByZWdpc3Rlck5vZGUoJy9wYXRoL3RvL2NvbmZpZy1maWxlLmpzb24nKTtcbiAgICAgICAgbW9ja3NbJ0BhcHBpdW0vc3VwcG9ydCddLmZzLnJlYWRGaWxlLnNob3VsZC5oYXZlLmJlZW4uY2FsbGVkT25jZVdpdGgoXG4gICAgICAgICAgJy9wYXRoL3RvL2NvbmZpZy1maWxlLmpzb24nLFxuICAgICAgICAgICd1dGYtOCcsXG4gICAgICAgICk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBwYXJzZSB0aGUgY29uZmlnIGZpbGUgYXMgSlNPTicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2FuZGJveC5zcHkoSlNPTiwgJ3BhcnNlJyk7XG4gICAgICAgIGF3YWl0IHJlZ2lzdGVyTm9kZSgnL3BhdGgvdG8vY29uZmlnLWZpbGUuanNvbicpO1xuICAgICAgICBKU09OLnBhcnNlLnNob3VsZC5oYXZlLmJlZW4uY2FsbGVkT25jZVdpdGgoXG4gICAgICAgICAgYXdhaXQgbW9ja3NbJ0BhcHBpdW0vc3VwcG9ydCddLmZzLnJlYWRGaWxlLmZpcnN0Q2FsbC5yZXR1cm5WYWx1ZSxcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuXG4gICAgICBkZXNjcmliZSgnd2hlbiB0aGUgY29uZmlnIGZpbGUgaXMgaW52YWxpZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYmVmb3JlRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgbW9ja3NbJ0BhcHBpdW0vc3VwcG9ydCddLmZzLnJlYWRGaWxlLnJlc29sdmVzKCcnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgcmVqZWN0JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGF3YWl0IHJlZ2lzdGVyTm9kZSgnL3BhdGgvdG8vY29uZmlnLWZpbGUuanNvbicpLnNob3VsZC5iZS5yZWplY3RlZDtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCd3aGVuIHByb3ZpZGVkIGEgY29uZmlnIG9iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGl0KCdzaG91bGQgbm90IGF0dGVtcHQgdG8gcmVhZCB0aGUgb2JqZWN0IGFzIGEgY29uZmlnIGZpbGUnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGF3YWl0IHJlZ2lzdGVyTm9kZSh7bXk6ICdjb25maWcnfSk7XG4gICAgICAgIG1vY2tzWydAYXBwaXVtL3N1cHBvcnQnXS5mcy5yZWFkRmlsZS5zaG91bGQubm90LmhhdmUuYmVlbi5jYWxsZWQ7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBub3QgYXR0ZW1wdCB0byBwYXJzZSBhbnkgSlNPTicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2FuZGJveC5zcHkoSlNPTiwgJ3BhcnNlJyk7XG4gICAgICAgIGF3YWl0IHJlZ2lzdGVyTm9kZSh7bXk6ICdjb25maWcnfSk7XG4gICAgICAgIEpTT04ucGFyc2Uuc2hvdWxkLm5vdC5oYXZlLmJlZW4uY2FsbGVkO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwiZmlsZSI6InRlc3QvZ3JpZC1yZWdpc3Rlci1zcGVjcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
