"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _logsink = require("../lib/logsink");

var _sinon = _interopRequireDefault(require("sinon"));

var _support = require("@appium/support");

const forceLogs = process.env._FORCE_LOGS;
process.env._FORCE_LOGS = 1;

const log = _support.logger.getLogger('Appium');

describe('logging', function () {
  let stderrSpy;
  let stdoutSpy;
  beforeEach(function () {
    stderrSpy = _sinon.default.spy(process.stderr, 'write');
    stdoutSpy = _sinon.default.spy(process.stdout, 'write');
    (0, _logsink.clear)();
  });
  afterEach(function () {
    stderrSpy.restore();
    stdoutSpy.restore();
  });
  after(function () {
    process.env._FORCE_LOGS = forceLogs;
  });
  const errorMsg = 'some error';
  const warnMsg = 'some warning';
  const debugMsg = 'some debug';

  function doLogging() {
    log.error(errorMsg);
    log.warn(warnMsg);
    log.debug(debugMsg);
  }

  it('should send error, info and debug when loglevel is debug', async function () {
    await (0, _logsink.init)({
      loglevel: 'debug'
    });
    doLogging();
    stderrSpy.callCount.should.equal(1);
    stderrSpy.args[0][0].should.include(errorMsg);
    stdoutSpy.callCount.should.equal(2);
    stdoutSpy.args[0][0].should.include(warnMsg);
    stdoutSpy.args[1][0].should.include(debugMsg);
  });
  it('should send error and info when loglevel is info', async function () {
    await (0, _logsink.init)({
      loglevel: 'info'
    });
    doLogging();
    stderrSpy.callCount.should.equal(1);
    stderrSpy.args[0][0].should.include(errorMsg);
    stdoutSpy.callCount.should.equal(1);
    stdoutSpy.args[0][0].should.include(warnMsg);
  });
  it('should send error when loglevel is error', async function () {
    await (0, _logsink.init)({
      loglevel: 'error'
    });
    doLogging();
    stderrSpy.callCount.should.equal(1);
    stderrSpy.args[0][0].should.include(errorMsg);
    stdoutSpy.callCount.should.equal(0);
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvbG9nZ2VyLXNwZWNzLmpzIl0sIm5hbWVzIjpbImZvcmNlTG9ncyIsInByb2Nlc3MiLCJlbnYiLCJfRk9SQ0VfTE9HUyIsImxvZyIsImxvZ2dlciIsImdldExvZ2dlciIsImRlc2NyaWJlIiwic3RkZXJyU3B5Iiwic3Rkb3V0U3B5IiwiYmVmb3JlRWFjaCIsInNpbm9uIiwic3B5Iiwic3RkZXJyIiwic3Rkb3V0IiwiYWZ0ZXJFYWNoIiwicmVzdG9yZSIsImFmdGVyIiwiZXJyb3JNc2ciLCJ3YXJuTXNnIiwiZGVidWdNc2ciLCJkb0xvZ2dpbmciLCJlcnJvciIsIndhcm4iLCJkZWJ1ZyIsIml0IiwibG9nbGV2ZWwiLCJjYWxsQ291bnQiLCJzaG91bGQiLCJlcXVhbCIsImFyZ3MiLCJpbmNsdWRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFJQSxNQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxXQUE5QjtBQUNBRixPQUFPLENBQUNDLEdBQVIsQ0FBWUMsV0FBWixHQUEwQixDQUExQjs7QUFDQSxNQUFNQyxHQUFHLEdBQUdDLGdCQUFPQyxTQUFQLENBQWlCLFFBQWpCLENBQVo7O0FBRUFDLFFBQVEsQ0FBQyxTQUFELEVBQVksWUFBWTtBQUM5QixNQUFJQyxTQUFKO0FBQ0EsTUFBSUMsU0FBSjtBQUNBQyxFQUFBQSxVQUFVLENBQUMsWUFBWTtBQUNyQkYsSUFBQUEsU0FBUyxHQUFHRyxlQUFNQyxHQUFOLENBQVVYLE9BQU8sQ0FBQ1ksTUFBbEIsRUFBMEIsT0FBMUIsQ0FBWjtBQUNBSixJQUFBQSxTQUFTLEdBQUdFLGVBQU1DLEdBQU4sQ0FBVVgsT0FBTyxDQUFDYSxNQUFsQixFQUEwQixPQUExQixDQUFaO0FBQ0E7QUFDRCxHQUpTLENBQVY7QUFLQUMsRUFBQUEsU0FBUyxDQUFDLFlBQVk7QUFDcEJQLElBQUFBLFNBQVMsQ0FBQ1EsT0FBVjtBQUNBUCxJQUFBQSxTQUFTLENBQUNPLE9BQVY7QUFDRCxHQUhRLENBQVQ7QUFJQUMsRUFBQUEsS0FBSyxDQUFDLFlBQVk7QUFDaEJoQixJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsV0FBWixHQUEwQkgsU0FBMUI7QUFDRCxHQUZJLENBQUw7QUFJQSxRQUFNa0IsUUFBUSxHQUFHLFlBQWpCO0FBQ0EsUUFBTUMsT0FBTyxHQUFHLGNBQWhCO0FBQ0EsUUFBTUMsUUFBUSxHQUFHLFlBQWpCOztBQUVBLFdBQVNDLFNBQVQsR0FBc0I7QUFDcEJqQixJQUFBQSxHQUFHLENBQUNrQixLQUFKLENBQVVKLFFBQVY7QUFDQWQsSUFBQUEsR0FBRyxDQUFDbUIsSUFBSixDQUFTSixPQUFUO0FBQ0FmLElBQUFBLEdBQUcsQ0FBQ29CLEtBQUosQ0FBVUosUUFBVjtBQUNEOztBQUVESyxFQUFBQSxFQUFFLENBQUMsMERBQUQsRUFBNkQsa0JBQWtCO0FBQy9FLFVBQU0sbUJBQVk7QUFBQ0MsTUFBQUEsUUFBUSxFQUFFO0FBQVgsS0FBWixDQUFOO0FBRUFMLElBQUFBLFNBQVM7QUFFVGIsSUFBQUEsU0FBUyxDQUFDbUIsU0FBVixDQUFvQkMsTUFBcEIsQ0FBMkJDLEtBQTNCLENBQWlDLENBQWpDO0FBQ0FyQixJQUFBQSxTQUFTLENBQUNzQixJQUFWLENBQWUsQ0FBZixFQUFrQixDQUFsQixFQUFxQkYsTUFBckIsQ0FBNEJHLE9BQTVCLENBQW9DYixRQUFwQztBQUVBVCxJQUFBQSxTQUFTLENBQUNrQixTQUFWLENBQW9CQyxNQUFwQixDQUEyQkMsS0FBM0IsQ0FBaUMsQ0FBakM7QUFDQXBCLElBQUFBLFNBQVMsQ0FBQ3FCLElBQVYsQ0FBZSxDQUFmLEVBQWtCLENBQWxCLEVBQXFCRixNQUFyQixDQUE0QkcsT0FBNUIsQ0FBb0NaLE9BQXBDO0FBQ0FWLElBQUFBLFNBQVMsQ0FBQ3FCLElBQVYsQ0FBZSxDQUFmLEVBQWtCLENBQWxCLEVBQXFCRixNQUFyQixDQUE0QkcsT0FBNUIsQ0FBb0NYLFFBQXBDO0FBQ0QsR0FYQyxDQUFGO0FBWUFLLEVBQUFBLEVBQUUsQ0FBQyxrREFBRCxFQUFxRCxrQkFBa0I7QUFDdkUsVUFBTSxtQkFBWTtBQUFDQyxNQUFBQSxRQUFRLEVBQUU7QUFBWCxLQUFaLENBQU47QUFFQUwsSUFBQUEsU0FBUztBQUVUYixJQUFBQSxTQUFTLENBQUNtQixTQUFWLENBQW9CQyxNQUFwQixDQUEyQkMsS0FBM0IsQ0FBaUMsQ0FBakM7QUFDQXJCLElBQUFBLFNBQVMsQ0FBQ3NCLElBQVYsQ0FBZSxDQUFmLEVBQWtCLENBQWxCLEVBQXFCRixNQUFyQixDQUE0QkcsT0FBNUIsQ0FBb0NiLFFBQXBDO0FBRUFULElBQUFBLFNBQVMsQ0FBQ2tCLFNBQVYsQ0FBb0JDLE1BQXBCLENBQTJCQyxLQUEzQixDQUFpQyxDQUFqQztBQUNBcEIsSUFBQUEsU0FBUyxDQUFDcUIsSUFBVixDQUFlLENBQWYsRUFBa0IsQ0FBbEIsRUFBcUJGLE1BQXJCLENBQTRCRyxPQUE1QixDQUFvQ1osT0FBcEM7QUFDRCxHQVZDLENBQUY7QUFXQU0sRUFBQUEsRUFBRSxDQUFDLDBDQUFELEVBQTZDLGtCQUFrQjtBQUMvRCxVQUFNLG1CQUFZO0FBQUNDLE1BQUFBLFFBQVEsRUFBRTtBQUFYLEtBQVosQ0FBTjtBQUVBTCxJQUFBQSxTQUFTO0FBRVRiLElBQUFBLFNBQVMsQ0FBQ21CLFNBQVYsQ0FBb0JDLE1BQXBCLENBQTJCQyxLQUEzQixDQUFpQyxDQUFqQztBQUNBckIsSUFBQUEsU0FBUyxDQUFDc0IsSUFBVixDQUFlLENBQWYsRUFBa0IsQ0FBbEIsRUFBcUJGLE1BQXJCLENBQTRCRyxPQUE1QixDQUFvQ2IsUUFBcEM7QUFFQVQsSUFBQUEsU0FBUyxDQUFDa0IsU0FBVixDQUFvQkMsTUFBcEIsQ0FBMkJDLEtBQTNCLENBQWlDLENBQWpDO0FBQ0QsR0FUQyxDQUFGO0FBVUQsQ0EzRE8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zcGlsZTptb2NoYVxuXG5pbXBvcnQgeyBpbml0IGFzIGxvZ3NpbmtJbml0LCBjbGVhciBhcyBsb2dzaW5rQ2xlYXIgfSBmcm9tICcuLi9saWIvbG9nc2luayc7XG5pbXBvcnQgc2lub24gZnJvbSAnc2lub24nO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQGFwcGl1bS9zdXBwb3J0JztcblxuXG4vLyB0ZW1wb3JhcmlseSB0dXJuIG9uIGxvZ2dpbmcgdG8gc3RkaW8sIHNvIHdlIGNhbiBjYXRjaCBhbmQgcXVlcnlcbmNvbnN0IGZvcmNlTG9ncyA9IHByb2Nlc3MuZW52Ll9GT1JDRV9MT0dTO1xucHJvY2Vzcy5lbnYuX0ZPUkNFX0xPR1MgPSAxO1xuY29uc3QgbG9nID0gbG9nZ2VyLmdldExvZ2dlcignQXBwaXVtJyk7XG5cbmRlc2NyaWJlKCdsb2dnaW5nJywgZnVuY3Rpb24gKCkge1xuICBsZXQgc3RkZXJyU3B5O1xuICBsZXQgc3Rkb3V0U3B5O1xuICBiZWZvcmVFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICBzdGRlcnJTcHkgPSBzaW5vbi5zcHkocHJvY2Vzcy5zdGRlcnIsICd3cml0ZScpO1xuICAgIHN0ZG91dFNweSA9IHNpbm9uLnNweShwcm9jZXNzLnN0ZG91dCwgJ3dyaXRlJyk7XG4gICAgbG9nc2lua0NsZWFyKCk7XG4gIH0pO1xuICBhZnRlckVhY2goZnVuY3Rpb24gKCkge1xuICAgIHN0ZGVyclNweS5yZXN0b3JlKCk7XG4gICAgc3Rkb3V0U3B5LnJlc3RvcmUoKTtcbiAgfSk7XG4gIGFmdGVyKGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5fRk9SQ0VfTE9HUyA9IGZvcmNlTG9ncztcbiAgfSk7XG5cbiAgY29uc3QgZXJyb3JNc2cgPSAnc29tZSBlcnJvcic7XG4gIGNvbnN0IHdhcm5Nc2cgPSAnc29tZSB3YXJuaW5nJztcbiAgY29uc3QgZGVidWdNc2cgPSAnc29tZSBkZWJ1Zyc7XG5cbiAgZnVuY3Rpb24gZG9Mb2dnaW5nICgpIHtcbiAgICBsb2cuZXJyb3IoZXJyb3JNc2cpO1xuICAgIGxvZy53YXJuKHdhcm5Nc2cpO1xuICAgIGxvZy5kZWJ1ZyhkZWJ1Z01zZyk7XG4gIH1cblxuICBpdCgnc2hvdWxkIHNlbmQgZXJyb3IsIGluZm8gYW5kIGRlYnVnIHdoZW4gbG9nbGV2ZWwgaXMgZGVidWcnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgYXdhaXQgbG9nc2lua0luaXQoe2xvZ2xldmVsOiAnZGVidWcnfSk7XG5cbiAgICBkb0xvZ2dpbmcoKTtcblxuICAgIHN0ZGVyclNweS5jYWxsQ291bnQuc2hvdWxkLmVxdWFsKDEpO1xuICAgIHN0ZGVyclNweS5hcmdzWzBdWzBdLnNob3VsZC5pbmNsdWRlKGVycm9yTXNnKTtcblxuICAgIHN0ZG91dFNweS5jYWxsQ291bnQuc2hvdWxkLmVxdWFsKDIpO1xuICAgIHN0ZG91dFNweS5hcmdzWzBdWzBdLnNob3VsZC5pbmNsdWRlKHdhcm5Nc2cpO1xuICAgIHN0ZG91dFNweS5hcmdzWzFdWzBdLnNob3VsZC5pbmNsdWRlKGRlYnVnTXNnKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgc2VuZCBlcnJvciBhbmQgaW5mbyB3aGVuIGxvZ2xldmVsIGlzIGluZm8nLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgYXdhaXQgbG9nc2lua0luaXQoe2xvZ2xldmVsOiAnaW5mbyd9KTtcblxuICAgIGRvTG9nZ2luZygpO1xuXG4gICAgc3RkZXJyU3B5LmNhbGxDb3VudC5zaG91bGQuZXF1YWwoMSk7XG4gICAgc3RkZXJyU3B5LmFyZ3NbMF1bMF0uc2hvdWxkLmluY2x1ZGUoZXJyb3JNc2cpO1xuXG4gICAgc3Rkb3V0U3B5LmNhbGxDb3VudC5zaG91bGQuZXF1YWwoMSk7XG4gICAgc3Rkb3V0U3B5LmFyZ3NbMF1bMF0uc2hvdWxkLmluY2x1ZGUod2Fybk1zZyk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIHNlbmQgZXJyb3Igd2hlbiBsb2dsZXZlbCBpcyBlcnJvcicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBhd2FpdCBsb2dzaW5rSW5pdCh7bG9nbGV2ZWw6ICdlcnJvcid9KTtcblxuICAgIGRvTG9nZ2luZygpO1xuXG4gICAgc3RkZXJyU3B5LmNhbGxDb3VudC5zaG91bGQuZXF1YWwoMSk7XG4gICAgc3RkZXJyU3B5LmFyZ3NbMF1bMF0uc2hvdWxkLmluY2x1ZGUoZXJyb3JNc2cpO1xuXG4gICAgc3Rkb3V0U3B5LmNhbGxDb3VudC5zaG91bGQuZXF1YWwoMCk7XG4gIH0pO1xufSk7XG4iXSwiZmlsZSI6InRlc3QvbG9nZ2VyLXNwZWNzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uIn0=
