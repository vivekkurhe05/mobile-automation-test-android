"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.W3C_PREFIXED_CAPS = exports.W3C_CAPS = exports.TEST_HOST = exports.TEST_FAKE_APP = exports.PROJECT_ROOT = exports.BASE_CAPS = void 0;
exports.getTestPort = getTestPort;
exports.resolveFixture = resolveFixture;
Object.defineProperty(exports, "rewiremock", {
  enumerable: true,
  get: function () {
    return _rewiremock.default;
  }
});

require("source-map-support/register");

var _rewiremock = _interopRequireWildcard(require("rewiremock"));

var _path = _interopRequireDefault(require("path"));

var _utils = require("../lib/utils");

var _getPort = _interopRequireDefault(require("get-port"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const TEST_HOST = '127.0.0.1';
exports.TEST_HOST = TEST_HOST;

const fakeDriverPath = _path.default.dirname(require.resolve('@appium/fake-driver/package.json'));

const PROJECT_ROOT = _path.default.join(fakeDriverPath, '..', '..');

exports.PROJECT_ROOT = PROJECT_ROOT;

const TEST_FAKE_APP = _path.default.join(fakeDriverPath, 'test', 'fixtures', 'app.xml');

exports.TEST_FAKE_APP = TEST_FAKE_APP;
const BASE_CAPS = {
  automationName: 'Fake',
  platformName: 'Fake',
  deviceName: 'Fake',
  app: TEST_FAKE_APP
};
exports.BASE_CAPS = BASE_CAPS;
const W3C_PREFIXED_CAPS = { ...(0, _utils.insertAppiumPrefixes)(BASE_CAPS)
};
exports.W3C_PREFIXED_CAPS = W3C_PREFIXED_CAPS;
const W3C_CAPS = {
  alwaysMatch: { ...W3C_PREFIXED_CAPS
  },
  firstMatch: [{}]
};
exports.W3C_CAPS = W3C_CAPS;
let TEST_PORT;

async function getTestPort() {
  return await (TEST_PORT || (0, _getPort.default)());
}

function resolveFixture(filename, ...pathParts) {
  return _path.default.join(__dirname, 'fixtures', filename, ...pathParts);
}

(0, _rewiremock.overrideEntryPoint)(module);
(0, _rewiremock.addPlugin)(_rewiremock.plugins.nodejs);
(0, _rewiremock.addPlugin)(_rewiremock.plugins.childOnly);require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvaGVscGVycy5qcyJdLCJuYW1lcyI6WyJURVNUX0hPU1QiLCJmYWtlRHJpdmVyUGF0aCIsInBhdGgiLCJkaXJuYW1lIiwicmVxdWlyZSIsInJlc29sdmUiLCJQUk9KRUNUX1JPT1QiLCJqb2luIiwiVEVTVF9GQUtFX0FQUCIsIkJBU0VfQ0FQUyIsImF1dG9tYXRpb25OYW1lIiwicGxhdGZvcm1OYW1lIiwiZGV2aWNlTmFtZSIsImFwcCIsIlczQ19QUkVGSVhFRF9DQVBTIiwiVzNDX0NBUFMiLCJhbHdheXNNYXRjaCIsImZpcnN0TWF0Y2giLCJURVNUX1BPUlQiLCJnZXRUZXN0UG9ydCIsInJlc29sdmVGaXh0dXJlIiwiZmlsZW5hbWUiLCJwYXRoUGFydHMiLCJfX2Rpcm5hbWUiLCJtb2R1bGUiLCJwbHVnaW5zIiwibm9kZWpzIiwiY2hpbGRPbmx5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBLE1BQU1BLFNBQVMsR0FBRyxXQUFsQjs7O0FBRUEsTUFBTUMsY0FBYyxHQUFHQyxjQUFLQyxPQUFMLENBQWFDLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQixrQ0FBaEIsQ0FBYixDQUF2Qjs7QUFDQSxNQUFNQyxZQUFZLEdBQUdKLGNBQUtLLElBQUwsQ0FBVU4sY0FBVixFQUEwQixJQUExQixFQUFnQyxJQUFoQyxDQUFyQjs7OztBQUNBLE1BQU1PLGFBQWEsR0FBR04sY0FBS0ssSUFBTCxDQUFVTixjQUFWLEVBQTBCLE1BQTFCLEVBQWtDLFVBQWxDLEVBQThDLFNBQTlDLENBQXRCOzs7QUFFQSxNQUFNUSxTQUFTLEdBQUc7QUFDaEJDLEVBQUFBLGNBQWMsRUFBRSxNQURBO0FBRWhCQyxFQUFBQSxZQUFZLEVBQUUsTUFGRTtBQUdoQkMsRUFBQUEsVUFBVSxFQUFFLE1BSEk7QUFJaEJDLEVBQUFBLEdBQUcsRUFBRUw7QUFKVyxDQUFsQjs7QUFNQSxNQUFNTSxpQkFBaUIsR0FBRyxFQUFDLEdBQUcsaUNBQXFCTCxTQUFyQjtBQUFKLENBQTFCOztBQUNBLE1BQU1NLFFBQVEsR0FBRztBQUNmQyxFQUFBQSxXQUFXLEVBQUUsRUFBQyxHQUFHRjtBQUFKLEdBREU7QUFFZkcsRUFBQUEsVUFBVSxFQUFFLENBQUMsRUFBRDtBQUZHLENBQWpCOztBQUtBLElBQUlDLFNBQUo7O0FBS0EsZUFBZUMsV0FBZixHQUE4QjtBQUM1QixTQUFPLE9BQU9ELFNBQVMsSUFBSSx1QkFBcEIsQ0FBUDtBQUNEOztBQVFELFNBQVNFLGNBQVQsQ0FBeUJDLFFBQXpCLEVBQW1DLEdBQUdDLFNBQXRDLEVBQWlEO0FBQy9DLFNBQU9wQixjQUFLSyxJQUFMLENBQVVnQixTQUFWLEVBQXFCLFVBQXJCLEVBQWlDRixRQUFqQyxFQUEyQyxHQUFHQyxTQUE5QyxDQUFQO0FBQ0Q7O0FBRUQsb0NBQW1CRSxNQUFuQjtBQUNBLDJCQUFVQyxvQkFBUUMsTUFBbEI7QUFDQSwyQkFBVUQsb0JBQVFFLFNBQWxCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJld2lyZW1vY2ssIHthZGRQbHVnaW4sIG92ZXJyaWRlRW50cnlQb2ludCwgcGx1Z2luc30gZnJvbSAncmV3aXJlbW9jayc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7aW5zZXJ0QXBwaXVtUHJlZml4ZXN9IGZyb20gJy4uL2xpYi91dGlscyc7XG5pbXBvcnQgZ2V0UG9ydCBmcm9tICdnZXQtcG9ydCc7XG5cbmNvbnN0IFRFU1RfSE9TVCA9ICcxMjcuMC4wLjEnO1xuXG5jb25zdCBmYWtlRHJpdmVyUGF0aCA9IHBhdGguZGlybmFtZShyZXF1aXJlLnJlc29sdmUoJ0BhcHBpdW0vZmFrZS1kcml2ZXIvcGFja2FnZS5qc29uJykpO1xuY29uc3QgUFJPSkVDVF9ST09UID0gcGF0aC5qb2luKGZha2VEcml2ZXJQYXRoLCAnLi4nLCAnLi4nKTtcbmNvbnN0IFRFU1RfRkFLRV9BUFAgPSBwYXRoLmpvaW4oZmFrZURyaXZlclBhdGgsICd0ZXN0JywgJ2ZpeHR1cmVzJywgJ2FwcC54bWwnKTtcblxuY29uc3QgQkFTRV9DQVBTID0ge1xuICBhdXRvbWF0aW9uTmFtZTogJ0Zha2UnLFxuICBwbGF0Zm9ybU5hbWU6ICdGYWtlJyxcbiAgZGV2aWNlTmFtZTogJ0Zha2UnLFxuICBhcHA6IFRFU1RfRkFLRV9BUFBcbn07XG5jb25zdCBXM0NfUFJFRklYRURfQ0FQUyA9IHsuLi5pbnNlcnRBcHBpdW1QcmVmaXhlcyhCQVNFX0NBUFMpfTtcbmNvbnN0IFczQ19DQVBTID0ge1xuICBhbHdheXNNYXRjaDogey4uLlczQ19QUkVGSVhFRF9DQVBTfSxcbiAgZmlyc3RNYXRjaDogW3t9XSxcbn07XG5cbmxldCBURVNUX1BPUlQ7XG4vKipcbiAqIFJldHVybnMgYSBmcmVlIHBvcnQ7IG9uZSBwZXIgcHJvY2Vzc1xuICogQHJldHVybnMge1Byb21pc2U8bnVtYmVyPn0gYSBmcmVlIHBvcnRcbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0VGVzdFBvcnQgKCkge1xuICByZXR1cm4gYXdhaXQgKFRFU1RfUE9SVCB8fCBnZXRQb3J0KCkpO1xufVxuXG4vKipcbiAqIFJlc29sdmUgYSBmaWxlIHJlbGF0aXZlIHRvIHRoZSBgZml4dHVyZXNgIGRpclxuICogQHBhcmFtIHtzdHJpbmd9IGZpbGVuYW1lIC0gRmlsZW5hbWUgdG8gcmVzb2x2ZVxuICogQHBhcmFtIHsuLi5zdHJpbmd9IFtwYXRoUGFydHNdIC0gQWRkaXRpb25hbCBwYXRocyB0byBgam9pbigpYFxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUZpeHR1cmUgKGZpbGVuYW1lLCAuLi5wYXRoUGFydHMpIHtcbiAgcmV0dXJuIHBhdGguam9pbihfX2Rpcm5hbWUsICdmaXh0dXJlcycsIGZpbGVuYW1lLCAuLi5wYXRoUGFydHMpO1xufVxuXG5vdmVycmlkZUVudHJ5UG9pbnQobW9kdWxlKTtcbmFkZFBsdWdpbihwbHVnaW5zLm5vZGVqcyk7XG5hZGRQbHVnaW4ocGx1Z2lucy5jaGlsZE9ubHkpO1xuXG5leHBvcnQgeyBURVNUX0ZBS0VfQVBQLCBURVNUX0hPU1QsIEJBU0VfQ0FQUywgVzNDX1BSRUZJWEVEX0NBUFMsIFczQ19DQVBTLCBQUk9KRUNUX1JPT1QsIGdldFRlc3RQb3J0LCByZXdpcmVtb2NrLCByZXNvbHZlRml4dHVyZSB9O1xuIl0sImZpbGUiOiJ0ZXN0L2hlbHBlcnMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
