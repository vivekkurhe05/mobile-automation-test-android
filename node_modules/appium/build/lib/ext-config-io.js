"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getExtConfigIOInstance = exports.PLUGIN_TYPE = exports.DRIVER_TYPE = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

require("source-map-support/register");

var _support = require("@appium/support");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _yaml = _interopRequireDefault(require("yaml"));

const CONFIG_FILE_NAME = 'extensions.yaml';
const CONFIG_SCHEMA_REV = 2;
const DRIVER_TYPE = 'driver';
exports.DRIVER_TYPE = DRIVER_TYPE;
const PLUGIN_TYPE = 'plugin';
exports.PLUGIN_TYPE = PLUGIN_TYPE;
const VALID_EXT_TYPES = new Set([DRIVER_TYPE, PLUGIN_TYPE]);
const CONFIG_DATA_DRIVER_KEY = `${DRIVER_TYPE}s`;
const CONFIG_DATA_PLUGIN_KEY = `${PLUGIN_TYPE}s`;

class ExtConfigIO {
  constructor(appiumHome) {
    (0, _defineProperty2.default)(this, "_dirty", void 0);
    (0, _defineProperty2.default)(this, "_data", void 0);
    (0, _defineProperty2.default)(this, "_extDataByType", new Map());
    (0, _defineProperty2.default)(this, "_filepath", void 0);
    (0, _defineProperty2.default)(this, "_appiumHome", void 0);
    (0, _defineProperty2.default)(this, "_writing", null);
    (0, _defineProperty2.default)(this, "_reading", null);
    this._filepath = _path.default.resolve(appiumHome, CONFIG_FILE_NAME);
    this._appiumHome = appiumHome;
  }

  _createProxy(extensionType, data) {
    return new Proxy(data[`${extensionType}s`], {
      set: (target, prop, value) => {
        if (value !== target[prop]) {
          this._dirty = true;
        }

        target[prop] = value;
        return Reflect.set(target, prop, value);
      },
      deleteProperty: (target, prop) => {
        if (prop in target) {
          this._dirty = true;
        }

        return Reflect.deleteProperty(target, prop);
      }
    });
  }

  get filepath() {
    return this._filepath;
  }

  async read(extensionType) {
    if (this._reading) {
      await this._reading;
      return this._extDataByType.get(extensionType);
    }

    this._reading = (async () => {
      if (!VALID_EXT_TYPES.has(extensionType)) {
        throw new TypeError(`Invalid extension type: ${extensionType}. Valid values are: ${[...VALID_EXT_TYPES].join(', ')}`);
      }

      if (this._extDataByType.has(extensionType)) {
        return;
      }

      let data;
      let isNewFile = false;

      try {
        await (0, _support.mkdirp)(this._appiumHome);
        const yaml = await _support.fs.readFile(this.filepath, 'utf8');
        data = _yaml.default.parse(yaml);
      } catch (err) {
        if (err.code === 'ENOENT') {
          data = {
            [CONFIG_DATA_DRIVER_KEY]: {},
            [CONFIG_DATA_PLUGIN_KEY]: {},
            schemaRev: CONFIG_SCHEMA_REV
          };
          isNewFile = true;
        } else {
          throw new Error(`Appium had trouble loading the extension installation ` + `cache file (${this.filepath}). Ensure it exists and is ` + `readable. Specific error: ${err.message}`);
        }
      }

      this._data = data;

      this._extDataByType.set(DRIVER_TYPE, this._createProxy(DRIVER_TYPE, data));

      this._extDataByType.set(PLUGIN_TYPE, this._createProxy(PLUGIN_TYPE, data));

      if (isNewFile) {
        await this.write(true);
      }
    })();

    try {
      await this._reading;
      return this._extDataByType.get(extensionType);
    } finally {
      this._reading = null;
    }
  }

  async write(force = false) {
    if (this._writing) {
      return this._writing;
    }

    this._writing = (async () => {
      try {
        if (!this._dirty && !force) {
          return false;
        }

        if (!this._data) {
          throw new ReferenceError('No data to write. Call `read()` first');
        }

        const dataToWrite = { ...this._data,
          [CONFIG_DATA_DRIVER_KEY]: this._extDataByType.get(DRIVER_TYPE),
          [CONFIG_DATA_PLUGIN_KEY]: this._extDataByType.get(PLUGIN_TYPE)
        };

        try {
          await _support.fs.writeFile(this.filepath, _yaml.default.stringify(dataToWrite), 'utf8');
          this._dirty = false;
          return true;
        } catch {
          throw new Error(`Appium could not parse or write from the Appium Home directory ` + `(${this._appiumHome}). Please ensure it is writable.`);
        }
      } finally {
        this._writing = null;
      }
    })();

    return await this._writing;
  }

}

const getExtConfigIOInstance = _lodash.default.memoize(appiumHome => new ExtConfigIO(appiumHome));

exports.getExtConfigIOInstance = getExtConfigIOInstance;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
