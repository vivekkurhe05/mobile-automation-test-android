"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReadonlyMap = void 0;
exports.getPackageVersion = getPackageVersion;
exports.insertAppiumPrefixes = insertAppiumPrefixes;
exports.inspect = void 0;
exports.parseCapsForInnerDriver = parseCapsForInnerDriver;
exports.pullSettings = pullSettings;
exports.removeAppiumPrefixes = removeAppiumPrefixes;
exports.rootDir = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _baseDriver = require("@appium/base-driver");

var _support = require("@appium/support");

var _util = require("util");

const W3C_APPIUM_PREFIX = 'appium';
const isStdoutTTY = process.stdout.isTTY;

const inspect = _lodash.default.flow(_lodash.default.partialRight(_util.inspect, {
  colors: true,
  depth: null,
  compact: !isStdoutTTY
}), (...args) => {
  _logger.default.info(...args);
});

exports.inspect = inspect;

function parseCapsForInnerDriver(jsonwpCapabilities, w3cCapabilities, constraints = {}, defaultCapabilities = {}) {
  const hasW3CCaps = _lodash.default.isPlainObject(w3cCapabilities) && (_lodash.default.has(w3cCapabilities, 'alwaysMatch') || _lodash.default.has(w3cCapabilities, 'firstMatch'));

  const hasJSONWPCaps = _lodash.default.isPlainObject(jsonwpCapabilities);

  let desiredCaps = {};
  let processedW3CCapabilities = null;
  let processedJsonwpCapabilities = null;

  if (!hasW3CCaps) {
    return {
      protocol: _baseDriver.PROTOCOLS.W3C,
      error: new Error('W3C capabilities should be provided')
    };
  }

  const {
    W3C
  } = _baseDriver.PROTOCOLS;
  const protocol = W3C;
  jsonwpCapabilities = _lodash.default.cloneDeep(jsonwpCapabilities);
  w3cCapabilities = _lodash.default.cloneDeep(w3cCapabilities);
  defaultCapabilities = _lodash.default.cloneDeep(defaultCapabilities);

  if (!_lodash.default.isEmpty(defaultCapabilities)) {
    if (hasW3CCaps) {
      for (const [defaultCapKey, defaultCapValue] of _lodash.default.toPairs(defaultCapabilities)) {
        let isCapAlreadySet = false;

        for (const firstMatchEntry of w3cCapabilities.firstMatch || []) {
          if (_lodash.default.isPlainObject(firstMatchEntry) && _lodash.default.has(removeAppiumPrefixes(firstMatchEntry), removeAppiumPrefix(defaultCapKey))) {
            isCapAlreadySet = true;
            break;
          }
        }

        isCapAlreadySet = isCapAlreadySet || _lodash.default.isPlainObject(w3cCapabilities.alwaysMatch) && _lodash.default.has(removeAppiumPrefixes(w3cCapabilities.alwaysMatch), removeAppiumPrefix(defaultCapKey));

        if (isCapAlreadySet) {
          continue;
        }

        if (_lodash.default.isEmpty(w3cCapabilities.firstMatch)) {
          w3cCapabilities.firstMatch = [{
            [defaultCapKey]: defaultCapValue
          }];
        } else {
          w3cCapabilities.firstMatch[0][defaultCapKey] = defaultCapValue;
        }
      }
    }

    if (hasJSONWPCaps) {
      jsonwpCapabilities = Object.assign({}, removeAppiumPrefixes(defaultCapabilities), jsonwpCapabilities);
    }
  }

  if (hasJSONWPCaps) {
    processedJsonwpCapabilities = { ...jsonwpCapabilities
    };
  }

  if (hasW3CCaps) {
    try {
      desiredCaps = (0, _baseDriver.processCapabilities)(w3cCapabilities, constraints, true);
    } catch (error) {
      _logger.default.info(`Could not parse W3C capabilities: ${error.message}`);

      return {
        desiredCaps,
        processedJsonwpCapabilities,
        processedW3CCapabilities,
        protocol,
        error
      };
    }

    processedW3CCapabilities = {
      alwaysMatch: { ...insertAppiumPrefixes(desiredCaps)
      },
      firstMatch: [{}]
    };
  }

  return {
    desiredCaps,
    processedJsonwpCapabilities,
    processedW3CCapabilities,
    protocol
  };
}

function insertAppiumPrefixes(caps) {
  const STANDARD_CAPS = ['browserName', 'browserVersion', 'platformName', 'acceptInsecureCerts', 'pageLoadStrategy', 'proxy', 'setWindowRect', 'timeouts', 'unhandledPromptBehavior'];
  let prefixedCaps = {};

  for (let [name, value] of _lodash.default.toPairs(caps)) {
    if (STANDARD_CAPS.includes(name) || name.includes(':')) {
      prefixedCaps[name] = value;
    } else {
      prefixedCaps[`${W3C_APPIUM_PREFIX}:${name}`] = value;
    }
  }

  return prefixedCaps;
}

function removeAppiumPrefixes(caps) {
  if (!_lodash.default.isPlainObject(caps)) {
    return caps;
  }

  const fixedCaps = {};

  for (let [name, value] of _lodash.default.toPairs(caps)) {
    fixedCaps[removeAppiumPrefix(name)] = value;
  }

  return fixedCaps;
}

function removeAppiumPrefix(key) {
  const prefix = `${W3C_APPIUM_PREFIX}:`;
  return _lodash.default.startsWith(key, prefix) ? key.substring(prefix.length) : key;
}

function getPackageVersion(pkgName) {
  const pkgInfo = require(`${pkgName}/package.json`) || {};
  return pkgInfo.version;
}

function pullSettings(caps) {
  if (!_lodash.default.isPlainObject(caps) || _lodash.default.isEmpty(caps)) {
    return {};
  }

  const result = {};

  for (const [key, value] of _lodash.default.toPairs(caps)) {
    const match = /\bsettings\[(\S+)\]$/.exec(key);

    if (!match) {
      continue;
    }

    result[match[1]] = value;
    delete caps[key];
  }

  return result;
}

const rootDir = _support.fs.findRoot(__dirname);

exports.rootDir = rootDir;

class ReadonlyMap extends Map {
  set(key, value) {
    if (this.has(key)) {
      throw new Error(`${key} is already set`);
    }

    return super.set(key, value);
  }

  delete() {
    return false;
  }

  clear() {
    throw new Error(`Cannot clear ReadonlyMap`);
  }

}

exports.ReadonlyMap = ReadonlyMap;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
