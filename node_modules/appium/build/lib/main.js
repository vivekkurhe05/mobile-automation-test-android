#!/usr/bin/env node
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "APPIUM_HOME", {
  enumerable: true,
  get: function () {
    return _extensionConfig.APPIUM_HOME;
  }
});
Object.defineProperty(exports, "finalizeSchema", {
  enumerable: true,
  get: function () {
    return _schema.finalizeSchema;
  }
});
Object.defineProperty(exports, "getSchema", {
  enumerable: true,
  get: function () {
    return _schema.getSchema;
  }
});
exports.init = init;
exports.main = main;
Object.defineProperty(exports, "readConfigFile", {
  enumerable: true,
  get: function () {
    return _configFile.readConfigFile;
  }
});
Object.defineProperty(exports, "validate", {
  enumerable: true,
  get: function () {
    return _schema.validate;
  }
});

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _baseDriver = require("@appium/base-driver");

var _support = require("@appium/support");

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

var _appium = require("./appium");

var _args = require("./cli/args");

var _extension = require("./cli/extension");

var _parser = _interopRequireWildcard(require("./cli/parser"));

var _config = require("./config");

var _configFile = require("./config-file");

var _extensionConfig = require("./extension-config");

var _gridRegister = _interopRequireDefault(require("./grid-register"));

var _logsink = require("./logsink");

var _schema = require("./schema/schema");

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

async function preflightChecks(args, throwInsteadOfExit = false) {
  try {
    (0, _config.checkNodeOk)();

    if (args.longStacktrace) {
      require('longjohn').async_trace_limit = -1;
    }

    if (args.showBuildInfo) {
      await (0, _config.showBuildInfo)();
      process.exit(0);
    }

    (0, _config.warnNodeDeprecations)();

    if (args.tmpDir) {
      await (0, _config.validateTmpDir)(args.tmpDir);
    }
  } catch (err) {
    _logger.default.error(err.message.red);

    if (throwInsteadOfExit) {
      throw err;
    }

    process.exit(1);
  }
}

function logNonDefaultArgsWarning(args) {
  _logger.default.info('Non-default server args:');

  (0, _utils.inspect)(args);
}

function logDefaultCapabilitiesWarning(caps) {
  _logger.default.info('Default capabilities, which will be added to each request ' + 'unless overridden by desired capabilities:');

  (0, _utils.inspect)(caps);
}

async function logStartupInfo(args) {
  let welcome = `Welcome to Appium v${_config.APPIUM_VER}`;
  let appiumRev = await (0, _config.getGitRev)();

  if (appiumRev) {
    welcome += ` (REV ${appiumRev})`;
  }

  _logger.default.info(welcome);

  let showArgs = (0, _config.getNonDefaultServerArgs)(args);

  if (_lodash.default.size(showArgs)) {
    logNonDefaultArgsWarning(showArgs);
  }

  if (!_lodash.default.isEmpty(args.defaultCapabilities)) {
    logDefaultCapabilitiesWarning(args.defaultCapabilities);
  }
}

function logServerPort(address, port) {
  let logMessage = `Appium REST http interface listener started on ` + `${address}:${port}`;

  _logger.default.info(logMessage);
}

function getActivePlugins(args, pluginConfig) {
  return _lodash.default.compact(Object.keys(pluginConfig.installedExtensions).filter(pluginName => _lodash.default.includes(args.usePlugins, pluginName) || args.usePlugins.length === 1 && args.usePlugins[0] === _args.USE_ALL_PLUGINS).map(pluginName => {
    try {
      _logger.default.info(`Attempting to load plugin ${pluginName}...`);

      const PluginClass = pluginConfig.require(pluginName);

      PluginClass.pluginName = pluginName;
      return PluginClass;
    } catch (err) {
      _logger.default.error(`Could not load plugin '${pluginName}', so it will not be available. Error ` + `in loading the plugin was: ${err.message}`);

      _logger.default.debug(err.stack);
    }
  }));
}

function getActiveDrivers(args, driverConfig) {
  return _lodash.default.compact(Object.keys(driverConfig.installedExtensions).filter(driverName => _lodash.default.includes(args.useDrivers, driverName) || args.useDrivers.length === 0).map(driverName => {
    try {
      _logger.default.info(`Attempting to load driver ${driverName}...`);

      return driverConfig.require(driverName);
    } catch (err) {
      _logger.default.error(`Could not load driver '${driverName}', so it will not be available. Error ` + `in loading the driver was: ${err.message}`);

      _logger.default.debug(err.stack);
    }
  }));
}

function getServerUpdaters(driverClasses, pluginClasses) {
  return _lodash.default.compact(_lodash.default.map([...driverClasses, ...pluginClasses], 'updateServer'));
}

function getExtraMethodMap(driverClasses, pluginClasses) {
  return [...driverClasses, ...pluginClasses].reduce((map, klass) => ({ ...map,
    ...klass.newMethodMap
  }), {});
}

async function init(args) {
  const parser = await (0, _parser.default)();
  let throwInsteadOfExit = false;
  let preConfigParsedArgs;
  let parsedArgs;
  let defaults = {};

  if (args) {
    var _args$subcommand;

    if (args.throwInsteadOfExit) {
      throwInsteadOfExit = true;
      delete args.throwInsteadOfExit;
    }

    preConfigParsedArgs = { ...args,
      subcommand: (_args$subcommand = args.subcommand) !== null && _args$subcommand !== void 0 ? _args$subcommand : _parser.SERVER_SUBCOMMAND
    };
  } else {
    preConfigParsedArgs = parser.parseArgs();
  }

  const configResult = await (0, _configFile.readConfigFile)(preConfigParsedArgs.configFile);

  if (!_lodash.default.isEmpty(configResult.errors)) {
    var _configResult$reason;

    throw new Error(`Errors in config file ${configResult.filepath}:\n ${(_configResult$reason = configResult.reason) !== null && _configResult$reason !== void 0 ? _configResult$reason : configResult.errors}`);
  }

  if (preConfigParsedArgs.subcommand === _parser.SERVER_SUBCOMMAND) {
    var _configResult$config;

    defaults = (0, _schema.getDefaultsForSchema)(false);
    parsedArgs = _lodash.default.defaultsDeep(preConfigParsedArgs, (_configResult$config = configResult.config) === null || _configResult$config === void 0 ? void 0 : _configResult$config.server, defaults);

    if (preConfigParsedArgs.showConfig) {
      (0, _config.showConfig)((0, _config.getNonDefaultServerArgs)(preConfigParsedArgs), configResult, defaults, parsedArgs);
      return {};
    }
  } else {
    parsedArgs = preConfigParsedArgs;
  }

  await (0, _logsink.init)(parsedArgs);

  if (parsedArgs.subcommand === _extensionConfig.DRIVER_TYPE) {
    await (0, _extension.runExtensionCommand)(parsedArgs, parsedArgs.subcommand, _args.driverConfig);
    return {};
  }

  if (parsedArgs.subcommand === _extensionConfig.PLUGIN_TYPE) {
    await (0, _extension.runExtensionCommand)(parsedArgs, parsedArgs.subcommand, _args.pluginConfig);
    return {};
  }

  if (parsedArgs.logFilters) {
    const {
      issues,
      rules
    } = await _support.logger.loadSecureValuesPreprocessingRules(parsedArgs.logFilters);

    if (!_lodash.default.isEmpty(issues)) {
      throw new Error(`The log filtering rules config '${parsedArgs.logFilters}' has issues: ` + JSON.stringify(issues, null, 2));
    }

    if (_lodash.default.isEmpty(rules)) {
      _logger.default.warn(`Found no log filtering rules in '${parsedArgs.logFilters}'. Is that expected?`);
    } else {
      _logger.default.info(`Loaded ${_support.util.pluralize('filtering rule', rules.length, true)} from '${parsedArgs.logFilters}'`);
    }
  }

  const appiumDriver = new _appium.AppiumDriver(parsedArgs);
  appiumDriver.driverConfig = _args.driverConfig;
  await preflightChecks(parsedArgs, throwInsteadOfExit);
  return {
    appiumDriver,
    parsedArgs
  };
}

async function main(args) {
  const {
    appiumDriver,
    parsedArgs
  } = await init(args);

  if (!appiumDriver || !parsedArgs) {
    return;
  }

  const pluginClasses = getActivePlugins(parsedArgs, _args.pluginConfig);
  appiumDriver.pluginClasses = pluginClasses;
  await logStartupInfo(parsedArgs);
  let routeConfiguringFunction = (0, _baseDriver.routeConfiguringFunction)(appiumDriver);
  const driverClasses = getActiveDrivers(parsedArgs, _args.driverConfig);
  const serverUpdaters = getServerUpdaters(driverClasses, pluginClasses);
  const extraMethodMap = getExtraMethodMap(driverClasses, pluginClasses);
  const serverOpts = {
    routeConfiguringFunction,
    port: parsedArgs.port,
    hostname: parsedArgs.address,
    allowCors: parsedArgs.allowCors,
    basePath: parsedArgs.basePath,
    serverUpdaters,
    extraMethodMap
  };

  if (parsedArgs.keepAliveTimeout) {
    serverOpts.keepAliveTimeout = parsedArgs.keepAliveTimeout * 1000;
  }

  let server;

  try {
    server = await (0, _baseDriver.server)(serverOpts);
  } catch (err) {
    _logger.default.error(`Could not configure Appium server. It's possible that a driver or plugin tried ` + `to update the server and failed. Original error: ${err.message}`);

    _logger.default.debug(err.stack);

    return process.exit(1);
  }

  if (parsedArgs.allowCors) {
    _logger.default.warn('You have enabled CORS requests from any host. Be careful not ' + 'to visit sites which could maliciously try to start Appium ' + 'sessions on your machine');
  }

  appiumDriver.server = server;

  try {
    if (parsedArgs.nodeconfig) {
      await (0, _gridRegister.default)(parsedArgs.nodeconfig, parsedArgs.address, parsedArgs.port, parsedArgs.basePath);
    }
  } catch (err) {
    await server.close();
    throw err;
  }

  for (const signal of ['SIGINT', 'SIGTERM']) {
    process.once(signal, async function onSignal() {
      _logger.default.info(`Received ${signal} - shutting down`);

      try {
        await appiumDriver.deleteAllSessions({
          force: true,
          reason: `The process has received ${signal} signal`
        });
        await server.close();
        process.exit(0);
      } catch (e) {
        _logger.default.warn(e);

        process.exit(1);
      }
    });
  }

  logServerPort(parsedArgs.address, parsedArgs.port);

  _args.driverConfig.print();

  _args.pluginConfig.print(pluginClasses.map(p => p.pluginName));

  return server;
}

if (require.main === module) {
  (0, _asyncbox.asyncify)(main);
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
