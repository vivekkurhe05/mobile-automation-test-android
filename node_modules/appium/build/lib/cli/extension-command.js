"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _npm = _interopRequireDefault(require("./npm"));

var _path = _interopRequireDefault(require("path"));

var _support = require("@appium/support");

var _utils = require("./utils");

var _teen_process = require("teen_process");

var _extensionConfig = require("../extension-config");

const UPDATE_ALL = 'installed';

class NotUpdatableError extends Error {}

class NoUpdatesAvailableError extends Error {}

class ExtensionCommand {
  constructor({
    config,
    json,
    type
  }) {
    this.config = config;
    this.type = type;
    this.isJsonOutput = json;
    this.npm = new _npm.default(this.config.appiumHome);
    this.knownExtensions = {};
  }

  async execute(args) {
    const cmd = args[`${this.type}Command`];

    if (!_lodash.default.isFunction(ExtensionCommand.prototype[cmd])) {
      throw new Error(`Cannot handle ${this.type} command ${cmd}`);
    }

    const executeCmd = this[cmd].bind(this);
    return await executeCmd(args);
  }

  async list({
    showInstalled,
    showUpdates
  }) {
    const lsMsg = `Listing ${showInstalled ? 'installed' : 'available'} ${this.type}s`;
    const installedNames = Object.keys(this.config.installedExtensions);
    const knownNames = Object.keys(this.knownExtensions);
    const exts = [...installedNames, ...knownNames].reduce((acc, name) => {
      if (!acc[name]) {
        if (installedNames.includes(name)) {
          acc[name] = { ...this.config.installedExtensions[name],
            installed: true
          };
        } else if (!showInstalled) {
          acc[name] = {
            pkgName: this.knownExtensions[name],
            installed: false
          };
        }
      }

      return acc;
    }, {});
    await (0, _utils.spinWith)(this.isJsonOutput, lsMsg, async () => {
      if (!showUpdates) {
        return;
      }

      for (const [ext, data] of _lodash.default.toPairs(exts)) {
        const {
          installed,
          installType
        } = data;

        if (!installed || installType !== _extensionConfig.INSTALL_TYPE_NPM) {
          continue;
        }

        const updates = await this.checkForExtensionUpdate(ext);
        data.updateVersion = updates.safeUpdate;
        data.unsafeUpdateVersion = updates.unsafeUpdate;
        data.upToDate = updates.safeUpdate === null && updates.unsafeUpdate === null;
      }
    });

    if (this.isJsonOutput) {
      return exts;
    }

    for (const [name, {
      installType,
      installSpec,
      installed,
      updateVersion,
      unsafeUpdateVersion,
      version,
      upToDate
    }] of _lodash.default.toPairs(exts)) {
      let typeTxt;

      switch (installType) {
        case _extensionConfig.INSTALL_TYPE_GIT:
        case _extensionConfig.INSTALL_TYPE_GITHUB:
          typeTxt = `(cloned from ${installSpec})`.yellow;
          break;

        case _extensionConfig.INSTALL_TYPE_LOCAL:
          typeTxt = `(linked from ${installSpec})`.magenta;
          break;

        default:
          typeTxt = '(NPM)';
      }

      const installTxt = installed ? `@${version.yellow} ${('[installed ' + typeTxt + ']').green}` : ' [not installed]'.grey;
      const updateTxt = showUpdates && updateVersion ? ` [${updateVersion} available]`.magenta : '';
      const upToDateTxt = showUpdates && upToDate ? ` [Up to date]`.green : '';
      const unsafeUpdateTxt = showUpdates && unsafeUpdateVersion ? ` [${unsafeUpdateVersion} available (potentially unsafe)]`.cyan : '';
      console.log(`- ${name.yellow}${installTxt}${updateTxt}${upToDateTxt}${unsafeUpdateTxt}`);
    }

    return exts;
  }

  async install({
    ext,
    installType,
    packageName
  }) {
    (0, _utils.log)(this.isJsonOutput, `Attempting to find and install ${this.type} '${ext}'`);
    let extData;
    let installSpec = ext;

    if (packageName && [_extensionConfig.INSTALL_TYPE_LOCAL, _extensionConfig.INSTALL_TYPE_NPM].includes(installType)) {
      throw new Error(`When using --source=${installType}, cannot also use --package`);
    }

    if (!packageName && [_extensionConfig.INSTALL_TYPE_GIT, _extensionConfig.INSTALL_TYPE_GITHUB].includes(installType)) {
      throw new Error(`When using --source=${installType}, must also use --package`);
    }

    if (installType === _extensionConfig.INSTALL_TYPE_LOCAL) {
      const msg = `Linking ${this.type} from local path`;
      const pkgJsonData = await (0, _utils.spinWith)(this.isJsonOutput, msg, async () => await this.npm.linkPackage(installSpec));
      extData = this.getExtensionFields(pkgJsonData);
      extData.installPath = extData.pkgName;
    } else if (installType === _extensionConfig.INSTALL_TYPE_GITHUB) {
      if (installSpec.split('/').length !== 2) {
        throw new Error(`Github ${this.type} spec ${installSpec} appeared to be invalid; ` + 'it should be of the form <org>/<repo>');
      }

      extData = await this.installViaNpm({
        ext: installSpec,
        pkgName: packageName
      });
    } else if (installType === _extensionConfig.INSTALL_TYPE_GIT) {
      installSpec = installSpec.replace(/\.git$/, '');
      extData = await this.installViaNpm({
        ext: installSpec,
        pkgName: packageName
      });
    } else {
      let name, pkgVer;
      const splits = installSpec.split('@');

      if (installSpec[0] === '@') {
        [name, pkgVer] = [`@${splits[1]}`, splits[2]];
      } else {
        [name, pkgVer] = splits;
      }

      let pkgName;

      if (installType === _extensionConfig.INSTALL_TYPE_NPM) {
        pkgName = name;
      } else {
        const knownNames = Object.keys(this.knownExtensions);

        if (!_lodash.default.includes(knownNames, name)) {
          const msg = `Could not resolve ${this.type}; are you sure it's in the list ` + `of supported ${this.type}s? ${JSON.stringify(knownNames)}`;
          throw new Error(msg);
        }

        pkgName = this.knownExtensions[name];
        installType = _extensionConfig.INSTALL_TYPE_NPM;
      }

      extData = await this.installViaNpm({
        ext,
        pkgName,
        pkgVer
      });
    }

    const extName = extData[`${this.type}Name`];
    delete extData[`${this.type}Name`];

    if (this.config.isInstalled(extName)) {
      throw new Error(`A ${this.type} named '${extName}' is already installed. ` + `Did you mean to update? 'appium ${this.type} update'. See ` + `installed ${this.type}s with 'appium ${this.type} list --installed'.`);
    }

    extData.installType = installType;
    extData.installSpec = installSpec;
    await this.config.addExtension(extName, extData);
    (0, _utils.log)(this.isJsonOutput, this.getPostInstallText({
      extName,
      extData
    }));
    return this.config.installedExtensions;
  }

  async installViaNpm({
    ext,
    pkgName,
    pkgVer
  }) {
    const npmSpec = `${pkgName}${pkgVer ? '@' + pkgVer : ''}`;
    const specMsg = npmSpec === ext ? '' : ` using NPM install spec '${npmSpec}'`;
    const msg = `Installing '${ext}'${specMsg}`;

    try {
      const pkgJsonData = await (0, _utils.spinWith)(this.isJsonOutput, msg, async () => await this.npm.installPackage({
        pkgDir: _path.default.resolve(this.config.appiumHome, pkgName),
        pkgName,
        pkgVer
      }));
      const extData = this.getExtensionFields(pkgJsonData);
      extData.installPath = pkgName;
      return extData;
    } catch (err) {
      throw new Error(`Encountered an error when installing package: ${err.message}`);
    }
  }

  getPostInstallText() {
    throw new Error('Must be implemented in final class');
  }

  getExtensionFields(pkgJsonData) {
    if (!pkgJsonData.appium) {
      throw new Error(`Installed driver did not have an 'appium' section in its ` + `package.json file as expected`);
    }

    const {
      appium,
      name,
      version
    } = pkgJsonData;
    this.validateExtensionFields(appium);
    return { ...appium,
      pkgName: name,
      version
    };
  }

  validateExtensionFields() {
    throw new Error('Must be implemented in final class');
  }

  async uninstall({
    ext
  }) {
    if (!this.config.isInstalled(ext)) {
      throw new Error(`Can't uninstall ${this.type} '${ext}'; it is not installed`);
    }

    try {
      await _support.fs.rimraf(this.config.getInstallPath(ext));
    } finally {
      await this.config.removeExtension(ext);
    }

    (0, _utils.log)(this.isJsonOutput, `Successfully uninstalled ${this.type} '${ext}'`.green);
    return this.config.installedExtensions;
  }

  async update({
    ext,
    unsafe
  }) {
    const shouldUpdateAll = ext === UPDATE_ALL;

    if (!shouldUpdateAll && !this.config.isInstalled(ext)) {
      throw new Error(`The ${this.type} '${ext}' was not installed, so can't be updated`);
    }

    const extsToUpdate = shouldUpdateAll ? Object.keys(this.config.installedExtensions) : [ext];
    const errors = {};
    const updates = {};

    for (const e of extsToUpdate) {
      try {
        await (0, _utils.spinWith)(this.isJsonOutput, `Checking if ${this.type} '${e}' is updatable`, () => {
          if (this.config.installedExtensions[e].installType !== _extensionConfig.INSTALL_TYPE_NPM) {
            throw new NotUpdatableError();
          }
        });
        const update = await (0, _utils.spinWith)(this.isJsonOutput, `Checking if ${this.type} '${e}' needs an update`, async () => {
          const update = await this.checkForExtensionUpdate(e);

          if (!(update.safeUpdate || update.unsafeUpdate)) {
            throw new NoUpdatesAvailableError();
          }

          return update;
        });

        if (!unsafe && !update.safeUpdate) {
          throw new Error(`The ${this.type} '${e}' has a major revision update ` + `(${update.current} => ${update.unsafeUpdate}), which could include ` + `breaking changes. If you want to apply this update, re-run with --unsafe`);
        }

        const updateVer = unsafe && update.unsafeUpdate ? update.unsafeUpdate : update.safeUpdate;
        await (0, _utils.spinWith)(this.isJsonOutput, `Updating driver '${e}' from ${update.current} to ${updateVer}`, async () => await this.updateExtension(e, updateVer));
        updates[e] = {
          from: update.current,
          to: updateVer
        };
      } catch (err) {
        errors[e] = err;
      }
    }

    (0, _utils.log)(this.isJsonOutput, 'Update report:');

    for (const [e, update] of _lodash.default.toPairs(updates)) {
      (0, _utils.log)(this.isJsonOutput, `- ${this.type} ${e} updated: ${update.from} => ${update.to}`.green);
    }

    for (const [e, err] of _lodash.default.toPairs(errors)) {
      if (err instanceof NotUpdatableError) {
        (0, _utils.log)(this.isJsonOutput, `- '${e}' was not installed via npm, so we could not check ` + `for updates`.yellow);
      } else if (err instanceof NoUpdatesAvailableError) {
        (0, _utils.log)(this.isJsonOutput, `- '${e}' had no updates available`.yellow);
      } else {
        (0, _utils.log)(this.isJsonOutput, `- '${e}' failed to update: ${err}`.red);
      }
    }

    return {
      updates,
      errors
    };
  }

  async checkForExtensionUpdate(ext) {
    const {
      version,
      pkgName
    } = this.config.installedExtensions[ext];
    let unsafeUpdate = await this.npm.getLatestVersion(pkgName);
    let safeUpdate = await this.npm.getLatestSafeUpgradeVersion(pkgName, version);

    if (!_support.util.compareVersions(unsafeUpdate, '>', version)) {
      unsafeUpdate = null;
      safeUpdate = null;
    }

    if (unsafeUpdate && unsafeUpdate === safeUpdate) {
      unsafeUpdate = null;
    }

    if (safeUpdate && !_support.util.compareVersions(safeUpdate, '>', version)) {
      safeUpdate = null;
    }

    return {
      current: version,
      safeUpdate,
      unsafeUpdate
    };
  }

  async updateExtension(ext, version) {
    const {
      pkgName
    } = this.config.installedExtensions[ext];
    await _support.fs.rimraf(this.config.getInstallPath(ext));
    const extData = await this.installViaNpm({
      ext,
      pkgName,
      pkgVer: version
    });
    delete extData[`${this.type}Name`];
    await this.config.updateExtension(ext, extData);
  }

  async run({
    ext,
    scriptName
  }) {
    if (!_lodash.default.has(this.config.installedExtensions, ext)) {
      throw new Error(`please install the ${this.type} first`);
    }

    const extConfig = this.config.installedExtensions[ext];

    if (!_lodash.default.has(extConfig, 'scripts')) {
      throw new Error(`The ${this.type} named '${ext}' does not contain the ` + `"scripts" field underneath the "appium" field in its package.json`);
    }

    const extScripts = extConfig.scripts;

    if (!_lodash.default.isPlainObject(extScripts)) {
      throw new Error(`The ${this.type} named '${ext}' "scripts" field must be a plain object`);
    }

    if (!_lodash.default.has(extScripts, scriptName)) {
      throw new Error(`The ${this.type} named '${ext}' does not support the script: '${scriptName}'`);
    }

    const runner = new _teen_process.SubProcess(process.execPath, [extScripts[scriptName]], {
      cwd: this.config.getExtensionRequirePath(ext)
    });
    const output = new _utils.RingBuffer(50);
    runner.on('stream-line', line => {
      output.enqueue(line);
      (0, _utils.log)(this.isJsonOutput, line);
    });
    await runner.start(0);

    try {
      await runner.join();
      (0, _utils.log)(this.isJsonOutput, `${scriptName} successfully ran`.green);
      return {
        output: output.getBuff()
      };
    } catch (err) {
      (0, _utils.log)(this.isJsonOutput, `Encountered an error when running '${scriptName}': ${err.message}`.red);
      return {
        error: err.message,
        output: output.getBuff()
      };
    }
  }

}

exports.default = ExtensionCommand;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
