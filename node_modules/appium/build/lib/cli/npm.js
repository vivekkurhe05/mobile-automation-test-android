"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _path = _interopRequireDefault(require("path"));

var _semver = _interopRequireDefault(require("semver"));

var _teen_process = require("teen_process");

var _support = require("@appium/support");

const INSTALL_LOCKFILE = '.appium.install.lock';
const LINK_LOCKFILE = '.appium.link.lock';

class NPM {
  constructor(appiumHome) {
    this.appiumHome = appiumHome;
  }

  async exec(cmd, args, opts, execOpts = {}) {
    let {
      cwd,
      json,
      lockFile
    } = opts;

    if (!cwd) {
      cwd = this.appiumHome;
    }

    await (0, _support.mkdirp)(cwd);

    const dummyPkgJson = _path.default.resolve(cwd, 'package.json');

    if (!(await _support.fs.exists(dummyPkgJson))) {
      await _support.fs.writeFile(dummyPkgJson, '{}');
    }

    execOpts = { ...execOpts,
      cwd
    };
    args.unshift(cmd);

    if (json) {
      args.push('--json');
    }

    const npmCmd = _support.system.isWindows() ? 'npm.cmd' : 'npm';

    let runner = async () => await (0, _teen_process.exec)(npmCmd, args, execOpts);

    if (lockFile) {
      const acquireLock = _support.util.getLockFileGuard(_path.default.resolve(cwd, lockFile));

      const _runner = runner;

      runner = async () => await acquireLock(_runner);
    }

    let ret;

    try {
      const {
        stdout,
        stderr,
        code
      } = await runner();
      ret = {
        stdout,
        stderr,
        code
      };

      try {
        ret.json = JSON.parse(stdout);
      } catch (ign) {}
    } catch (e) {
      const {
        stdout,
        stderr,
        code
      } = e;
      const err = new Error(`npm command '${cmd} ${args.join(' ')}' failed with code ${code}.\n\nSTDOUT:\n${stdout.trim()}\n\nSTDERR:\n${stderr.trim()}`);
      throw err;
    }

    return ret;
  }

  async getLatestVersion(pkg) {
    var _await$this$exec$json;

    return (_await$this$exec$json = (await this.exec('view', [pkg, 'dist-tags'], {
      json: true
    })).json) === null || _await$this$exec$json === void 0 ? void 0 : _await$this$exec$json.latest;
  }

  async getLatestSafeUpgradeVersion(pkg, curVersion) {
    const allVersions = (await this.exec('view', [pkg, 'versions'], {
      json: true
    })).json;
    return this.getLatestSafeUpgradeFromVersions(curVersion, allVersions);
  }

  getLatestSafeUpgradeFromVersions(curVersion, allVersions) {
    let safeUpgradeVer = null;

    const curSemver = _semver.default.parse(curVersion);

    if (curSemver === null) {
      throw new Error(`Could not parse current version '${curVersion}'`);
    }

    for (const testVer of allVersions) {
      const testSemver = _semver.default.parse(testVer);

      if (testSemver === null) {
        throw new Error(`Could not parse version to test against: '${testVer}'`);
      }

      if (testSemver.prerelease.length > 0) {
        continue;
      }

      if (curSemver.compare(testSemver) === 1) {
        continue;
      }

      if (testSemver.major > curSemver.major) {
        continue;
      }

      if (safeUpgradeVer === null || testSemver.compare(safeUpgradeVer) === 1) {
        safeUpgradeVer = testSemver;
      }
    }

    if (safeUpgradeVer) {
      safeUpgradeVer = safeUpgradeVer.format();
    }

    return safeUpgradeVer;
  }

  async installPackage({
    pkgDir,
    pkgName,
    pkgVer
  }) {
    const res = await this.exec('install', ['--no-save', '--no-package-lock', pkgVer ? `${pkgName}@${pkgVer}` : pkgName], {
      cwd: pkgDir,
      json: true,
      lockFile: INSTALL_LOCKFILE
    });

    if (res.json) {
      if (res.json.error) {
        throw new Error(res.json.error);
      }
    }

    const pkgJson = _path.default.resolve(pkgDir, 'node_modules', pkgName, 'package.json');

    try {
      return require(pkgJson);
    } catch {
      throw new Error('The package was not downloaded correctly; its package.json ' + 'did not exist or was unreadable. We looked for it at ' + pkgJson);
    }
  }

  async linkPackage(pkgPath) {
    let pkgName;

    try {
      pkgName = require(_path.default.resolve(pkgPath, 'package.json')).name;
    } catch {
      throw new Error('Could not find package.json inside the package path ' + `provided: ${pkgPath}`);
    }

    pkgPath = _path.default.resolve(process.cwd(), pkgPath);

    const pkgHome = _path.default.resolve(this.appiumHome, pkgName);

    const res = await this.exec('link', ['--no-package-lock', pkgPath], {
      cwd: pkgHome,
      lockFile: LINK_LOCKFILE
    });

    if (res.json && res.json.error) {
      throw new Error(res.json.error);
    }

    try {
      return require(_path.default.resolve(pkgHome, 'node_modules', pkgName, 'package.json'));
    } catch {
      throw new Error('The package was not linked correctly; its package.json ' + 'did not exist or was unreadable');
    }
  }

  async uninstallPackage(pkgDir, pkg) {
    await this.exec('uninstall', [pkg], {
      cwd: pkgDir,
      lockFile: INSTALL_LOCKFILE
    });
  }

}

exports.default = NPM;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
