"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "APPIUM_HOME", {
  enumerable: true,
  get: function () {
    return _extensionConfig.APPIUM_HOME;
  }
});
exports.getExtensionArgs = exports.driverConfig = exports.USE_ALL_PLUGINS = void 0;
exports.getServerArgs = getServerArgs;
exports.pluginConfig = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _driverConfig = _interopRequireDefault(require("../driver-config"));

var _extensionConfig = require("../extension-config");

var _pluginConfig = _interopRequireDefault(require("../plugin-config"));

var _cliArgs = require("../schema/cli-args");

const DRIVER_EXAMPLE = 'xcuitest';
const PLUGIN_EXAMPLE = 'find_by_image';
const USE_ALL_PLUGINS = 'all';
exports.USE_ALL_PLUGINS = USE_ALL_PLUGINS;
const EXTENSION_TYPES = new Set([_extensionConfig.DRIVER_TYPE, _extensionConfig.PLUGIN_TYPE]);

const driverConfig = _driverConfig.default.getInstance(_extensionConfig.APPIUM_HOME);

exports.driverConfig = driverConfig;

const pluginConfig = _pluginConfig.default.getInstance(_extensionConfig.APPIUM_HOME);

exports.pluginConfig = pluginConfig;
const globalExtensionArgs = new Map([[['--json'], {
  required: false,
  default: false,
  action: 'store_true',
  help: 'Use JSON for output format',
  dest: 'json'
}]]);

const getExtensionArgs = _lodash.default.once(function getExtensionArgs() {
  const extensionArgs = {};

  for (const type of EXTENSION_TYPES) {
    extensionArgs[type] = {
      list: makeListArgs(type),
      install: makeInstallArgs(type),
      uninstall: makeUninstallArgs(type),
      update: makeUpdateArgs(type),
      run: makeRunArgs(type)
    };
  }

  return extensionArgs;
});

exports.getExtensionArgs = getExtensionArgs;

function makeListArgs(type) {
  return new Map([...globalExtensionArgs, [['--installed'], {
    required: false,
    default: false,
    action: 'store_true',
    help: `List only installed ${type}s`,
    dest: 'showInstalled'
  }], [['--updates'], {
    required: false,
    default: false,
    action: 'store_true',
    help: 'Show information about newer versions',
    dest: 'showUpdates'
  }]]);
}

function makeInstallArgs(type) {
  return new Map([...globalExtensionArgs, [[type], {
    type: 'str',
    help: `Name of the ${type} to install, for example: ` + type === _extensionConfig.DRIVER_TYPE ? DRIVER_EXAMPLE : PLUGIN_EXAMPLE
  }], [['--source'], {
    required: false,
    default: null,
    choices: _extensionConfig.INSTALL_TYPES,
    help: `Where to look for the ${type} if it is not one of Appium's verified ` + `${type}s. Possible values: ${_extensionConfig.INSTALL_TYPES.join(', ')}`,
    dest: 'installType'
  }], [['--package'], {
    required: false,
    default: null,
    type: 'str',
    help: `If installing from Git or GitHub, the package name, as defined in the plugin's ` + `package.json file in the "name" field, cannot be determined automatically, and ` + `should be reported here, otherwise the install will probably fail.`,
    dest: 'packageName'
  }]]);
}

function makeUninstallArgs(type) {
  return new Map([...globalExtensionArgs, [[type], {
    type: 'str',
    help: 'Name of the driver to uninstall, for example: ' + type === _extensionConfig.DRIVER_TYPE ? DRIVER_EXAMPLE : PLUGIN_EXAMPLE
  }]]);
}

function makeUpdateArgs(type) {
  return new Map([...globalExtensionArgs, [[type], {
    type: 'str',
    help: `Name of the ${type} to update, or the word "installed" to update all installed ` + `${type}s. To see available updates, run "appium ${type} list --installed --updates". ` + 'For example: ' + type === _extensionConfig.DRIVER_TYPE ? DRIVER_EXAMPLE : PLUGIN_EXAMPLE
  }], [['--unsafe'], {
    required: false,
    default: false,
    action: 'store_true',
    help: `Include updates that might have a new major revision, and potentially include ` + `breaking changes`
  }]]);
}

function makeRunArgs(type) {
  return new Map([...globalExtensionArgs, [[type], {
    type: 'str',
    help: `Name of the ${type} to run a script from, for example: ` + type === _extensionConfig.DRIVER_TYPE ? DRIVER_EXAMPLE : PLUGIN_EXAMPLE
  }], [['scriptName'], {
    default: null,
    type: 'str',
    help: `Name of the script to run from the ${type}. The script name must be cached ` + `inside the "scripts" field under "appium" inside the ${type}'s "package.json" file`
  }]]);
}

function getServerArgs() {
  return new Map([...(0, _cliArgs.toParserArgs)(), ...serverArgsDisallowedInConfig]);
}

const serverArgsDisallowedInConfig = new Map([[['--shell'], {
  required: false,
  help: 'Enter REPL mode',
  action: 'store_const',
  const: true,
  dest: 'shell'
}], [['--show-build-info'], {
  dest: 'showBuildInfo',
  action: 'store_const',
  const: true,
  required: false,
  help: 'Show info about the Appium build and exit'
}], [['--show-config'], {
  dest: 'showConfig',
  action: 'store_const',
  const: true,
  required: false,
  help: 'Show the current Appium configuration and exit'
}], [['--config'], {
  dest: 'configFile',
  type: 'string',
  required: false,
  help: 'Explicit path to Appium configuration file'
}]]);require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
