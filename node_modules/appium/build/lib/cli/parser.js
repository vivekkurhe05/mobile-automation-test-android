"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SERVER_SUBCOMMAND = exports.ArgParser = void 0;
exports.getParser = getParser;

require("source-map-support/register");

var _support = require("@appium/support");

var _argparse = require("argparse");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _extensionConfig = require("../extension-config");

var _schema = require("../schema");

var _utils = require("../utils");

var _args = require("./args");

const SERVER_SUBCOMMAND = 'server';
exports.SERVER_SUBCOMMAND = SERVER_SUBCOMMAND;
const NON_SERVER_ARGS = Object.freeze(new Set([_extensionConfig.DRIVER_TYPE, _extensionConfig.PLUGIN_TYPE, SERVER_SUBCOMMAND, '-h', '--help', '-v', '--version']));

const version = _support.fs.readPackageJsonFrom(_utils.rootDir).version;

class ArgParser {
  constructor(debug = false) {
    const prog = process.argv[1] ? _path.default.basename(process.argv[1]) : 'appium';
    const parser = new _argparse.ArgumentParser({
      add_help: true,
      description: 'A webdriver-compatible server that facilitates automation of web, mobile, and other types of apps across various platforms.',
      prog
    });

    ArgParser._patchExit(parser);

    this.prog = prog;
    this.debug = debug;
    this.parser = parser;
    parser.add_argument('-v', '--version', {
      action: 'version',
      version
    });
    const subParsers = parser.add_subparsers({
      dest: 'subcommand'
    });

    const serverArgs = ArgParser._addServerToParser(subParsers);

    this.rawArgs = serverArgs;

    ArgParser._addExtensionCommandsToParser(subParsers);

    this.parse_args = this.parseArgs;
  }

  parseArgs(args = process.argv.slice(2)) {
    if (!NON_SERVER_ARGS.has(args[0])) {
      args.unshift(SERVER_SUBCOMMAND);
    }

    try {
      const parsed = this.parser.parse_args(args);
      return ArgParser._transformParsedArgs(parsed);
    } catch (err) {
      if (this.debug) {
        throw err;
      }

      {
        console.error();
        console.error(err.message);
        process.exit(1);
      }
    }
  }

  static _transformParsedArgs(args) {
    return _lodash.default.reduce(args, (unpacked, value, key) => {
      if (!_lodash.default.isUndefined(value) && (0, _schema.hasArgSpec)(key)) {
        const {
          dest
        } = (0, _schema.getArgSpec)(key);

        _lodash.default.set(unpacked, dest, value);
      } else {
        unpacked[key] = value;
      }

      return unpacked;
    }, {});
  }

  static _patchExit(parser) {
    parser.exit = (code, msg) => {
      if (code) {
        throw new Error(msg);
      }

      process.exit();
    };
  }

  static _addServerToParser(subParser) {
    const serverParser = subParser.add_parser('server', {
      add_help: true,
      help: 'Run an Appium server'
    });

    ArgParser._patchExit(serverParser);

    const serverArgs = (0, _args.getServerArgs)();

    for (const [flagsOrNames, opts] of serverArgs) {
      serverParser.add_argument(...flagsOrNames, { ...opts
      });
    }

    return serverArgs;
  }

  static _addExtensionCommandsToParser(subParsers) {
    for (const type of [_extensionConfig.DRIVER_TYPE, _extensionConfig.PLUGIN_TYPE]) {
      const extParser = subParsers.add_parser(type, {
        add_help: true,
        help: `Access the ${type} management CLI commands`
      });

      ArgParser._patchExit(extParser);

      const extSubParsers = extParser.add_subparsers({
        dest: `${type}Command`
      });
      const extensionArgs = (0, _args.getExtensionArgs)();
      const parserSpecs = [{
        command: 'list',
        args: extensionArgs[type].list,
        help: `List available and installed ${type}s`
      }, {
        command: 'install',
        args: extensionArgs[type].install,
        help: `Install a ${type}`
      }, {
        command: 'uninstall',
        args: extensionArgs[type].uninstall,
        help: `Uninstall a ${type}`
      }, {
        command: 'update',
        args: extensionArgs[type].update,
        help: `Update installed ${type}s to the latest version`
      }, {
        command: 'run',
        args: extensionArgs[type].run,
        help: `Run a script (defined inside the ${type}'s package.json under the ` + `“scripts” field inside the “appium” field) from an installed ${type}`
      }];

      for (const {
        command,
        args,
        help
      } of parserSpecs) {
        const parser = extSubParsers.add_parser(command, {
          help
        });

        ArgParser._patchExit(parser);

        for (const [flagsOrNames, opts] of args) {
          parser.add_argument(...flagsOrNames, { ...opts
          });
        }
      }
    }
  }

}

exports.ArgParser = ArgParser;

async function getParser(debug = false) {
  await _bluebird.default.all([_args.driverConfig.read(), _args.pluginConfig.read()]);
  (0, _schema.finalizeSchema)();
  return new ArgParser(debug);
}

var _default = getParser;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
