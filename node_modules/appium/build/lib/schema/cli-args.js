"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toParserArgs = toParserArgs;

require("source-map-support/register");

var _argparse = require("argparse");

var _lodash = _interopRequireDefault(require("lodash"));

var _configFile = require("../config-file");

var _schema = require("./schema");

var _cliTransformers = require("./cli-transformers");

const TYPENAMES = Object.freeze({
  ARRAY: 'array',
  OBJECT: 'object',
  BOOLEAN: 'boolean',
  INTEGER: 'integer',
  NUMBER: 'number',
  NULL: 'null',
  STRING: 'string'
});
const SHORT_ARG_CUTOFF = 3;

function aliasToFlag(argSpec, alias) {
  const {
    extType,
    extName,
    name
  } = argSpec;
  const arg = alias !== null && alias !== void 0 ? alias : name;
  const isShort = arg.length < SHORT_ARG_CUTOFF;

  if (extType && extName) {
    return isShort ? `--${extType}-${_lodash.default.kebabCase(extName)}-${arg}` : `--${extType}-${_lodash.default.kebabCase(extName)}-${_lodash.default.kebabCase(arg)}`;
  }

  return isShort ? `-${arg}` : `--${_lodash.default.kebabCase(arg)}`;
}

const screamingSnakeCase = _lodash.default.flow(_lodash.default.snakeCase, _lodash.default.toUpper);

function getSchemaValidator({
  ref: schemaId
}, coerce = _lodash.default.identity) {
  return value => {
    const coerced = coerce(value);
    const errors = (0, _schema.validate)(coerced, schemaId);

    if (_lodash.default.isEmpty(errors)) {
      return coerced;
    }

    throw new _argparse.ArgumentTypeError('\n\n' + (0, _configFile.formatErrors)(errors, value, {
      schemaId
    }));
  };
}

function makeDescription(schema) {
  const {
    appiumCliDescription,
    description = '',
    appiumDeprecated
  } = schema;
  let desc = appiumCliDescription !== null && appiumCliDescription !== void 0 ? appiumCliDescription : description;

  if (appiumDeprecated) {
    desc = `[DEPRECATED] ${desc}`;
  }

  return desc;
}

function subSchemaToArgDef(subSchema, argSpec) {
  let {
    type,
    appiumCliAliases,
    appiumCliTransformer,
    enum: enumValues
  } = subSchema;
  const {
    name,
    arg
  } = argSpec;
  const aliases = [aliasToFlag(argSpec), ...(appiumCliAliases !== null && appiumCliAliases !== void 0 ? appiumCliAliases : []).map(alias => aliasToFlag(argSpec, alias))];
  let argOpts = {
    required: false,
    help: makeDescription(subSchema)
  };
  let argTypeFunction;

  switch (type) {
    case TYPENAMES.BOOLEAN:
      {
        argOpts.action = 'store_const';
        argOpts.const = true;
        break;
      }

    case TYPENAMES.OBJECT:
      {
        argTypeFunction = _cliTransformers.transformers.json;
        break;
      }

    case TYPENAMES.ARRAY:
      {
        argTypeFunction = _cliTransformers.transformers.csv;
        break;
      }

    case TYPENAMES.NUMBER:
      {
        argTypeFunction = getSchemaValidator(argSpec, parseFloat);
        break;
      }

    case TYPENAMES.INTEGER:
      {
        argTypeFunction = getSchemaValidator(argSpec, _lodash.default.parseInt);
        break;
      }

    case TYPENAMES.STRING:
      {
        argTypeFunction = getSchemaValidator(argSpec);
        break;
      }

    case TYPENAMES.NULL:
    default:
      {
        throw new TypeError(`Schema property "${arg}": \`${type}\` type unknown or disallowed`);
      }
  }

  if (type !== TYPENAMES.BOOLEAN) {
    argOpts.metavar = screamingSnakeCase(name);
  }

  if (type !== TYPENAMES.ARRAY && type !== TYPENAMES.OBJECT && appiumCliTransformer) {
    var _argTypeFunction;

    argTypeFunction = _lodash.default.flow((_argTypeFunction = argTypeFunction) !== null && _argTypeFunction !== void 0 ? _argTypeFunction : _lodash.default.identity, _cliTransformers.transformers[appiumCliTransformer]);
  }

  if (argTypeFunction) {
    argOpts.type = argTypeFunction;
  }

  if (enumValues && !_lodash.default.isEmpty(enumValues)) {
    if (type === TYPENAMES.STRING) {
      argOpts.choices = enumValues.map(String);
    } else {
      throw new TypeError(`Problem with schema for ${arg}; \`enum\` is only supported for \`type: 'string'\``);
    }
  }

  return [aliases, argOpts];
}

function toParserArgs() {
  const flattened = (0, _schema.flattenSchema)().filter(({
    schema
  }) => !schema.appiumCliIgnored);
  return new Map(_lodash.default.map(flattened, ({
    schema,
    argSpec
  }) => subSchemaToArgDef(schema, argSpec)));
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
