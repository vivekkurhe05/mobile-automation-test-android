"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SERVER_PROP_NAME = exports.ArgSpec = exports.APPIUM_CONFIG_SCHEMA_ID = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

const APPIUM_CONFIG_SCHEMA_ID = 'appium.json';
exports.APPIUM_CONFIG_SCHEMA_ID = APPIUM_CONFIG_SCHEMA_ID;
const SERVER_PROP_NAME = 'server';
exports.SERVER_PROP_NAME = SERVER_PROP_NAME;
const SCHEMA_ID_REGEXP = /^(?<extType>.+?)-(?<normalizedExtName>.+)\.json$/;
const PROPERTIES = 'properties';

class ArgSpec {
  constructor(name, {
    extType,
    extName,
    dest,
    defaultValue
  } = {}) {
    (0, _defineProperty2.default)(this, "name", void 0);
    (0, _defineProperty2.default)(this, "extType", void 0);
    (0, _defineProperty2.default)(this, "extName", void 0);
    (0, _defineProperty2.default)(this, "ref", void 0);
    (0, _defineProperty2.default)(this, "arg", void 0);
    (0, _defineProperty2.default)(this, "dest", void 0);
    (0, _defineProperty2.default)(this, "rawDest", void 0);
    (0, _defineProperty2.default)(this, "defaultValue", void 0);
    const arg = ArgSpec.toArg(name, extType, extName);
    const ref = ArgSpec.toSchemaRef(name, extType, extName);

    const rawDest = _lodash.default.camelCase(dest !== null && dest !== void 0 ? dest : name);

    const destKeypath = extType && extName ? [extType, extName, rawDest].join('.') : rawDest;
    this.defaultValue = defaultValue;
    this.name = name;
    this.extType = extType;
    this.extName = extName;
    this.arg = arg;
    this.dest = destKeypath;
    this.ref = ref;
    this.rawDest = rawDest;
  }

  static toSchemaRef(name, extType, extName) {
    const baseRef = ArgSpec.toSchemaBaseRef(extType, extName);

    if (extType && extName) {
      return [`${baseRef}#`, PROPERTIES, name].join('/');
    }

    return [`${baseRef}#`, PROPERTIES, SERVER_PROP_NAME, PROPERTIES, name].join('/');
  }

  static toSchemaBaseRef(extType, extName) {
    if (extType && extName) {
      return `${extType}-${ArgSpec.toNormalizedExtName(extName)}.json`;
    }

    return APPIUM_CONFIG_SCHEMA_ID;
  }

  static toArg(name, extType, extName) {
    const properName = _lodash.default.kebabCase(name.replace(/^--?/, ''));

    if (extType && extName) {
      return [extType, _lodash.default.kebabCase(extName), properName].join('-');
    }

    return properName;
  }

  static toNormalizedExtName(extName) {
    return _lodash.default.kebabCase(extName);
  }

  static extensionInfoFromRootSchemaId(schemaId) {
    const matches = schemaId.match(SCHEMA_ID_REGEXP);

    if (matches !== null && matches !== void 0 && matches.groups) {
      const {
        extType,
        normalizedExtName
      } = matches.groups;
      return {
        extType,
        normalizedExtName
      };
    }

    return {};
  }

  static create(name, opts) {
    return Object.freeze(new ArgSpec(name, opts));
  }

  toString() {
    let str = `[ArgSpec] ${this.name} (${this.ref})`;

    if (this.extType && this.extName) {
      str += ` (ext: ${this.extType}/${this.extName})`;
    }

    return str;
  }

}

exports.ArgSpec = ArgSpec;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
