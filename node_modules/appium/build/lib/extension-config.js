"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_APPIUM_HOME = exports.APPIUM_HOME = void 0;
Object.defineProperty(exports, "DRIVER_TYPE", {
  enumerable: true,
  get: function () {
    return _extConfigIo.DRIVER_TYPE;
  }
});
exports.INSTALL_TYPE_NPM = exports.INSTALL_TYPE_LOCAL = exports.INSTALL_TYPE_GITHUB = exports.INSTALL_TYPE_GIT = exports.INSTALL_TYPES = void 0;
Object.defineProperty(exports, "PLUGIN_TYPE", {
  enumerable: true,
  get: function () {
    return _extConfigIo.PLUGIN_TYPE;
  }
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _resolveFrom = _interopRequireDefault(require("resolve-from"));

var _extConfigIo = require("./ext-config-io");

var _logger = _interopRequireDefault(require("./logger"));

var _schema = require("./schema/schema");

const DEFAULT_APPIUM_HOME = _path.default.resolve(_os.default.homedir(), '.appium');

exports.DEFAULT_APPIUM_HOME = DEFAULT_APPIUM_HOME;
const APPIUM_HOME = process.env.APPIUM_HOME || DEFAULT_APPIUM_HOME;
exports.APPIUM_HOME = APPIUM_HOME;
const INSTALL_TYPE_NPM = 'npm';
exports.INSTALL_TYPE_NPM = INSTALL_TYPE_NPM;
const INSTALL_TYPE_LOCAL = 'local';
exports.INSTALL_TYPE_LOCAL = INSTALL_TYPE_LOCAL;
const INSTALL_TYPE_GITHUB = 'github';
exports.INSTALL_TYPE_GITHUB = INSTALL_TYPE_GITHUB;
const INSTALL_TYPE_GIT = 'git';
exports.INSTALL_TYPE_GIT = INSTALL_TYPE_GIT;
const INSTALL_TYPES = [INSTALL_TYPE_GIT, INSTALL_TYPE_GITHUB, INSTALL_TYPE_LOCAL, INSTALL_TYPE_NPM];
exports.INSTALL_TYPES = INSTALL_TYPES;

class ExtensionConfig {
  constructor(appiumHome, extensionType, logFn) {
    const logger = _lodash.default.isFunction(logFn) ? logFn : _logger.default.error.bind(_logger.default);
    this.appiumHome = appiumHome;
    this.installedExtensions = {};
    this.io = (0, _extConfigIo.getExtConfigIOInstance)(appiumHome);
    this.extensionType = extensionType;
    this.configKey = `${extensionType}s`;
    this.log = logger;
  }

  validate(exts) {
    const foundProblems = {};

    for (const [extName, extData] of _lodash.default.toPairs(exts)) {
      foundProblems[extName] = [...this.getGenericConfigProblems(extData, extName), ...this.getConfigProblems(extData, extName), ...this.getSchemaProblems(extData, extName)];
    }

    const problemSummaries = [];

    for (const [extName, problems] of _lodash.default.toPairs(foundProblems)) {
      if (_lodash.default.isEmpty(problems)) {
        continue;
      }

      delete exts[extName];
      problemSummaries.push(`${this.extensionType} ${extName} had errors and will not ` + `be available. Errors:`);

      for (const problem of problems) {
        problemSummaries.push(`  - ${problem.err} (Actual value: ` + `${JSON.stringify(problem.val)})`);
      }
    }

    if (!_lodash.default.isEmpty(problemSummaries)) {
      this.log(`Appium encountered one or more errors while validating ` + `the ${this.configKey} extension file (${this.io.filepath}):`);

      for (const summary of problemSummaries) {
        this.log(summary);
      }
    }

    return exts;
  }

  getSchemaProblems(extData, extName) {
    const problems = [];
    const {
      schema: argSchemaPath
    } = extData;

    if (argSchemaPath) {
      if (_lodash.default.isString(argSchemaPath)) {
        if ((0, _schema.isAllowedSchemaFileExtension)(argSchemaPath)) {
          try {
            this.readExtensionSchema(extName, extData);
          } catch (err) {
            problems.push({
              err: `Unable to register schema at path ${argSchemaPath}; ${err.message}`,
              val: argSchemaPath
            });
          }
        } else {
          problems.push({
            err: `Schema file has unsupported extension. Allowed: ${[..._schema.ALLOWED_SCHEMA_EXTENSIONS].join(', ')}`,
            val: argSchemaPath
          });
        }
      } else if (_lodash.default.isPlainObject(argSchemaPath)) {
        try {
          this.readExtensionSchema(extName, extData);
        } catch (err) {
          problems.push({
            err: `Unable to register embedded schema; ${err.message}`,
            val: argSchemaPath
          });
        }
      } else {
        problems.push({
          err: 'Incorrectly formatted schema field; must be a path to a schema file or a schema object.',
          val: argSchemaPath
        });
      }
    }

    return problems;
  }

  getGenericConfigProblems(extData, extName) {
    const {
      version,
      pkgName,
      installSpec,
      installType,
      installPath,
      mainClass
    } = extData;
    const problems = [];

    if (!_lodash.default.isString(version)) {
      problems.push({
        err: 'Missing or incorrect version',
        val: version
      });
    }

    if (!_lodash.default.isString(pkgName)) {
      problems.push({
        err: 'Missing or incorrect NPM package name',
        val: pkgName
      });
    }

    if (!_lodash.default.isString(installSpec)) {
      problems.push({
        err: 'Missing or incorrect installation spec',
        val: installSpec
      });
    }

    if (!_lodash.default.includes(INSTALL_TYPES, installType)) {
      problems.push({
        err: 'Missing or incorrect install type',
        val: installType
      });
    }

    if (!_lodash.default.isString(installPath)) {
      problems.push({
        err: 'Missing or incorrect installation path',
        val: installPath
      });
    }

    if (!_lodash.default.isString(mainClass)) {
      problems.push({
        err: 'Missing or incorrect driver class name',
        val: mainClass
      });
    }

    return problems;
  }

  getConfigProblems(extData, extName) {
    return [];
  }

  async read() {
    const extensions = await this.io.read(this.extensionType);
    this.installedExtensions = this.validate(extensions);
    return this.installedExtensions;
  }

  async write() {
    return await this.io.write();
  }

  async addExtension(extName, extData) {
    this.installedExtensions[extName] = extData;
    await this.write();
  }

  async updateExtension(extName, extData) {
    this.installedExtensions[extName] = { ...this.installedExtensions[extName],
      ...extData
    };
    await this.write();
  }

  async removeExtension(extName) {
    delete this.installedExtensions[extName];
    await this.write();
  }

  print() {
    const extNames = Object.keys(this.installedExtensions);

    if (_lodash.default.isEmpty(extNames)) {
      _logger.default.info(`No ${this.configKey} have been installed. Use the "appium ${this.extensionType}" ` + 'command to install the one(s) you want to use.');

      return;
    }

    _logger.default.info(`Available ${this.configKey}:`);

    for (const [extName, extData] of _lodash.default.toPairs(this.installedExtensions)) {
      _logger.default.info(`  - ${this.extensionDesc(extName, extData)}`);
    }
  }

  extensionDesc(extName, extData) {
    throw new Error('This must be implemented in a subclass');
  }

  getExtensionRequirePath(extName) {
    const {
      pkgName,
      installPath
    } = this.installedExtensions[extName];
    return _path.default.resolve(this.appiumHome, installPath, 'node_modules', pkgName);
  }

  getInstallPath(extName) {
    const {
      installPath
    } = this.installedExtensions[extName];
    return _path.default.resolve(this.appiumHome, installPath);
  }

  require(extName) {
    const {
      mainClass
    } = this.installedExtensions[extName];
    const reqPath = this.getExtensionRequirePath(extName);

    const reqResolved = require.resolve(reqPath);

    if (process.env.APPIUM_RELOAD_EXTENSIONS && require.cache[reqResolved]) {
      _logger.default.debug(`Removing ${reqResolved} from require cache`);

      delete require.cache[reqResolved];
    }

    return require(reqPath)[mainClass];
  }

  isInstalled(extName) {
    return _lodash.default.includes(Object.keys(this.installedExtensions), extName);
  }

  static _readExtensionSchema(appiumHome, extType, extName, extData) {
    const {
      installPath,
      pkgName,
      schema: argSchemaPath
    } = extData;

    if (!argSchemaPath) {
      throw new TypeError(`No \`schema\` property found in config for ${extType} ${pkgName} -- why is this function being called?`);
    }

    let moduleObject;

    if (_lodash.default.isString(argSchemaPath)) {
      const schemaPath = (0, _resolveFrom.default)(_path.default.resolve(appiumHome, installPath), _path.default.normalize(`${pkgName}/${argSchemaPath}`));
      moduleObject = require(schemaPath);
    } else {
      moduleObject = argSchemaPath;
    }

    const schema = moduleObject.__esModule ? moduleObject.default : moduleObject;
    (0, _schema.registerSchema)(extType, extName, schema);
    return schema;
  }

  readExtensionSchema(extName, extData) {
    return ExtensionConfig._readExtensionSchema(this.appiumHome, this.extensionType, extName, extData);
  }

}

exports.default = ExtensionConfig;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
