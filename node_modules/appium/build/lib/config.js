"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.APPIUM_VER = void 0;
exports.checkNodeOk = checkNodeOk;
exports.getBuildInfo = getBuildInfo;
exports.getGitRev = getGitRev;
exports.getNonDefaultServerArgs = getNonDefaultServerArgs;
exports.showBuildInfo = showBuildInfo;
exports.showConfig = showConfig;
exports.updateBuildInfo = updateBuildInfo;
exports.validateTmpDir = validateTmpDir;
exports.warnNodeDeprecations = warnNodeDeprecations;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _support = require("@appium/support");

var _axios = _interopRequireDefault(require("axios"));

var _teen_process = require("teen_process");

var _utils = require("./utils");

var _logger = _interopRequireDefault(require("./logger"));

var _semver = _interopRequireDefault(require("semver"));

var _findUp = _interopRequireDefault(require("find-up"));

var _schema = require("./schema/schema");

const npmPackage = _support.fs.readPackageJsonFrom(__dirname);

const APPIUM_VER = npmPackage.version;
exports.APPIUM_VER = APPIUM_VER;
const MIN_NODE_VERSION = npmPackage.engines.node;
const GIT_META_ROOT = '.git';
const GIT_BINARY = `git${_support.system.isWindows() ? '.exe' : ''}`;
const GITHUB_API = 'https://api.github.com/repos/appium/appium';
const BUILD_INFO = {
  version: APPIUM_VER
};

function getNodeVersion() {
  return _semver.default.coerce(process.version);
}

async function updateBuildInfo(useGithubApiFallback = false) {
  const sha = await getGitRev(useGithubApiFallback);

  if (!sha) {
    return;
  }

  BUILD_INFO['git-sha'] = sha;
  const built = await getGitTimestamp(sha, useGithubApiFallback);

  if (!_lodash.default.isEmpty(built)) {
    BUILD_INFO.built = built;
  }
}

async function findGitRoot() {
  return await (0, _findUp.default)(GIT_META_ROOT, {
    cwd: _utils.rootDir,
    type: 'directory'
  });
}

async function getGitRev(useGithubApiFallback = false) {
  const gitRoot = await findGitRoot();

  if (gitRoot) {
    try {
      const {
        stdout
      } = await (0, _teen_process.exec)(GIT_BINARY, ['rev-parse', 'HEAD'], {
        cwd: gitRoot
      });
      return stdout.trim();
    } catch (ign) {}
  }

  if (!useGithubApiFallback) {
    return null;
  }

  try {
    const resBodyObj = (await _axios.default.get(`${GITHUB_API}/tags`, {
      headers: {
        'User-Agent': `Appium ${APPIUM_VER}`
      }
    })).data;

    if (_lodash.default.isArray(resBodyObj)) {
      for (const {
        name,
        commit
      } of resBodyObj) {
        if (name === `v${APPIUM_VER}` && commit && commit.sha) {
          return commit.sha;
        }
      }
    }
  } catch (ign) {}

  return null;
}

async function getGitTimestamp(commitSha, useGithubApiFallback = false) {
  const gitRoot = await findGitRoot();

  if (gitRoot) {
    try {
      const {
        stdout
      } = await (0, _teen_process.exec)(GIT_BINARY, ['show', '-s', '--format=%ci', commitSha], {
        cwd: gitRoot
      });
      return stdout.trim();
    } catch (ign) {}
  }

  if (!useGithubApiFallback) {
    return null;
  }

  try {
    const resBodyObj = (await _axios.default.get(`${GITHUB_API}/commits/${commitSha}`, {
      headers: {
        'User-Agent': `Appium ${APPIUM_VER}`
      }
    })).data;

    if (resBodyObj && resBodyObj.commit) {
      if (resBodyObj.commit.committer && resBodyObj.commit.committer.date) {
        return resBodyObj.commit.committer.date;
      }

      if (resBodyObj.commit.author && resBodyObj.commit.author.date) {
        return resBodyObj.commit.author.date;
      }
    }
  } catch (ign) {}

  return null;
}

function getBuildInfo() {
  return BUILD_INFO;
}

function checkNodeOk() {
  const version = getNodeVersion();

  if (!_semver.default.satisfies(version, MIN_NODE_VERSION)) {
    _logger.default.errorAndThrow(`Node version must be ${MIN_NODE_VERSION}. Currently ${version.version}`);
  }
}

function warnNodeDeprecations() {}

async function showBuildInfo() {
  await updateBuildInfo(true);
  console.log(JSON.stringify(getBuildInfo()));
}

function getNonDefaultServerArgs(parsedArgs) {
  const flatten = args => {
    const argSpecs = (0, _schema.getAllArgSpecs)();

    const flattened = _lodash.default.reduce([...argSpecs.values()], (acc, argSpec) => {
      if (_lodash.default.has(args, argSpec.dest)) {
        acc[argSpec.dest] = {
          value: _lodash.default.get(args, argSpec.dest),
          argSpec
        };
      }

      return acc;
    }, {});

    return flattened;
  };

  const args = flatten(parsedArgs);

  const typesDiffer = dest => typeof args[dest].value !== typeof defaultsFromSchema[dest];

  const defaultValueIsArray = dest => _lodash.default.isArray(defaultsFromSchema[dest]);

  const argsValueIsArray = dest => _lodash.default.isArray(args[dest].value);

  const arraysDiffer = dest => _lodash.default.gt(_lodash.default.size(_lodash.default.difference(args[dest].value, defaultsFromSchema[dest])), 0);

  const valuesDiffer = dest => args[dest].value !== defaultsFromSchema[dest];

  const defaultIsDefined = dest => !_lodash.default.isUndefined(defaultsFromSchema[dest]);

  const argValueNotArrayOrArraysDiffer = _lodash.default.overSome([_lodash.default.negate(argsValueIsArray), arraysDiffer]);

  const defaultValueNotArrayAndValuesDiffer = _lodash.default.overEvery([_lodash.default.negate(defaultValueIsArray), valuesDiffer]);

  const isNotDefault = _lodash.default.overEvery([defaultIsDefined, _lodash.default.overSome([typesDiffer, _lodash.default.overEvery([defaultValueIsArray, argValueNotArrayOrArraysDiffer]), defaultValueNotArrayAndValuesDiffer])]);

  const defaultsFromSchema = (0, _schema.getDefaultsForSchema)(true);
  return _lodash.default.reduce(_lodash.default.pickBy(args, (__, key) => isNotDefault(key)), (acc, {
    value,
    argSpec
  }) => _lodash.default.set(acc, argSpec.dest, value), {});
}

const compactConfig = _lodash.default.partial(_lodash.default.omitBy, _lodash.default, (value, key) => key === 'subcommand' || _lodash.default.isUndefined(value) || _lodash.default.isObject(value) && _lodash.default.isEmpty(value));

function showConfig(nonDefaultPreConfigParsedArgs, configResult, defaults, parsedArgs) {
  console.log('Appium Configuration\n');
  console.log('from defaults:\n');
  console.dir(compactConfig(defaults));

  if (configResult.config) {
    console.log(`\nfrom config file at ${configResult.filepath}:\n`);
    console.dir(compactConfig(configResult.config));
  } else {
    console.log(`\n(no configuration file loaded)`);
  }

  if (_lodash.default.isEmpty(nonDefaultPreConfigParsedArgs)) {
    console.log(`\n(no CLI parameters provided)`);
  } else {
    console.log('\nvia CLI or function call:\n');
    console.dir(compactConfig(nonDefaultPreConfigParsedArgs));
  }

  console.log('\nfinal configuration:\n');
  console.dir(compactConfig(parsedArgs));
}

async function validateTmpDir(tmpDir) {
  try {
    await (0, _support.mkdirp)(tmpDir);
  } catch (e) {
    throw new Error(`We could not ensure that the temp dir you specified ` + `(${tmpDir}) exists. Please make sure it's writeable.`);
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
