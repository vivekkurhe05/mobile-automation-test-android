"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FakeDriver = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

require("source-map-support/register");

var _lib = require("../../lib");

var _constants = require("../../lib/constants");

var _support = require("@appium/support");

class FakeDriver extends _lib.BaseDriver {
  constructor() {
    super();
    this.protocol = _constants.PROTOCOLS.MJSONWP;
    this.sessionId = null;
    this.jwpProxyActive = false;
  }

  sessionExists(sessionId) {
    if (!sessionId) {
      return false;
    }

    return sessionId === this.sessionId;
  }

  driverForSession() {
    return this;
  }

  async createSession(desiredCapabilities, requiredCapabilities, capabilities) {
    this.sessionId = `fakeSession_${_support.util.uuidV4()}`;
    return [this.sessionId, capabilities];
  }

  async executeCommand(cmd, ...args) {
    if (!this[cmd]) {
      throw new _lib.errors.NotYetImplementedError();
    }

    if (cmd === 'createSession') {
      this.protocol = (0, _lib.determineProtocol)(...args);
    }

    return await this[cmd](...args);
  }

  async deleteSession() {
    this.jwpProxyActive = false;
    this.sessionId = null;
  }

  async getStatus() {
    return "I'm fine";
  }

  async setUrl(url) {
    return `Navigated to: ${url}`;
  }

  async getUrl() {
    return 'http://foobar.com';
  }

  async back(sessionId) {
    return sessionId;
  }

  async forward() {}

  async refresh() {
    throw new Error('Too Fresh!');
  }

  async getSession() {
    throw new _lib.errors.NoSuchDriverError();
  }

  async click(elementId, sessionId) {
    return [elementId, sessionId];
  }

  async implicitWait(ms) {
    return ms;
  }

  async clickCurrent(button) {
    return button;
  }

  async setNetworkConnection(type) {
    return type;
  }

  async moveTo(element, xOffset, yOffset) {
    return [element, xOffset, yOffset];
  }

  async getText() {
    return '';
  }

  async getAttribute(attr, elementId, sessionId) {
    return [attr, elementId, sessionId];
  }

  async setValue(value, elementId) {
    return [value, elementId];
  }

  async performTouch(...args) {
    return args;
  }

  async setFrame(frameId) {
    return frameId;
  }

  async removeApp(app) {
    return app;
  }

  async receiveAsyncResponse() {
    return {
      status: 13,
      value: 'Mishandled Driver Error'
    };
  }

  proxyActive() {
    return false;
  }

  getProxyAvoidList() {
    return [];
  }

  canProxy() {
    return false;
  }

  async notProxiedCommand() {
    return 'This was not proxied';
  }

}

exports.FakeDriver = FakeDriver;
(0, _defineProperty2.default)(FakeDriver, "newMethodMap", {
  '/session/:sessionId/noproxy': {
    GET: {
      command: 'notProxiedCommand',
      neverProxy: true
    }
  }
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
