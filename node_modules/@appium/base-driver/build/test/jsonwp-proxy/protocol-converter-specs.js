"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _constants = require("../../lib/constants");

var _protocolConverter = _interopRequireWildcard(require("../../lib/jsonwp-proxy/protocol-converter"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const {
  MJSONWP,
  W3C
} = _constants.PROTOCOLS;
describe('Protocol Converter', function () {
  describe('getTimeoutRequestObjects', function () {
    let converter;
    before(function () {
      converter = new _protocolConverter.default(_lodash.default.noop);
    });
    it('should take W3C inputs and produce MJSONWP compatible objects', function () {
      converter.downstreamProtocol = MJSONWP;
      let timeoutObjects = converter.getTimeoutRequestObjects({
        script: 100
      });
      timeoutObjects.length.should.equal(1);
      timeoutObjects[0].should.eql({
        type: 'script',
        ms: 100
      });
    });
    it('should ignore invalid entries while converting from W3C', function () {
      converter.downstreamProtocol = MJSONWP;
      let timeoutObjects = converter.getTimeoutRequestObjects({
        script: 100,
        sessionId: '5432a4f3-cd89-4781-8905-ea9d3150840c',
        bar: -1,
        baz: undefined
      });
      timeoutObjects.length.should.equal(1);
      timeoutObjects[0].should.eql({
        type: 'script',
        ms: 100
      });
    });
    it('should take multiple W3C timeouts and produce multiple MJSONWP compatible objects', function () {
      converter.downstreamProtocol = MJSONWP;
      let [scriptTimeout, pageLoadTimeout, implicitTimeout] = converter.getTimeoutRequestObjects({
        script: 100,
        pageLoad: 200,
        implicit: 300
      });
      scriptTimeout.should.eql({
        type: 'script',
        ms: 100
      });
      pageLoadTimeout.should.eql({
        type: 'page load',
        ms: 200
      });
      implicitTimeout.should.eql({
        type: 'implicit',
        ms: 300
      });
    });
    it('should take MJSONWP input and produce W3C compatible object', function () {
      converter.downstreamProtocol = W3C;
      let timeoutObjects = converter.getTimeoutRequestObjects({
        type: 'implicit',
        ms: 300
      });
      timeoutObjects.length.should.equal(1);
      timeoutObjects[0].should.eql({
        implicit: 300
      });
    });
    it('should not change the input if protocol name is unknown', function () {
      converter.downstreamProtocol = null;
      let timeoutObjects = converter.getTimeoutRequestObjects({
        type: 'implicit',
        ms: 300
      });
      timeoutObjects.length.should.equal(1);
      timeoutObjects[0].should.eql({
        type: 'implicit',
        ms: 300
      });
    });
    it('should not change the input if protocol name is unchanged', function () {
      converter.downstreamProtocol = MJSONWP;
      let timeoutObjects = converter.getTimeoutRequestObjects({
        type: 'implicit',
        ms: 300
      });
      timeoutObjects.length.should.equal(1);
      timeoutObjects[0].should.eql({
        type: 'implicit',
        ms: 300
      });
    });
  });
  describe('setValue', function () {
    let converter;
    let responseBody;
    before(function () {
      responseBody = null;
      converter = new _protocolConverter.default((url, method, body) => {
        responseBody = body;
      });
    });
    beforeEach(function () {
      responseBody = {};
    });
    it('should calculate value if not present', async function () {
      await converter.proxySetValue('', '', {
        text: 'bla'
      });
      responseBody.should.eql({
        text: 'bla',
        value: ['b', 'l', 'a']
      });
    });
    it('should calculate text if not present', async function () {
      await converter.proxySetValue('', '', {
        value: ['b', 'l', 'a']
      });
      responseBody.should.eql({
        text: 'bla',
        value: ['b', 'l', 'a']
      });
    });
    it('should keep the response body unchanged if both value and text are present', async function () {
      await converter.proxySetValue('', '', {
        text: 'bla',
        value: ['b', 'l', 'a']
      });
      responseBody.should.eql({
        text: 'bla',
        value: ['b', 'l', 'a']
      });
    });
  });
  describe('getProperty', function () {
    let jsonwpConverter, w3cConverter;
    before(function () {
      for (let command of _protocolConverter.COMMAND_URLS_CONFLICTS) {
        if (command.commandNames.includes('getProperty')) {
          jsonwpConverter = command.jsonwpConverter;
          w3cConverter = command.w3cConverter;
        }
      }
    });
    it('should convert "property/value" to "attribute/value"', function () {
      jsonwpConverter('/session/123/element/456/property/value').should.equal('/session/123/element/456/attribute/value');
    });
    it('should convert "property/:somePropName" to "attribute/:somePropName"', function () {
      jsonwpConverter('/session/123/element/456/property/somePropName').should.equal('/session/123/element/456/attribute/somePropName');
    });
    it('should not convert from JSONWP to W3C', function () {
      w3cConverter('/session/123/element/456/attribute/someAttr').should.equal('/session/123/element/456/attribute/someAttr');
      w3cConverter('/session/123/element/456/property/someProp').should.equal('/session/123/element/456/property/someProp');
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvanNvbndwLXByb3h5L3Byb3RvY29sLWNvbnZlcnRlci1zcGVjcy5qcyJdLCJuYW1lcyI6WyJNSlNPTldQIiwiVzNDIiwiUFJPVE9DT0xTIiwiZGVzY3JpYmUiLCJjb252ZXJ0ZXIiLCJiZWZvcmUiLCJQcm90b2NvbENvbnZlcnRlciIsIl8iLCJub29wIiwiaXQiLCJkb3duc3RyZWFtUHJvdG9jb2wiLCJ0aW1lb3V0T2JqZWN0cyIsImdldFRpbWVvdXRSZXF1ZXN0T2JqZWN0cyIsInNjcmlwdCIsImxlbmd0aCIsInNob3VsZCIsImVxdWFsIiwiZXFsIiwidHlwZSIsIm1zIiwic2Vzc2lvbklkIiwiYmFyIiwiYmF6IiwidW5kZWZpbmVkIiwic2NyaXB0VGltZW91dCIsInBhZ2VMb2FkVGltZW91dCIsImltcGxpY2l0VGltZW91dCIsInBhZ2VMb2FkIiwiaW1wbGljaXQiLCJyZXNwb25zZUJvZHkiLCJ1cmwiLCJtZXRob2QiLCJib2R5IiwiYmVmb3JlRWFjaCIsInByb3h5U2V0VmFsdWUiLCJ0ZXh0IiwidmFsdWUiLCJqc29ud3BDb252ZXJ0ZXIiLCJ3M2NDb252ZXJ0ZXIiLCJjb21tYW5kIiwiQ09NTUFORF9VUkxTX0NPTkZMSUNUUyIsImNvbW1hbmROYW1lcyIsImluY2x1ZGVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7Ozs7O0FBRUEsTUFBTTtBQUFDQSxFQUFBQSxPQUFEO0FBQVVDLEVBQUFBO0FBQVYsSUFBaUJDLG9CQUF2QjtBQUdBQyxRQUFRLENBQUMsb0JBQUQsRUFBdUIsWUFBWTtBQUN6Q0EsRUFBQUEsUUFBUSxDQUFDLDBCQUFELEVBQTZCLFlBQVk7QUFDL0MsUUFBSUMsU0FBSjtBQUNBQyxJQUFBQSxNQUFNLENBQUMsWUFBWTtBQUNqQkQsTUFBQUEsU0FBUyxHQUFHLElBQUlFLDBCQUFKLENBQXNCQyxnQkFBRUMsSUFBeEIsQ0FBWjtBQUNELEtBRkssQ0FBTjtBQUdBQyxJQUFBQSxFQUFFLENBQUMsK0RBQUQs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aURBQS9FO0FBQ0QsS0FGQyxDQUFGO0FBR0FQLElBQUFBLEVBQUUsQ0FBQyx1Q0FBRCxFQUEwQyxZQUFZO0FBQ3RENkIsTUFBQUEsWUFBWSxDQUFDLDZDQUFELENBQVosQ0FBNER2QixNQUE1RCxDQUFtRUMsS0FBbkUsQ0FBeUUsNkNBQXpFO0FBQ0FzQixNQUFBQSxZQUFZLENBQUMsNENBQUQsQ0FBWixDQUEyRHZCLE1BQTNELENBQWtFQyxLQUFsRSxDQUF3RSw0Q0FBeEU7QUFDRCxLQUhDLENBQUY7QUFJRCxHQXBCTyxDQUFSO0FBcUJELENBMUhPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgUFJPVE9DT0xTIH0gZnJvbSAnLi4vLi4vbGliL2NvbnN0YW50cyc7XG5pbXBvcnQgUHJvdG9jb2xDb252ZXJ0ZXIsIHtDT01NQU5EX1VSTFNfQ09ORkxJQ1RTfSBmcm9tICcuLi8uLi9saWIvanNvbndwLXByb3h5L3Byb3RvY29sLWNvbnZlcnRlcic7XG5cbmNvbnN0IHtNSlNPTldQLCBXM0N9ID0gUFJPVE9DT0xTO1xuXG5cbmRlc2NyaWJlKCdQcm90b2NvbCBDb252ZXJ0ZXInLCBmdW5jdGlvbiAoKSB7XG4gIGRlc2NyaWJlKCdnZXRUaW1lb3V0UmVxdWVzdE9iamVjdHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGNvbnZlcnRlcjtcbiAgICBiZWZvcmUoZnVuY3Rpb24gKCkge1xuICAgICAgY29udmVydGVyID0gbmV3IFByb3RvY29sQ29udmVydGVyKF8ubm9vcCk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCB0YWtlIFczQyBpbnB1dHMgYW5kIHByb2R1Y2UgTUpTT05XUCBjb21wYXRpYmxlIG9iamVjdHMnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjb252ZXJ0ZXIuZG93bnN0cmVhbVByb3RvY29sID0gTUpTT05XUDtcbiAgICAgIGxldCB0aW1lb3V0T2JqZWN0cyA9IGNvbnZlcnRlci5nZXRUaW1lb3V0UmVxdWVzdE9iamVjdHMoe3NjcmlwdDogMTAwfSk7XG4gICAgICB0aW1lb3V0T2JqZWN0cy5sZW5ndGguc2hvdWxkLmVxdWFsKDEpO1xuICAgICAgdGltZW91dE9iamVjdHNbMF0uc2hvdWxkLmVxbCh7dHlwZTogJ3NjcmlwdCcsIG1zOiAxMDB9KTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGlnbm9yZSBpbnZhbGlkIGVudHJpZXMgd2hpbGUgY29udmVydGluZyBmcm9tIFczQycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnZlcnRlci5kb3duc3RyZWFtUHJvdG9jb2wgPSBNSlNPTldQO1xuICAgICAgbGV0IHRpbWVvdXRPYmplY3RzID0gY29udmVydGVyLmdldFRpbWVvdXRSZXF1ZXN0T2JqZWN0cyh7XG4gICAgICAgIHNjcmlwdDogMTAwLFxuICAgICAgICBzZXNzaW9uSWQ6ICc1NDMyYTRmMy1jZDg5LTQ3ODEtODkwNS1lYTlkMzE1MDg0MGMnLFxuICAgICAgICBiYXI6IC0xLFxuICAgICAgICBiYXo6IHVuZGVmaW5lZCxcbiAgICAgIH0pO1xuICAgICAgdGltZW91dE9iamVjdHMubGVuZ3RoLnNob3VsZC5lcXVhbCgxKTtcbiAgICAgIHRpbWVvdXRPYmplY3RzWzBdLnNob3VsZC5lcWwoe3R5cGU6ICdzY3JpcHQnLCBtczogMTAwfSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCB0YWtlIG11bHRpcGxlIFczQyB0aW1lb3V0cyBhbmQgcHJvZHVjZSBtdWx0aXBsZSBNSlNPTldQIGNvbXBhdGlibGUgb2JqZWN0cycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnZlcnRlci5kb3duc3RyZWFtUHJvdG9jb2wgPSBNSlNPTldQO1xuICAgICAgbGV0IFtzY3JpcHRUaW1lb3V0LCBwYWdlTG9hZFRpbWVvdXQsIGltcGxpY2l0VGltZW91dF0gPSBjb252ZXJ0ZXIuZ2V0VGltZW91dFJlcXVlc3RPYmplY3RzKHtzY3JpcHQ6IDEwMCwgcGFnZUxvYWQ6IDIwMCwgaW1wbGljaXQ6IDMwMH0pO1xuICAgICAgc2NyaXB0VGltZW91dC5zaG91bGQuZXFsKHtcbiAgICAgICAgdHlwZTogJ3NjcmlwdCcsXG4gICAgICAgIG1zOiAxMDAsXG4gICAgICB9KTtcbiAgICAgIHBhZ2VMb2FkVGltZW91dC5zaG91bGQuZXFsKHtcbiAgICAgICAgdHlwZTogJ3BhZ2UgbG9hZCcsXG4gICAgICAgIG1zOiAyMDAsXG4gICAgICB9KTtcbiAgICAgIGltcGxpY2l0VGltZW91dC5zaG91bGQuZXFsKHtcbiAgICAgICAgdHlwZTogJ2ltcGxpY2l0JyxcbiAgICAgICAgbXM6IDMwMCxcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgdGFrZSBNSlNPTldQIGlucHV0IGFuZCBwcm9kdWNlIFczQyBjb21wYXRpYmxlIG9iamVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnZlcnRlci5kb3duc3RyZWFtUHJvdG9jb2wgPSBXM0M7XG4gICAgICBsZXQgdGltZW91dE9iamVjdHMgPSBjb252ZXJ0ZXIuZ2V0VGltZW91dFJlcXVlc3RPYmplY3RzKHt0eXBlOiAnaW1wbGljaXQnLCBtczogMzAwfSk7XG4gICAgICB0aW1lb3V0T2JqZWN0cy5sZW5ndGguc2hvdWxkLmVxdWFsKDEpO1xuICAgICAgdGltZW91dE9iamVjdHNbMF0uc2hvdWxkLmVxbCh7aW1wbGljaXQ6IDMwMH0pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgbm90IGNoYW5nZSB0aGUgaW5wdXQgaWYgcHJvdG9jb2wgbmFtZSBpcyB1bmtub3duJywgZnVuY3Rpb24gKCkge1xuICAgICAgY29udmVydGVyLmRvd25zdHJlYW1Qcm90b2NvbCA9IG51bGw7XG4gICAgICBsZXQgdGltZW91dE9iamVjdHMgPSBjb252ZXJ0ZXIuZ2V0VGltZW91dFJlcXVlc3RPYmplY3RzKHt0eXBlOiAnaW1wbGljaXQnLCBtczogMzAwfSk7XG4gICAgICB0aW1lb3V0T2JqZWN0cy5sZW5ndGguc2hvdWxkLmVxdWFsKDEpO1xuICAgICAgdGltZW91dE9iamVjdHNbMF0uc2hvdWxkLmVxbCh7dHlwZTogJ2ltcGxpY2l0JywgbXM6IDMwMH0pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgbm90IGNoYW5nZSB0aGUgaW5wdXQgaWYgcHJvdG9jb2wgbmFtZSBpcyB1bmNoYW5nZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjb252ZXJ0ZXIuZG93bnN0cmVhbVByb3RvY29sID0gTUpTT05XUDtcbiAgICAgIGxldCB0aW1lb3V0T2JqZWN0cyA9IGNvbnZlcnRlci5nZXRUaW1lb3V0UmVxdWVzdE9iamVjdHMoe3R5cGU6ICdpbXBsaWNpdCcsIG1zOiAzMDB9KTtcbiAgICAgIHRpbWVvdXRPYmplY3RzLmxlbmd0aC5zaG91bGQuZXF1YWwoMSk7XG4gICAgICB0aW1lb3V0T2JqZWN0c1swXS5zaG91bGQuZXFsKHt0eXBlOiAnaW1wbGljaXQnLCBtczogMzAwfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdzZXRWYWx1ZScsIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgY29udmVydGVyO1xuICAgIGxldCByZXNwb25zZUJvZHk7XG4gICAgYmVmb3JlKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlc3BvbnNlQm9keSA9IG51bGw7XG4gICAgICBjb252ZXJ0ZXIgPSBuZXcgUHJvdG9jb2xDb252ZXJ0ZXIoKHVybCwgbWV0aG9kLCBib2R5KSA9PiB7XG4gICAgICAgIHJlc3BvbnNlQm9keSA9IGJvZHk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlc3BvbnNlQm9keSA9IHt9O1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBjYWxjdWxhdGUgdmFsdWUgaWYgbm90IHByZXNlbnQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBhd2FpdCBjb252ZXJ0ZXIucHJveHlTZXRWYWx1ZSgnJywgJycsIHtcbiAgICAgICAgdGV4dDogJ2JsYScsXG4gICAgICB9KTtcbiAgICAgIHJlc3BvbnNlQm9keS5zaG91bGQuZXFsKHtcbiAgICAgICAgdGV4dDogJ2JsYScsXG4gICAgICAgIHZhbHVlOiBbJ2InLCAnbCcsICdhJ10sXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGNhbGN1bGF0ZSB0ZXh0IGlmIG5vdCBwcmVzZW50JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYXdhaXQgY29udmVydGVyLnByb3h5U2V0VmFsdWUoJycsICcnLCB7XG4gICAgICAgIHZhbHVlOiBbJ2InLCAnbCcsICdhJ10sXG4gICAgICB9KTtcbiAgICAgIHJlc3BvbnNlQm9keS5zaG91bGQuZXFsKHtcbiAgICAgICAgdGV4dDogJ2JsYScsXG4gICAgICAgIHZhbHVlOiBbJ2InLCAnbCcsICdhJ10sXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGtlZXAgdGhlIHJlc3BvbnNlIGJvZHkgdW5jaGFuZ2VkIGlmIGJvdGggdmFsdWUgYW5kIHRleHQgYXJlIHByZXNlbnQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBhd2FpdCBjb252ZXJ0ZXIucHJveHlTZXRWYWx1ZSgnJywgJycsIHtcbiAgICAgICAgdGV4dDogJ2JsYScsXG4gICAgICAgIHZhbHVlOiBbJ2InLCAnbCcsICdhJ10sXG4gICAgICB9KTtcbiAgICAgIHJlc3BvbnNlQm9keS5zaG91bGQuZXFsKHtcbiAgICAgICAgdGV4dDogJ2JsYScsXG4gICAgICAgIHZhbHVlOiBbJ2InLCAnbCcsICdhJ10sXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG4gIGRlc2NyaWJlKCdnZXRQcm9wZXJ0eScsIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQganNvbndwQ29udmVydGVyLCB3M2NDb252ZXJ0ZXI7XG4gICAgYmVmb3JlKGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAobGV0IGNvbW1hbmQgb2YgQ09NTUFORF9VUkxTX0NPTkZMSUNUUykge1xuICAgICAgICBpZiAoY29tbWFuZC5jb21tYW5kTmFtZXMuaW5jbHVkZXMoJ2dldFByb3BlcnR5JykpIHtcbiAgICAgICAgICBqc29ud3BDb252ZXJ0ZXIgPSBjb21tYW5kLmpzb253cENvbnZlcnRlcjtcbiAgICAgICAgICB3M2NDb252ZXJ0ZXIgPSBjb21tYW5kLnczY0NvbnZlcnRlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgY29udmVydCBcInByb3BlcnR5L3ZhbHVlXCIgdG8gXCJhdHRyaWJ1dGUvdmFsdWVcIicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGpzb253cENvbnZlcnRlcignL3Nlc3Npb24vMTIzL2VsZW1lbnQvNDU2L3Byb3BlcnR5L3ZhbHVlJykuc2hvdWxkLmVxdWFsKCcvc2Vzc2lvbi8xMjMvZWxlbWVudC80NTYvYXR0cmlidXRlL3ZhbHVlJyk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBjb252ZXJ0IFwicHJvcGVydHkvOnNvbWVQcm9wTmFtZVwiIHRvIFwiYXR0cmlidXRlLzpzb21lUHJvcE5hbWVcIicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGpzb253cENvbnZlcnRlcignL3Nlc3Npb24vMTIzL2VsZW1lbnQvNDU2L3Byb3BlcnR5L3NvbWVQcm9wTmFtZScpLnNob3VsZC5lcXVhbCgnL3Nlc3Npb24vMTIzL2VsZW1lbnQvNDU2L2F0dHJpYnV0ZS9zb21lUHJvcE5hbWUnKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIG5vdCBjb252ZXJ0IGZyb20gSlNPTldQIHRvIFczQycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHczY0NvbnZlcnRlcignL3Nlc3Npb24vMTIzL2VsZW1lbnQvNDU2L2F0dHJpYnV0ZS9zb21lQXR0cicpLnNob3VsZC5lcXVhbCgnL3Nlc3Npb24vMTIzL2VsZW1lbnQvNDU2L2F0dHJpYnV0ZS9zb21lQXR0cicpO1xuICAgICAgdzNjQ29udmVydGVyKCcvc2Vzc2lvbi8xMjMvZWxlbWVudC80NTYvcHJvcGVydHkvc29tZVByb3AnKS5zaG91bGQuZXF1YWwoJy9zZXNzaW9uLzEyMy9lbGVtZW50LzQ1Ni9wcm9wZXJ0eS9zb21lUHJvcCcpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sImZpbGUiOiJ0ZXN0L2pzb253cC1wcm94eS9wcm90b2NvbC1jb252ZXJ0ZXItc3BlY3MuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
