"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _log = _interopRequireDefault(require("../../../lib/basedriver/commands/log"));

var _sinon = _interopRequireDefault(require("sinon"));

var _lodash = _interopRequireDefault(require("lodash"));

const expect = chai.expect;
const FIRST_LOGS = ['first', 'logs'];
const SECOND_LOGS = ['second', 'logs'];
const SUPPORTED_LOG_TYPES = {
  one: {
    description: 'First logs',
    getter: () => _lodash.default.clone(FIRST_LOGS)
  },
  two: {
    description: 'Seconds logs',
    getter: () => _lodash.default.clone(SECOND_LOGS)
  }
};
describe('log commands -', function () {
  beforeEach(function () {
    _log.default.supportedLogTypes = {};
  });
  describe('getLogTypes', function () {
    it('should return empty array when no supported log types', async function () {
      (await _log.default.getLogTypes()).should.eql([]);
    });
    it('should return keys to log type object', async function () {
      _log.default.supportedLogTypes = SUPPORTED_LOG_TYPES;
      (await _log.default.getLogTypes()).should.eql(['one', 'two']);
    });
  });
  describe('getLog', function () {
    beforeEach(function () {
      _sinon.default.spy(SUPPORTED_LOG_TYPES.one, 'getter');

      _sinon.default.spy(SUPPORTED_LOG_TYPES.two, 'getter');
    });
    afterEach(function () {
      SUPPORTED_LOG_TYPES.one.getter.restore();
      SUPPORTED_LOG_TYPES.two.getter.restore();
    });
    it('should throw error if log type not supported', async function () {
      await _log.default.getLog('one').should.eventually.be.rejected;
      SUPPORTED_LOG_TYPES.one.getter.called.should.be.false;
      SUPPORTED_LOG_TYPES.two.getter.called.should.be.false;
    });
    it('should throw an error with available log types if log type not supported', async function () {
      _log.default.supportedLogTypes = SUPPORTED_LOG_TYPES;
      let err;

      try {
        await _log.default.getLog('three');
      } catch (_err) {
        err = _err;
      }

      expect(err).to.exist;
      err.message.should.eql(`Unsupported log type 'three'. Supported types: {"one":"First logs","two":"Seconds logs"}`);
      SUPPORTED_LOG_TYPES.one.getter.called.should.be.false;
      SUPPORTED_LOG_TYPES.two.getter.called.should.be.false;
    });
    it('should call getter on appropriate log when found', async function () {
      _log.default.supportedLogTypes = SUPPORTED_LOG_TYPES;
      let logs = await _log.default.getLog('one');
      logs.should.eql(FIRST_LOGS);
      SUPPORTED_LOG_TYPES.one.getter.called.should.be.true;
      SUPPORTED_LOG_TYPES.two.getter.called.should.be.false;
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvYmFzZWRyaXZlci9jb21tYW5kcy9sb2ctc3BlY3MuanMiXSwibmFtZXMiOlsiZXhwZWN0IiwiY2hhaSIsIkZJUlNUX0xPR1MiLCJTRUNPTkRfTE9HUyIsIlNVUFBPUlRFRF9MT0dfVFlQRVMiLCJvbmUiLCJkZXNjcmlwdGlvbiIsImdldHRlciIsIl8iLCJjbG9uZSIsInR3byIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImxvZ0NvbW1hbmRzIiwic3VwcG9ydGVkTG9nVHlwZXMiLCJpdCIsImdldExvZ1R5cGVzIiwic2hvdWxkIiwiZXFsIiwic2lub24iLCJzcHkiLCJhZnRlckVhY2giLCJyZXN0b3JlIiwiZ2V0TG9nIiwiZXZlbnR1YWxseSIsImJlIiwicmVqZWN0ZWQiLCJjYWxsZWQiLCJmYWxzZSIsImVyciIsIl9lcnIiLCJ0byIsImV4aXN0IiwibWVzc2FnZSIsImxvZ3MiLCJ0cnVlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxNQUFNLEdBQUdDLElBQUksQ0FBQ0QsTUFBcEI7QUFFQSxNQUFNRSxVQUFVLEdBQUcsQ0FBQyxPQUFELEVBQVUsTUFBVixDQUFuQjtBQUNBLE1BQU1DLFdBQVcsR0FBRyxDQUFDLFFBQUQsRUFBVyxNQUFYLENBQXBCO0FBQ0EsTUFBTUMsbUJBQW1CLEdBQUc7QUFDMUJDLEVBQUFBLEdBQUcsRUFBRTtBQUNIQyxJQUFBQSxXQUFXLEVBQUUsWUFEVjtBQUVIQyxJQUFBQSxNQUFNLEVBQUUsTUFBTUMsZ0JBQUVDLEtBQUYsQ0FBUVAsVUFBUjtBQUZYLEdBRHFCO0FBSzFCUSxFQUFBQSxHQUFHLEVBQUU7QUFDSEosSUFBQUEsV0FBVyxFQUFFLGNBRFY7QUFFSEMsSUFBQUEsTUFBTSxFQUFFLE1BQU1DLGdCQUFFQyxLQUFGLENBQVFOLFdBQVI7QUFGWDtBQUxxQixDQUE1QjtBQVdBUSxRQUFRLENBQUMsZ0JBQUQsRUFBbUIsWUFBWTtBQUNyQ0MsRUFBQUEsVUFBVSxDQUFDLFlB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LE1BQUwsQ0FBWUMsR0FBWixDQUFnQmhCLFVBQWhCO0FBQ0FFLE1BQUFBLG1CQUFtQixDQUFDQyxHQUFwQixDQUF3QkUsTUFBeEIsQ0FBK0JvQixNQUEvQixDQUFzQ1YsTUFBdEMsQ0FBNkNRLEVBQTdDLENBQWdEVSxJQUFoRDtBQUNBL0IsTUFBQUEsbUJBQW1CLENBQUNNLEdBQXBCLENBQXdCSCxNQUF4QixDQUErQm9CLE1BQS9CLENBQXNDVixNQUF0QyxDQUE2Q1EsRUFBN0MsQ0FBZ0RHLEtBQWhEO0FBQ0QsS0FOQyxDQUFGO0FBT0QsR0FsQ08sQ0FBUjtBQW1DRCxDQWpETyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZ0NvbW1hbmRzIGZyb20gJy4uLy4uLy4uL2xpYi9iYXNlZHJpdmVyL2NvbW1hbmRzL2xvZyc7XG5pbXBvcnQgc2lub24gZnJvbSAnc2lub24nO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuXG5jb25zdCBleHBlY3QgPSBjaGFpLmV4cGVjdDtcblxuY29uc3QgRklSU1RfTE9HUyA9IFsnZmlyc3QnLCAnbG9ncyddO1xuY29uc3QgU0VDT05EX0xPR1MgPSBbJ3NlY29uZCcsICdsb2dzJ107XG5jb25zdCBTVVBQT1JURURfTE9HX1RZUEVTID0ge1xuICBvbmU6IHtcbiAgICBkZXNjcmlwdGlvbjogJ0ZpcnN0IGxvZ3MnLFxuICAgIGdldHRlcjogKCkgPT4gXy5jbG9uZShGSVJTVF9MT0dTKSxcbiAgfSxcbiAgdHdvOiB7XG4gICAgZGVzY3JpcHRpb246ICdTZWNvbmRzIGxvZ3MnLFxuICAgIGdldHRlcjogKCkgPT4gXy5jbG9uZShTRUNPTkRfTE9HUyksXG4gIH0sXG59O1xuXG5kZXNjcmliZSgnbG9nIGNvbW1hbmRzIC0nLCBmdW5jdGlvbiAoKSB7XG4gIGJlZm9yZUVhY2goZnVuY3Rpb24gKCkge1xuICAgIC8vIHJlc2V0IHRoZSBzdXBwb3J0ZWQgbG9nIHR5cGVzXG4gICAgbG9nQ29tbWFuZHMuc3VwcG9ydGVkTG9nVHlwZXMgPSB7fTtcbiAgfSk7XG4gIGRlc2NyaWJlKCdnZXRMb2dUeXBlcycsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBlbXB0eSBhcnJheSB3aGVuIG5vIHN1cHBvcnRlZCBsb2cgdHlwZXMnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAoYXdhaXQgbG9nQ29tbWFuZHMuZ2V0TG9nVHlwZXMoKSkuc2hvdWxkLmVxbChbXSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4ga2V5cyB0byBsb2cgdHlwZSBvYmplY3QnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBsb2dDb21tYW5kcy5zdXBwb3J0ZWRMb2dUeXBlcyA9IFNVUFBPUlRFRF9MT0dfVFlQRVM7XG4gICAgICAoYXdhaXQgbG9nQ29tbWFuZHMuZ2V0TG9nVHlwZXMoKSkuc2hvdWxkLmVxbChbJ29uZScsICd0d28nXSk7XG4gICAgfSk7XG4gIH0pO1xuICBkZXNjcmliZSgnZ2V0TG9nJywgZnVuY3Rpb24gKCkge1xuICAgIGJlZm9yZUVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgc2lub24uc3B5KFNVUFBPUlRFRF9MT0dfVFlQRVMub25lLCAnZ2V0dGVyJyk7XG4gICAgICBzaW5vbi5zcHkoU1VQUE9SVEVEX0xPR19UWVBFUy50d28sICdnZXR0ZXInKTtcbiAgICB9KTtcbiAgICBhZnRlckVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgU1VQUE9SVEVEX0xPR19UWVBFUy5vbmUuZ2V0dGVyLnJlc3RvcmUoKTtcbiAgICAgIFNVUFBPUlRFRF9MT0dfVFlQRVMudHdvLmdldHRlci5yZXN0b3JlKCk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBlcnJvciBpZiBsb2cgdHlwZSBub3Qgc3VwcG9ydGVkJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgYXdhaXQgbG9nQ29tbWFuZHMuZ2V0TG9nKCdvbmUnKS5zaG91bGQuZXZlbnR1YWxseS5iZS5yZWplY3RlZDtcbiAgICAgIFNVUFBPUlRFRF9MT0dfVFlQRVMub25lLmdldHRlci5jYWxsZWQuc2hvdWxkLmJlLmZhbHNlO1xuICAgICAgU1VQUE9SVEVEX0xPR19UWVBFUy50d28uZ2V0dGVyLmNhbGxlZC5zaG91bGQuYmUuZmFsc2U7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciB3aXRoIGF2YWlsYWJsZSBsb2cgdHlwZXMgaWYgbG9nIHR5cGUgbm90IHN1cHBvcnRlZCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxvZ0NvbW1hbmRzLnN1cHBvcnRlZExvZ1R5cGVzID0gU1VQUE9SVEVEX0xPR19UWVBFUztcbiAgICAgIGxldCBlcnI7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBsb2dDb21tYW5kcy5nZXRMb2coJ3RocmVlJyk7XG4gICAgICB9IGNhdGNoIChfZXJyKSB7XG4gICAgICAgIGVyciA9IF9lcnI7XG4gICAgICB9XG4gICAgICBleHBlY3QoZXJyKS50by5leGlzdDtcbiAgICAgIGVyci5tZXNzYWdlLnNob3VsZC5lcWwoYFVuc3VwcG9ydGVkIGxvZyB0eXBlICd0aHJlZScuIFN1cHBvcnRlZCB0eXBlczoge1wib25lXCI6XCJGaXJzdCBsb2dzXCIsXCJ0d29cIjpcIlNlY29uZHMgbG9nc1wifWApO1xuICAgICAgU1VQUE9SVEVEX0xPR19UWVBFUy5vbmUuZ2V0dGVyLmNhbGxlZC5zaG91bGQuYmUuZmFsc2U7XG4gICAgICBTVVBQT1JURURfTE9HX1RZUEVTLnR3by5nZXR0ZXIuY2FsbGVkLnNob3VsZC5iZS5mYWxzZTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGNhbGwgZ2V0dGVyIG9uIGFwcHJvcHJpYXRlIGxvZyB3aGVuIGZvdW5kJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgbG9nQ29tbWFuZHMuc3VwcG9ydGVkTG9nVHlwZXMgPSBTVVBQT1JURURfTE9HX1RZUEVTO1xuICAgICAgbGV0IGxvZ3MgPSBhd2FpdCBsb2dDb21tYW5kcy5nZXRMb2coJ29uZScpO1xuICAgICAgbG9ncy5zaG91bGQuZXFsKEZJUlNUX0xPR1MpO1xuICAgICAgU1VQUE9SVEVEX0xPR19UWVBFUy5vbmUuZ2V0dGVyLmNhbGxlZC5zaG91bGQuYmUudHJ1ZTtcbiAgICAgIFNVUFBPUlRFRF9MT0dfVFlQRVMudHdvLmdldHRlci5jYWxsZWQuc2hvdWxkLmJlLmZhbHNlO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sImZpbGUiOiJ0ZXN0L2Jhc2Vkcml2ZXIvY29tbWFuZHMvbG9nLXNwZWNzLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uIn0=
