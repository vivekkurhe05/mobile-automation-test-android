"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../../lib");

var _axios = _interopRequireDefault(require("axios"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _helpers = require("../helpers");

var _capabilities = require("../../lib/basedriver/capabilities");

const {
  POST,
  DELETE
} = _helpers.METHODS;

function baseDriverE2ETests(DriverClass, defaultCaps = {}) {
  var _defaultCaps$appiumA;

  let address = (_defaultCaps$appiumA = defaultCaps['appium:address']) !== null && _defaultCaps$appiumA !== void 0 ? _defaultCaps$appiumA : _helpers.TEST_HOST;
  let port = defaultCaps['appium:port'];
  const className = DriverClass.name || '(unknown driver)';
  describe(`BaseDriver E2E (as ${className})`, function () {
    let baseServer, d;
    let newSessionURL;
    let createAppiumTestURL;
    let createSessionURL;
    before(async function () {
      var _port;

      port = (_port = port) !== null && _port !== void 0 ? _port : await (0, _helpers.getTestPort)();
      defaultCaps = { ...defaultCaps,
        'appium:port': port
      };
      d = new DriverClass({
        port,
        address
      });
      baseServer = await (0, _lib.server)({
        routeConfiguringFunction: (0, _lib.routeConfiguringFunction)(d),
        port,
        hostname: _helpers.TEST_HOST
      });
      createAppiumTestURL = (0, _helpers.createAppiumURL)(address, port);
      newSessionURL = createAppiumTestURL('', 'session');
      createSessionURL = createAppiumTestURL(_lodash.default, '');
    });
    after(async function () {
      await baseServer.close();
    });

    async function startSession(caps) {
      return (await (0, _axios.default)({
        url: newSessionURL,
        method: POST,
        data: {
          capabilities: {
            alwaysMatch: caps,
            firstMatch: [{}]
          }
        }
      })).data.value;
    }

    async function endSession(id) {
      return (await (0, _axios.default)({
        url: createSessionURL(id),
        method: DELETE,
        validateStatus: null
      })).data.value;
    }

    async function getSession(id) {
      return (await (0, _axios.default)({
        url: createSessionURL(id)
      })).data.value;
    }

    describe('session handling', function () {
      it('should handle idempotency while creating sessions', async function () {
        const sessionIds = [];
        let times = 0;

        do {
          const {
            sessionId
          } = (await (0, _axios.default)({
            url: newSessionURL,
            headers: {
              'X-Idempotency-Key': '123456'
            },
            method: POST,
            data: {
              capabilities: {
                alwaysMatch: defaultCaps,
                firstMatch: [{}]
              }
            },
            simple: false,
            resolveWithFullResponse: true
          })).data.value;
          sessionIds.push(sessionId);
          times++;
        } while (times < 2);

        _lodash.default.uniq(sessionIds).length.should.equal(1);

        const {
          status,
          data
        } = await (0, _axios.default)({
          url: createSessionURL(sessionIds[0]),
          method: DELETE
        });
        status.should.equal(200);
        should.equal(data.value, null);
      });
      it('should handle idempotency while creating parallel sessions', async function () {
        const reqs = [];
        let times = 0;

        do {
          reqs.push((0, _axios.default)({
            url: newSessionURL,
            headers: {
              'X-Idempotency-Key': '12345'
            },
            method: POST,
            data: {
              capabilities: {
                alwaysMatch: defaultCaps,
                firstMatch: [{}]
              }
            }
          }));
          times++;
        } while (times < 2);

        const sessionIds = (await _bluebird.default.all(reqs)).map(x => x.data.value.sessionId);

        _lodash.default.uniq(sessionIds).length.should.equal(1);

        const {
          status,
          data
        } = await (0, _axios.default)({
          url: createSessionURL(sessionIds[0]),
          method: DELETE
        });
        status.should.equal(200);
        should.equal(data.value, null);
      });
      it('should create session and retrieve a session id, then delete it', async function () {
        let {
          status,
          data
        } = await (0, _axios.default)({
          url: newSessionURL,
          method: POST,
          data: {
            capabilities: {
              alwaysMatch: defaultCaps,
              firstMatch: [{}]
            }
          }
        });
        status.should.equal(200);
        should.exist(data.value.sessionId);
        data.value.capabilities.platformName.should.equal(defaultCaps.platformName);
        data.value.capabilities.deviceName.should.equal(defaultCaps['appium:deviceName']);
        ({
          status,
          data
        } = await (0, _axios.default)({
          url: createSessionURL(d.sessionId),
          method: DELETE
        }));
        status.should.equal(200);
        should.equal(data.value, null);
        should.equal(d.sessionId, null);
      });
    });
    it.skip('should throw NYI for commands not implemented', async function () {});
    describe('command timeouts', function () {
      let originalFindElement, originalFindElements;

      async function startTimeoutSession(timeout) {
        const caps = _lodash.default.cloneDeep(defaultCaps);

        caps['appium:newCommandTimeout'] = timeout;
        return await startSession(caps);
      }

      before(function () {
        originalFindElement = d.findElement;

        d.findElement = function () {
          return 'foo';
        }.bind(d);

        originalFindElements = d.findElements;

        d.findElements = async function () {
          await _bluebird.default.delay(200);
          return ['foo'];
        }.bind(d);
      });
      after(function () {
        d.findElement = originalFindElement;
        d.findElements = originalFindElements;
      });
      it('should set a default commandTimeout', async function () {
        let newSession = await startTimeoutSession();
        d.newCommandTimeoutMs.should.be.above(0);
        await endSession(newSession.sessionId);
      });
      it('should timeout on commands using commandTimeout cap', async function () {
        let newSession = await startTimeoutSession(0.25);
        let sessionURL = createSessionURL(d.sessionId);
        await (0, _axios.default)({
          url: createAppiumTestURL(d.sessionId, 'element'),
          method: POST,
          data: {
            using: 'name',
            value: 'foo'
          }
        });
        await _bluebird.default.delay(400);
        const {
          data
        } = await (0, _axios.default)({
          url: sessionURL,
          validateStatus: null
        });
        should.equal(data.value.error, 'invalid session id');
        should.equal(d.sessionId, null);
        const resp = await endSession(newSession.sessionId);
        should.equal(resp.error, 'invalid session id');
      });
      it('should not timeout with commandTimeout of false', async function () {
        let newSession = await startTimeoutSession(0.1);
        let start = Date.now();
        const {
          value
        } = (await (0, _axios.default)({
          url: createAppiumTestURL(d.sessionId, 'elements'),
          method: POST,
          data: {
            using: 'name',
            value: 'foo'
          }
        })).data;
        (Date.now() - start).should.be.above(150);
        value.should.eql(['foo']);
        await endSession(newSession.sessionId);
      });
      it('should not timeout with commandTimeout of 0', async function () {
        d.newCommandTimeoutMs = 2;
        let newSession = await startTimeoutSession(0);
        await (0, _axios.default)({
          url: createAppiumTestURL(d.sessionId, 'element'),
          method: POST,
          data: {
            using: 'name',
            value: 'foo'
          }
        });
        await _bluebird.default.delay(400);
        const {
          value
        } = (await (0, _axios.default)({
          url: createSessionURL(d.sessionId)
        })).data;
        value.platformName.should.equal(defaultCaps.platformName);
        const resp = await endSession(newSession.sessionId);
        should.equal(resp, null);
        d.newCommandTimeoutMs = 60 * 1000;
      });
      it('should not timeout if its just the command taking awhile', async function () {
        let newSession = await startTimeoutSession(0.25);
        let sessionURL = createSessionURL(d.sessionId);
        await (0, _axios.default)({
          url: createAppiumTestURL(d.sessionId, 'element'),
          method: POST,
          data: {
            using: 'name',
            value: 'foo'
          }
        });
        await _bluebird.default.delay(400);
        const {
          value
        } = (await (0, _axios.default)({
          url: sessionURL,
          validateStatus: null
        })).data;
        value.error.should.equal('invalid session id');
        should.equal(d.sessionId, null);
        const resp = await endSession(newSession.sessionId);
        resp.error.should.equal('invalid session id');
      });
      it('should not have a timer running before or after a session', async function () {
        should.not.exist(d.noCommandTimer);
        let newSession = await startTimeoutSession(0.25);
        newSession.sessionId.should.equal(d.sessionId);
        should.exist(d.noCommandTimer);
        await endSession(newSession.sessionId);
        should.not.exist(d.noCommandTimer);
      });
    });
    describe('settings api', function () {
      before(function () {
        d.settings = new _lib.DeviceSettings({
          ignoreUnimportantViews: false
        });
      });
      it('should be able to get settings object', function () {
        d.settings.getSettings().ignoreUnimportantViews.should.be.false;
      });
      it('should throw error when updateSettings method is not defined', async function () {
        await d.settings.update({
          ignoreUnimportantViews: true
        }).should.eventually.be.rejectedWith('onSettingsUpdate');
      });
      it('should throw error for invalid update object', async function () {
        await d.settings.update('invalid json').should.eventually.be.rejectedWith('JSON');
      });
    });
    describe('unexpected exits', function () {
      it('should reject a current command when the driver crashes', async function () {
        d._oldGetStatus = d.getStatus;

        try {
          d.getStatus = async function () {
            await _bluebird.default.delay(5000);
          }.bind(d);

          const reqPromise = (0, _axios.default)({
            url: createAppiumTestURL('', 'status'),
            validateStatus: null
          });
          await _bluebird.default.delay(100);
          const shutdownEventPromise = new _bluebird.default((resolve, reject) => {
            setTimeout(() => reject(new Error('onUnexpectedShutdown event is expected to be fired within 5 seconds timeout')), 5000);
            d.onUnexpectedShutdown(resolve);
          });
          d.startUnexpectedShutdown(new Error('Crashytimes'));
          const {
            value
          } = (await reqPromise).data;
          value.message.should.contain('Crashytimes');
          await shutdownEventPromise;
        } finally {
          d.getStatus = d._oldGetStatus;
        }
      });
    });
    describe('event timings', function () {
      it('should not add timings if not using opt-in cap', async function () {
        const session = await startSession(defaultCaps);
        const res = await getSession(session.sessionId);
        should.not.exist(res.events);
        await endSession(session.sessionId);
      });
      it('should add start session timings', async function () {
        const caps = Object.assign({}, defaultCaps, {
          'appium:eventTimings': true
        });
        const session = await startSession(caps);
        const res = await getSession(session.sessionId);
        should.exist(res.events);
        should.exist(res.events.newSessionRequested);
        should.exist(res.events.newSessionStarted);
        res.events.newSessionRequested[0].should.be.a('number');
        res.events.newSessionStarted[0].should.be.a('number');
        await endSession(session.sessionId);
      });
    });

    if (DriverClass === _lib.BaseDriver) {
      describe('special appium:options capability', function () {
        it('should be able to start a session with caps held in appium:options', async function () {
          const ret = await startSession({
            platformName: 'iOS',
            [_capabilities.PREFIXED_APPIUM_OPTS_CAP]: {
              platformVersion: '11.4',
              'appium:deviceName': 'iPhone 11'
            }
          });
          d.opts.platformVersion.should.eql('11.4');
          d.opts.deviceName.should.eql('iPhone 11');
          await endSession(ret.sessionId);
        });
      });
    }
  });
}

var _default = baseDriverE2ETests;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
