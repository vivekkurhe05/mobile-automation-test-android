"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lruCache = _interopRequireDefault(require("lru-cache"));

var _support = require("@appium/support");

var _constants = require("../constants");

const GENERIC_PROTOCOL = 'GENERIC';

const mjsonwpLog = _support.logger.getLogger('MJSONWP');

const w3cLog = _support.logger.getLogger('W3C');

const genericProtocolLog = _support.logger.getLogger(GENERIC_PROTOCOL);

class SessionsCache {
  constructor(max) {
    this._cache = new _lruCache.default({
      max
    });
  }

  getLogger(sessionId, protocol) {
    if (sessionId) {
      if (this._cache.has(sessionId)) {
        const value = this._cache.get(sessionId);

        if (value.logger) {
          return value.logger;
        }

        protocol = protocol || value.protocol;
      }

      return _support.logger.getLogger(`${protocol || GENERIC_PROTOCOL} ` + `(${sessionId.substring(0, Math.min(sessionId.length, 8))})`);
    }

    switch (protocol) {
      case _constants.PROTOCOLS.W3C:
        return w3cLog;

      case _constants.PROTOCOLS.MJSONWP:
        return mjsonwpLog;

      default:
        return genericProtocolLog;
    }
  }

  getProtocol(sessionId) {
    return (this._cache.get(sessionId) || {}).protocol;
  }

  putSession(sessionId, value) {
    if (sessionId && value) {
      this._cache.set(sessionId, {
        protocol: value,
        logger: this.getLogger(sessionId, value)
      });
    }

    return value;
  }

  resetLogger(sessionId) {
    if (this._cache.has(sessionId)) {
      this._cache.get(sessionId).logger = null;
    }
  }

}

const SESSIONS_CACHE = new SessionsCache(100);
var _default = SESSIONS_CACHE;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9wcm90b2NvbC9zZXNzaW9ucy1jYWNoZS5qcyJdLCJuYW1lcyI6WyJHRU5FUklDX1BST1RPQ09MIiwibWpzb253cExvZyIsImxvZ2dlciIsImdldExvZ2dlciIsInczY0xvZyIsImdlbmVyaWNQcm90b2NvbExvZyIsIlNlc3Npb25zQ2FjaGUiLCJjb25zdHJ1Y3RvciIsIm1heCIsIl9jYWNoZSIsIkxSVSIsInNlc3Npb25JZCIsInByb3RvY29sIiwiaGFzIiwidmFsdWUiLCJnZXQiLCJzdWJzdHJpbmciLCJNYXRoIiwibWluIiwibGVuZ3RoIiwiUFJPVE9DT0xTIiwiVzNDIiwiTUpTT05XUCIsImdldFByb3RvY29sIiwicHV0U2Vzc2lvbiIsInNldCIsInJlc2V0TG9nZ2VyIiwiU0VTU0lPTlNfQ0FDSEUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEsZ0JBQWdCLEdBQUcsU0FBekI7O0FBQ0EsTUFBTUMsVUFBVSxHQUFHQyxnQkFBT0MsU0FBUCxDQUFpQixTQUFqQixDQUFuQjs7QUFDQSxNQUFNQyxNQUFNLEdBQUdGLGdCQUFPQyxTQUFQLENBQWlCLEtBQWpCLENBQWY7O0FBQ0EsTUFBTUUsa0JBQWtCLEdBQUdILGdCQUFPQyxTQUFQLENBQWlCSCxnQkFBakIsQ0FBM0I7O0FBR0EsTUFBTU0sYUFBTixDQUFvQjtBQUNsQkMsRUFBQUEsV0FBVyxDQUFFQyxHQUFGLEVBQU87QUFDaEIsU0FBS0MsTUFBTCxHQUFjLElBQUlDLGlCQUFKLENBQVE7QUFBRUYsTUFBQUE7QUFBRixLQUFSLENBQWQ7QUFDRDs7QUFFREwsRUFBQUEsU0FBUyxDQUFFUSxTQUFGLEVBQWFDLFFBQWIsRUFBdUI7QUFDOUIsUUFBSUQsU0FBSixFQUFlO0FBQ2IsVUFBSSxLQUFLRixNQUFMLENBQVlJLEdBQVosQ0FBZ0JGLFNBQWhCLENBQUosRUFBZ0M7QUFDOUIsY0FBTUcsS0FBSyxHQUFHLEtBQUtMLE1BQUwsQ0FBWU0sR0FBWixDQUFnQkosU0FBaEIsQ0FBZDs7QUFDQSxZQUFJRyxLQUFLLENBQUNaLE1BQVYsRUFBa0I7QUFDaEIsaUJBQU9ZLEtBQUssQ0FBQ1osTUFBYjtBQUNEOztBQUNEVSxRQUFBQSxRQUFRLEdBQUdBLFFBQVEsSUFBSUUsS0FBSyxDQUFDRixRQUE3QjtBQUNEOztBQUlELGFBQU9WLGdCQUFPQyxTQUFQLENBQWtCLEdBQUVTLFFBQVEsSUFBSVosZ0JBQWlCLEdBQWhDLEdBQ3JCLElBQUdXLFNBQVMsQ0FBQ0ssU0FBVixDQUFvQixDQUFwQixFQUF1QkMsSUFBSSxDQUFDQyxHQUFMLENBQVNQLFNBQVMsQ0FBQ1EsTUFBbkIsRUFBMkIsQ0FBM0IsQ0FBdkIsQ0FBc0QsR0FEckQsQ0FBUDtBQUVEOztBQUdELFlBQVFQLFFBQVI7QUFDRSxXQUFLUSxxQkFBVUMsR0FBZjtBQUNFLGVBQU9qQixNQUFQOztBQUNGLFdBQUtnQixxQkFBVUUsT0FBZjtBQUNFLGVBQU9yQixVQUFQOztBQUNGO0FBQ0UsZUFBT0ksa0JBQVA7QUFOSjtBQVFEOztBQUVEa0IsRUFBQUEsV0FBVyxDQUFFWixTQUFGLEVBQWE7QUFDdEIsV0FBTyxDQUFDLEtBQUtGLE1BQUwsQ0FBWU0sR0FBWixDQUFnQkosU0FBaEIsS0FBOEIsRUFBL0IsRUFBbUNDLFFBQTFDO0FBQ0Q7O0FBRURZLEVBQUFBLFVBQVUsQ0FBRWIsU0FBRixFQUFhRyxLQUFiLEVBQW9CO0FBQzVCLFFBQUlILFNBQVMsSUFBSUcsS0FBakIsRUFBd0I7QUFDdEIsV0FBS0wsTUFBTCxDQUFZZ0IsR0FBWixDQUFnQmQsU0FBaEIsRUFBMkI7QUFDekJDLFFBQUFBLFFBQVEsRUFBRUUsS0FEZTtBQUt6QlosUUFBQUEsTUFBTSxFQUFFLEtBQUtDLFNBQUwsQ0FBZVEsU0FBZixFQUEwQkcsS0FBMUI7QUFMaUIsT0FBM0I7QUFPRDs7QUFDRCxXQUFPQSxLQUFQO0FBQ0Q7O0FBRURZLEVBQUFBLFdBQVcsQ0FBRWYsU0FBRixFQUFhO0FBQ3RCLFFBQUksS0FBS0YsTUFBTCxDQUFZSSxHQUFaLENBQWdCRixTQUFoQixDQUFKLEVBQWdDO0FBQzlCLFdBQUtGLE1BQUwsQ0FBWU0sR0FBWixDQUFnQkosU0FBaEIsRUFBMkJULE1BQTNCLEdBQW9DLElBQXBDO0FBQ0Q7QUFDRjs7QUFyRGlCOztBQTREcEIsTUFBTXlCLGNBQWMsR0FBRyxJQUFJckIsYUFBSixDQUFrQixHQUFsQixDQUF2QjtlQUVlcUIsYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBMUlUgZnJvbSAnbHJ1LWNhY2hlJztcbmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ0BhcHBpdW0vc3VwcG9ydCc7XG5pbXBvcnQgeyBQUk9UT0NPTFMgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5cbmNvbnN0IEdFTkVSSUNfUFJPVE9DT0wgPSAnR0VORVJJQyc7XG5jb25zdCBtanNvbndwTG9nID0gbG9nZ2VyLmdldExvZ2dlcignTUpTT05XUCcpO1xuY29uc3QgdzNjTG9nID0gbG9nZ2VyLmdldExvZ2dlcignVzNDJyk7XG5jb25zdCBnZW5lcmljUHJvdG9jb2xMb2cgPSBsb2dnZXIuZ2V0TG9nZ2VyKEdFTkVSSUNfUFJPVE9DT0wpO1xuXG5cbmNsYXNzIFNlc3Npb25zQ2FjaGUge1xuICBjb25zdHJ1Y3RvciAobWF4KSB7XG4gICAgdGhpcy5fY2FjaGUgPSBuZXcgTFJVKHsgbWF4IH0pO1xuICB9XG5cbiAgZ2V0TG9nZ2VyIChzZXNzaW9uSWQsIHByb3RvY29sKSB7XG4gICAgaWYgKHNlc3Npb25JZCkge1xuICAgICAgaWYgKHRoaXMuX2NhY2hlLmhhcyhzZXNzaW9uSWQpKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fY2FjaGUuZ2V0KHNlc3Npb25JZCk7XG4gICAgICAgIGlmICh2YWx1ZS5sb2dnZXIpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUubG9nZ2VyO1xuICAgICAgICB9XG4gICAgICAgIHByb3RvY29sID0gcHJvdG9jb2wgfHwgdmFsdWUucHJvdG9jb2w7XG4gICAgICB9XG4gICAgICAvLyBBbHdheXMgY3JlYXRlIGEgbmV3IGxvZ2dlciBpbnN0YW5jZSBmb3IgaWRzXG4gICAgICAvLyB0aGF0IGFyZSBub3QgaW4gdGhlIGN1cnJlbnQgc2Vzc2lvbnMgbGlzdCxcbiAgICAgIC8vIHNvIHdlIGNhbiBzdGlsbCBzZWUgc3VjaCBpZHMgYXMgcHJlZml4ZXNcbiAgICAgIHJldHVybiBsb2dnZXIuZ2V0TG9nZ2VyKGAke3Byb3RvY29sIHx8IEdFTkVSSUNfUFJPVE9DT0x9IGAgK1xuICAgICAgICBgKCR7c2Vzc2lvbklkLnN1YnN0cmluZygwLCBNYXRoLm1pbihzZXNzaW9uSWQubGVuZ3RoLCA4KSl9KWApO1xuICAgIH1cblxuICAgIC8vIEZhbGwgYmFjayB0byBwcm90b2NvbCBuYW1lLW9ubHkgbG9nZ2VyIGlmIHNlc3Npb24gaWQgaXMgdW5rbm93blxuICAgIHN3aXRjaCAocHJvdG9jb2wpIHtcbiAgICAgIGNhc2UgUFJPVE9DT0xTLlczQzpcbiAgICAgICAgcmV0dXJuIHczY0xvZztcbiAgICAgIGNhc2UgUFJPVE9DT0xTLk1KU09OV1A6XG4gICAgICAgIHJldHVybiBtanNvbndwTG9nO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGdlbmVyaWNQcm90b2NvbExvZztcbiAgICB9XG4gIH1cblxuICBnZXRQcm90b2NvbCAoc2Vzc2lvbklkKSB7XG4gICAgcmV0dXJuICh0aGlzLl9jYWNoZS5nZXQoc2Vzc2lvbklkKSB8fCB7fSkucHJvdG9jb2w7XG4gIH1cblxuICBwdXRTZXNzaW9uIChzZXNzaW9uSWQsIHZhbHVlKSB7XG4gICAgaWYgKHNlc3Npb25JZCAmJiB2YWx1ZSkge1xuICAgICAgdGhpcy5fY2FjaGUuc2V0KHNlc3Npb25JZCwge1xuICAgICAgICBwcm90b2NvbDogdmFsdWUsXG4gICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gY2FjaGUgdGhlIGxvZ2dlciBpbnN0YW5jZSBmb3IgZWFjaCByYW5kb20gc2Vzc2lvbiBpZCBpbiB0aGUgY2FjaGVcbiAgICAgICAgLy8gaW4gb3JkZXIgdG8gc2F2ZSBtZW1vcnkuIEluc3RlYWQgd2Ugb25seSBjYWNoZSBsb2dnZXJzIGZvciB2YWxpZCBpZHMgdGhhdFxuICAgICAgICAvLyBhcmUgcmV0dXJuZWQgYnkgYGNyZWF0ZVNlc3Npb25gIGNhbGwgYW5kIHJlc2V0IHRoZW0gYWZ0ZXIgYGRlbGV0ZVNlc3Npb25gIGlzIGNhbGxlZFxuICAgICAgICBsb2dnZXI6IHRoaXMuZ2V0TG9nZ2VyKHNlc3Npb25JZCwgdmFsdWUpLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJlc2V0TG9nZ2VyIChzZXNzaW9uSWQpIHtcbiAgICBpZiAodGhpcy5fY2FjaGUuaGFzKHNlc3Npb25JZCkpIHtcbiAgICAgIHRoaXMuX2NhY2hlLmdldChzZXNzaW9uSWQpLmxvZ2dlciA9IG51bGw7XG4gICAgfVxuICB9XG59XG5cbi8vIFRoaXMgY2FjaGUgaXMgdXNlZnVsIHdoZW4gYSBzZXNzaW9uIGdldHMgdGVybWluYXRlZFxuLy8gYW5kIHJlbW92ZWQgZnJvbSB0aGUgc2Vzc2lvbnMgbGlzdCBpbiB0aGUgdW1icmVsbGEgZHJpdmVyLFxuLy8gYnV0IHRoZSBjbGllbnQgc3RpbGwgdHJpZXMgdG8gc2VuZCBhIGNvbW1hbmQgdG8gdGhpcyBzZXNzaW9uIGlkLlxuLy8gU28gd2Uga25vdyBob3cgdG8gcHJvcGVybHkgd3JhcCB0aGUgZXJyb3IgbWVzc2FnZSBmb3IgaXRcbmNvbnN0IFNFU1NJT05TX0NBQ0hFID0gbmV3IFNlc3Npb25zQ2FjaGUoMTAwKTtcblxuZXhwb3J0IGRlZmF1bHQgU0VTU0lPTlNfQ0FDSEU7XG4iXSwiZmlsZSI6ImxpYi9wcm90b2NvbC9zZXNzaW9ucy1jYWNoZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
