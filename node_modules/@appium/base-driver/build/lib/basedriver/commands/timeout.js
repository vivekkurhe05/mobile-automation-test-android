"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _asyncbox = require("asyncbox");

var _lodash = _interopRequireDefault(require("lodash"));

var _support = require("@appium/support");

var _protocol = require("../../protocol");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;
const MIN_TIMEOUT = 0;

commands.timeouts = async function timeouts(type, ms, script, pageLoad, implicit) {
  if (_support.util.hasValue(type) && _support.util.hasValue(ms)) {
    _logger.default.debug(`MJSONWP timeout arguments: ${JSON.stringify({
      type,
      ms
    })}}`);

    switch (type) {
      case 'command':
        await this.newCommandTimeout(ms);
        return;

      case 'implicit':
        await this.implicitWaitMJSONWP(ms);
        return;

      case 'page load':
        await this.pageLoadTimeoutMJSONWP(ms);
        return;

      case 'script':
        await this.scriptTimeoutMJSONWP(ms);
        return;

      default:
        throw new Error(`'${type}' type is not supported for MJSONWP timeout`);
    }
  }

  _logger.default.debug(`W3C timeout argument: ${JSON.stringify({
    script,
    pageLoad,
    implicit
  })}}`);

  if (_support.util.hasValue(script)) {
    await this.scriptTimeoutW3C(script);
  }

  if (_support.util.hasValue(pageLoad)) {
    await this.pageLoadTimeoutW3C(pageLoad);
  }

  if (_support.util.hasValue(implicit)) {
    await this.implicitWaitW3C(implicit);
  }
};

commands.getTimeouts = async function getTimeouts() {
  return {
    command: this.newCommandTimeoutMs,
    implicit: this.implicitWaitMs
  };
};

commands.implicitWaitW3C = async function implicitWaitW3C(ms) {
  await this.implicitWait(ms);
};

commands.implicitWaitMJSONWP = async function implicitWaitMJSONWP(ms) {
  await this.implicitWait(ms);
};

commands.implicitWait = async function implicitWait(ms) {
  await this.setImplicitWait(this.parseTimeoutArgument(ms));
};

helpers.setImplicitWait = function setImplicitWait(ms) {
  this.implicitWaitMs = ms;

  _logger.default.debug(`Set implicit wait to ${ms}ms`);

  if (this.managedDrivers && this.managedDrivers.length) {
    _logger.default.debug('Setting implicit wait on managed drivers');

    for (let driver of this.managedDrivers) {
      if (_lodash.default.isFunction(driver.setImplicitWait)) {
        driver.setImplicitWait(ms);
      }
    }
  }
};

commands.pageLoadTimeoutW3C = async function pageLoadTimeoutW3C(ms) {
  throw new _protocol.errors.NotImplementedError('Not implemented yet for pageLoad.');
};

commands.pageLoadTimeoutMJSONWP = async function pageLoadTimeoutMJSONWP(ms) {
  throw new _protocol.errors.NotImplementedError('Not implemented yet for pageLoad.');
};

commands.scriptTimeoutW3C = async function scriptTimeoutW3C(ms) {
  throw new _protocol.errors.NotImplementedError('Not implemented yet for script.');
};

commands.scriptTimeoutMJSONWP = async function scriptTimeoutMJSONWP(ms) {
  throw new _protocol.errors.NotImplementedError('Not implemented yet for script.');
};

commands.newCommandTimeout = async function newCommandTimeout(ms) {
  this.setNewCommandTimeout(this.parseTimeoutArgument(ms));
};

helpers.setNewCommandTimeout = function setNewCommandTimeout(ms) {
  this.newCommandTimeoutMs = ms;

  _logger.default.debug(`Set new command timeout to ${ms}ms`);

  if (this.managedDrivers && this.managedDrivers.length) {
    _logger.default.debug('Setting new command timeout on managed drivers');

    for (let driver of this.managedDrivers) {
      if (_lodash.default.isFunction(driver.setNewCommandTimeout)) {
        driver.setNewCommandTimeout(ms);
      }
    }
  }
};

helpers.clearNewCommandTimeout = function clearNewCommandTimeout() {
  if (this.noCommandTimer) {
    clearTimeout(this.noCommandTimer);
    this.noCommandTimer = null;
  }
};

helpers.startNewCommandTimeout = function startNewCommandTimeout() {
  this.clearNewCommandTimeout();
  if (!this.newCommandTimeoutMs) return;
  this.noCommandTimer = setTimeout(async () => {
    _logger.default.warn(`Shutting down because we waited ` + `${this.newCommandTimeoutMs / 1000.0} seconds for a command`);

    const errorMessage = `New Command Timeout of ` + `${this.newCommandTimeoutMs / 1000.0} seconds ` + `expired. Try customizing the timeout using the ` + `'newCommandTimeout' desired capability`;
    await this.startUnexpectedShutdown(new Error(errorMessage));
  }, this.newCommandTimeoutMs);
};

helpers.implicitWaitForCondition = async function implicitWaitForCondition(condFn) {
  _logger.default.debug(`Waiting up to ${this.implicitWaitMs} ms for condition`);

  let wrappedCondFn = async (...args) => {
    this.clearNewCommandTimeout();
    return await condFn(...args);
  };

  return await (0, _asyncbox.waitForCondition)(wrappedCondFn, {
    waitMs: this.implicitWaitMs,
    intervalMs: 500,
    logger: _logger.default
  });
};

helpers.parseTimeoutArgument = function parseTimeoutArgument(ms) {
  let duration = parseInt(ms, 10);

  if (_lodash.default.isNaN(duration) || duration < MIN_TIMEOUT) {
    throw new _protocol.errors.UnknownError(`Invalid timeout value '${ms}'`);
  }

  return duration;
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
