"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PREFIXED_APPIUM_OPTS_CAP = exports.APPIUM_VENDOR_PREFIX = exports.APPIUM_OPTS_CAP = void 0;
exports.findNonPrefixedCaps = findNonPrefixedCaps;
exports.isStandardCap = isStandardCap;
exports.mergeCaps = mergeCaps;
exports.parseCaps = parseCaps;
exports.processCapabilities = processCapabilities;
exports.promoteAppiumOptions = promoteAppiumOptions;
exports.stripAppiumPrefixes = stripAppiumPrefixes;
exports.validateCaps = validateCaps;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _desiredCaps = require("./desired-caps");

var _support = require("@appium/support");

var _logger = _interopRequireDefault(require("./logger"));

var _errors = require("../protocol/errors");

const APPIUM_VENDOR_PREFIX = 'appium:';
exports.APPIUM_VENDOR_PREFIX = APPIUM_VENDOR_PREFIX;
const APPIUM_OPTS_CAP = 'options';
exports.APPIUM_OPTS_CAP = APPIUM_OPTS_CAP;
const PREFIXED_APPIUM_OPTS_CAP = `${APPIUM_VENDOR_PREFIX}${APPIUM_OPTS_CAP}`;
exports.PREFIXED_APPIUM_OPTS_CAP = PREFIXED_APPIUM_OPTS_CAP;

function mergeCaps(primary = {}, secondary = {}) {
  let result = Object.assign({}, primary);

  for (let [name, value] of _lodash.default.toPairs(secondary)) {
    if (!_lodash.default.isUndefined(primary[name])) {
      throw new _errors.errors.InvalidArgumentError(`property '${name}' should not exist on both primary (${JSON.stringify(primary)}) and secondary (${JSON.stringify(secondary)}) object`);
    }

    result[name] = value;
  }

  return result;
}

function validateCaps(caps, constraints = {}, opts = {}) {
  let {
    skipPresenceConstraint
  } = opts;

  if (!_lodash.default.isPlainObject(caps)) {
    throw new _errors.errors.InvalidArgumentError(`must be a JSON object`);
  }

  constraints = _lodash.default.cloneDeep(constraints);

  if (skipPresenceConstraint) {
    for (let key of _lodash.default.keys(constraints)) {
      delete constraints[key].presence;
    }
  }

  let validationErrors = _desiredCaps.validator.validate(_lodash.default.pickBy(caps, _support.util.hasValue), constraints, {
    fullMessages: false
  });

  if (validationErrors) {
    let message = [];

    for (let [attribute, reasons] of _lodash.default.toPairs(validationErrors)) {
      for (let reason of reasons) {
        message.push(`'${attribute}' ${reason}`);
      }
    }

    throw new _errors.errors.InvalidArgumentError(message.join('; '));
  }

  return caps;
}

const STANDARD_CAPS = ['browserName', 'browserVersion', 'platformName', 'acceptInsecureCerts', 'pageLoadStrategy', 'proxy', 'setWindowRect', 'timeouts', 'unhandledPromptBehavior'];

function isStandardCap(cap) {
  return !!_lodash.default.find(STANDARD_CAPS, standardCap => standardCap.toLowerCase() === `${cap}`.toLowerCase());
}

function stripAppiumPrefixes(caps) {
  const prefix = 'appium:';

  const prefixedCaps = _lodash.default.filter(_lodash.default.keys(caps), cap => `${cap}`.startsWith(prefix));

  const badPrefixedCaps = [];

  for (let prefixedCap of prefixedCaps) {
    const strippedCapName = prefixedCap.substr(prefix.length);

    if (isStandardCap(strippedCapName)) {
      badPrefixedCaps.push(strippedCapName);

      if (_lodash.default.isNil(caps[strippedCapName])) {
        caps[strippedCapName] = caps[prefixedCap];
      } else {
        _logger.default.warn(`Ignoring capability '${prefixedCap}=${caps[prefixedCap]}' and ` + `using capability '${strippedCapName}=${caps[strippedCapName]}'`);
      }
    } else {
      caps[strippedCapName] = caps[prefixedCap];
    }

    delete caps[prefixedCap];
  }

  if (badPrefixedCaps.length > 0) {
    _logger.default.warn(`The capabilities ${JSON.stringify(badPrefixedCaps)} are standard capabilities and do not require "appium:" prefix`);
  }
}

function findNonPrefixedCaps({
  alwaysMatch = {},
  firstMatch = []
}) {
  return _lodash.default.chain([alwaysMatch, ...firstMatch]).reduce((unprefixedCaps, caps) => [...unprefixedCaps, ...(0, _lodash.default)(caps).keys().filter(cap => !cap.includes(':') && !isStandardCap(cap))], []).uniq().value();
}

function parseCaps(caps, constraints = {}, shouldValidateCaps = true) {
  if (!_lodash.default.isPlainObject(caps)) {
    throw new _errors.errors.InvalidArgumentError('The capabilities argument was not valid for the following reason(s): "capabilities" must be a JSON object.');
  }

  let {
    alwaysMatch: requiredCaps = {},
    firstMatch: allFirstMatchCaps = [{}]
  } = caps;

  if (!_lodash.default.isArray(allFirstMatchCaps)) {
    throw new _errors.errors.InvalidArgumentError('The capabilities.firstMatch argument was not valid for the following reason(s): "capabilities.firstMatch" must be a JSON array or undefined');
  }

  if (allFirstMatchCaps.length === 0) {
    _logger.default.warn(`The firstMatch array in the given capabilities has no entries. Adding an empty entry fo rnow, ` + `but it will require one or more entries as W3C spec.`);

    allFirstMatchCaps.push({});
  }

  let nonPrefixedCaps = findNonPrefixedCaps(caps);

  if (!_lodash.default.isEmpty(nonPrefixedCaps)) {
    throw new _errors.errors.InvalidArgumentError(`All non-standard capabilities should have a vendor prefix. The following capabilities did not have one: ${nonPrefixedCaps}`);
  }

  stripAppiumPrefixes(requiredCaps);

  for (let firstMatchCaps of allFirstMatchCaps) {
    stripAppiumPrefixes(firstMatchCaps);
  }

  if (shouldValidateCaps) {
    requiredCaps = validateCaps(requiredCaps, constraints, {
      skipPresenceConstraint: true
    });
  }

  let filteredConstraints = { ...constraints
  };

  let requiredCapsKeys = _lodash.default.keys(requiredCaps);

  for (let key of _lodash.default.keys(filteredConstraints)) {
    if (requiredCapsKeys.includes(key)) {
      delete filteredConstraints[key];
    }
  }

  let validationErrors = [];
  let validatedFirstMatchCaps = allFirstMatchCaps.map(firstMatchCaps => {
    try {
      return shouldValidateCaps ? validateCaps(firstMatchCaps, filteredConstraints) : firstMatchCaps;
    } catch (e) {
      validationErrors.push(e.message);
      return null;
    }
  }).filter(caps => !_lodash.default.isNull(caps));
  let matchedCaps = null;

  for (let firstMatchCaps of validatedFirstMatchCaps) {
    try {
      matchedCaps = mergeCaps(requiredCaps, firstMatchCaps);

      if (matchedCaps) {
        break;
      }
    } catch (err) {
      _logger.default.warn(err.message);

      validationErrors.push(err.message);
    }
  }

  return {
    requiredCaps,
    allFirstMatchCaps,
    validatedFirstMatchCaps,
    matchedCaps,
    validationErrors
  };
}

function processCapabilities(caps, constraints = {}, shouldValidateCaps = true) {
  const {
    matchedCaps,
    validationErrors
  } = parseCaps(caps, constraints, shouldValidateCaps);

  if (!_support.util.hasValue(matchedCaps)) {
    if (_lodash.default.isArray(caps.firstMatch) && caps.firstMatch.length > 1) {
      throw new _errors.errors.InvalidArgumentError(`Could not find matching capabilities from ${JSON.stringify(caps)}:\n ${validationErrors.join('\n')}`);
    } else {
      throw new _errors.errors.InvalidArgumentError(validationErrors[0]);
    }
  }

  return matchedCaps;
}

function promoteAppiumOptions(originalCaps) {
  const appiumOptions = originalCaps[APPIUM_OPTS_CAP];

  if (!appiumOptions) {
    return originalCaps;
  }

  let caps = _lodash.default.cloneDeep(originalCaps);

  if (!_lodash.default.isPlainObject(appiumOptions)) {
    throw new _errors.errors.SessionNotCreatedError(`The ${APPIUM_OPTS_CAP} capability must be an object`);
  }

  stripAppiumPrefixes(appiumOptions);

  const overwrittenKeys = _lodash.default.intersection(Object.keys(caps), Object.keys(appiumOptions));

  if (overwrittenKeys.length > 0) {
    _logger.default.warn(`Found capabilities inside ${PREFIXED_APPIUM_OPTS_CAP} that will overwrite ` + `capabilities at the top level: ${JSON.stringify(overwrittenKeys)}`);
  }

  caps = { ...caps,
    ...appiumOptions
  };
  delete caps[APPIUM_OPTS_CAP];
  return caps;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9iYXNlZHJpdmVyL2NhcGFiaWxpdGllcy5qcyJdLCJuYW1lcyI6WyJBUFBJVU1fVkVORE9SX1BSRUZJWCIsIkFQUElVTV9PUFRTX0NBUCIsIlBSRUZJWEVEX0FQUElVTV9PUFRTX0NBUCIsIm1lcmdlQ2FwcyIsInByaW1hcnkiLCJzZWNvbmRhcnkiLCJyZXN1bHQiLCJPYmplY3QiLCJhc3NpZ24iLCJuYW1lIiwidmFsdWUiLCJfIiwidG9QYWlycyIsImlzVW5kZWZpbmVkIiwiZXJyb3JzIiwiSW52YWxpZEFyZ3VtZW50RXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwidmFsaWRhdGVDYXBzIiwiY2FwcyIsImNvbnN0cmFpbnRzIiwib3B0cyIsInNraXBQcmVzZW5jZUNvbnN0cmFpbnQiLCJpc1BsYWluT2JqZWN0IiwiY2xvbmVEZWVwIiwia2V5Iiwia2V5cyIsInByZXNlbmNlIiwidmFsaWRhdGlvbkVycm9ycyIsInZhbGlkYXRvciIsInZhbGlkYXRlIiwicGlja0J5IiwidXRpbCIsImhhc1ZhbHVlIiwiZnVsbE1lc3NhZ2VzIiwibWVzc2FnZSIsImF0dHJpYnV0ZSIsInJlYXNvbnMiLCJyZWFzb24iLCJwdXNoIiwiam9pbiIsIlNUQU5EQVJEX0NBUFMiLCJpc1N0YW5kYXJkQ2FwIiwiY2FwIiwiZmluZCIsInN0YW5kYXJkQ2FwIiwidG9Mb3dlckNhc2UiLCJzdHJpcEFwcGl1bVByZWZpeGVzIiwicHJlZml4IiwicHJlZml4ZWRDYXBzIiwiZmlsdGVyIiwic3RhcnRzV2l0aCIsImJhZFByZWZpeGVkQ2FwcyIsInByZWZpeGVkQ2FwIiwic3RyaXBwZWRDYXBOYW1lIiwic3Vic3RyIiwibGVuZ3RoIiwiaXNOaWwiLCJsb2ciLCJ3YXJuIiwiZmluZE5vblByZWZpeGVkQ2FwcyIsImFsd2F5c01hdGNoIiwiZmlyc3RNYXRjaCIsImNoYWluIiwicmVkdWNlIiwidW5wcmVmaXhlZENhcHMiLCJpbmNsdWRlcyIsInVuaXEiLCJwYXJzZUNhcHMiLCJzaG91bGRWYWxpZGF0ZUNhcHMiLCJyZXF1aXJlZENhcHMiLCJhbGxGaXJzdE1hdGNoQ2FwcyIsImlzQXJyYXkiLCJub25QcmVmaXhlZENhcHMiLCJpc0VtcHR5IiwiZmlyc3RNYXRjaENhcHMiLCJmaWx0ZXJlZENvbnN0cmFpbnRzIiwicmVxdWlyZWRDYXBzS2V5cyIsInZhbGlkYXRlZEZpcnN0TWF0Y2hDYXBzIiwibWFwIiwiZSIsImlzTnVsbCIsIm1hdGNoZWRDYXBzIiwiZXJyIiwicHJvY2Vzc0NhcGFiaWxpdGllcyIsInByb21vdGVBcHBpdW1PcHRpb25zIiwib3JpZ2luYWxDYXBzIiwiYXBwaXVtT3B0aW9ucyIsIlNlc3Npb25Ob3RDcmVhdGVkRXJyb3IiLCJvdmVyd3JpdHRlbktleXMiLCJpbnRlcnNlY3Rpb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQSxNQUFNQSxvQkFBb0IsR0FBRyxTQUE3Qjs7QUFDQSxNQUFNQyxlQUFlLEdBQUcsU0FBeEI7O0FBQ0EsTUFBTUMsd0JBQXdCLEdBQUksR0FBRUYsb0JBQXFCLEdBQUVDLGVBQWdCLEVBQTNFOzs7QUFJQSxTQUFTRSxTQUFULENBQW9CQyxPQUFPLEdBQUcsRUFBOUIsRUFBa0NDLFNBQVMsR0FBRyxFQUE5QyxFQUFrRDtBQUNoRCxNQUFJQyxNQUFNLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JKLE9BQWxCLENBQWI7O0FBRUEsT0FBSyxJQUFJLENBQUNLLElBQUQsRUFBT0MsS0FBUCxDQUFULElBQTBCQyxnQkFBRUMsT0FBRixDQUFVUCxTQUFWLENBQTFCLEVBQWdEO0FBRTlDLFFBQUksQ0FBQ00sZ0JBQUVFLFdBQUYsQ0FBY1QsT0FBTyxDQUFDSyxJQUFELENBQXJCLENBQUwsRUFBbUM7QUFDakMsWUFBTSxJQUFJSyxlQUFPQyxvQkFBWCxDQUFpQyxhQUFZTixJQUFLLHVDQUFzQ08sSUFBSSxDQUFDQyxTQUFMLENBQWViLE9BQWYsQ0FBd0Isb0JBQW1C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QkFBVCxDQUErQkMsWUFBL0IsRUFBNkM7QUFDM0MsUUFBTUMsYUFBYSxHQUFHRCxZQUFZLENBQUNyRixlQUFELENBQWxDOztBQUNBLE1BQUksQ0FBQ3NGLGFBQUwsRUFBb0I7QUFDbEIsV0FBT0QsWUFBUDtBQUNEOztBQUVELE1BQUluRSxJQUFJLEdBQUdSLGdCQUFFYSxTQUFGLENBQVk4RCxZQUFaLENBQVg7O0FBQ0EsTUFBSSxDQUFDM0UsZ0JBQUVZLGFBQUYsQ0FBZ0JnRSxhQUFoQixDQUFMLEVBQXFDO0FBQ25DLFVBQU0sSUFBSXpFLGVBQU8wRSxzQkFBWCxDQUFtQyxPQUFNdkYsZUFBZ0IsK0JBQXpELENBQU47QUFDRDs7QUFHRDhDLEVBQUFBLG1CQUFtQixDQUFDd0MsYUFBRCxDQUFuQjs7QUFHQSxRQUFNRSxlQUFlLEdBQUc5RSxnQkFBRStFLFlBQUYsQ0FBZW5GLE1BQU0sQ0FBQ21CLElBQVAsQ0FBWVAsSUFBWixDQUFmLEVBQWtDWixNQUFNLENBQUNtQixJQUFQLENBQVk2RCxhQUFaLENBQWxDLENBQXhCOztBQUNBLE1BQUlFLGVBQWUsQ0FBQ2pDLE1BQWhCLEdBQXlCLENBQTdCLEVBQWdDO0FBQzlCRSxvQkFBSUMsSUFBSixDQUFVLDZCQUE0QnpELHdCQUF5Qix1QkFBdEQsR0FDQyxrQ0FBaUNjLElBQUksQ0FBQ0MsU0FBTCxDQUFld0UsZUFBZixDQUFnQyxFQUQzRTtBQUVEOztBQUdEdEUsRUFBQUEsSUFBSSxHQUFHLEVBQUMsR0FBR0EsSUFBSjtBQUFVLE9BQUdvRTtBQUFiLEdBQVA7QUFHQSxTQUFPcEUsSUFBSSxDQUFDbEIsZUFBRCxDQUFYO0FBQ0EsU0FBT2tCLElBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyB2YWxpZGF0b3IgfSBmcm9tICcuL2Rlc2lyZWQtY2Fwcyc7XG5pbXBvcnQgeyB1dGlsIH0gZnJvbSAnQGFwcGl1bS9zdXBwb3J0JztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnLi4vcHJvdG9jb2wvZXJyb3JzJztcblxuY29uc3QgQVBQSVVNX1ZFTkRPUl9QUkVGSVggPSAnYXBwaXVtOic7XG5jb25zdCBBUFBJVU1fT1BUU19DQVAgPSAnb3B0aW9ucyc7XG5jb25zdCBQUkVGSVhFRF9BUFBJVU1fT1BUU19DQVAgPSBgJHtBUFBJVU1fVkVORE9SX1BSRUZJWH0ke0FQUElVTV9PUFRTX0NBUH1gO1xuXG4vLyBUYWtlcyBwcmltYXJ5IGNhcHMgb2JqZWN0IGFuZCBtZXJnZXMgaXQgaW50byBhIHNlY29uZGFyeSBjYXBzIG9iamVjdC5cbi8vIChzZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL3dlYmRyaXZlci8jZGZuLW1lcmdpbmctY2FwYWJpbGl0aWVzKVxuZnVuY3Rpb24gbWVyZ2VDYXBzIChwcmltYXJ5ID0ge30sIHNlY29uZGFyeSA9IHt9KSB7XG4gIGxldCByZXN1bHQgPSBPYmplY3QuYXNzaWduKHt9LCBwcmltYXJ5KTtcblxuICBmb3IgKGxldCBbbmFtZSwgdmFsdWVdIG9mIF8udG9QYWlycyhzZWNvbmRhcnkpKSB7XG4gICAgLy8gT3ZlcndyaXRpbmcgaXMgbm90IGFsbG93ZWQuIFByaW1hcnkgYW5kIHNlY29uZGFyeSBtdXN0IGhhdmUgZGlmZmVyZW50IHByb3BlcnRpZXMgKHczYyBydWxlIDQuNClcbiAgICBpZiAoIV8uaXNVbmRlZmluZWQocHJpbWFyeVtuYW1lXSkpIHtcbiAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoYHByb3BlcnR5ICcke25hbWV9JyBzaG91bGQgbm90IGV4aXN0IG9uIGJvdGggcHJpbWFyeSAoJHtKU09OLnN0cmluZ2lmeShwcmltYXJ5KX0pIGFuZCBzZWNvbmRhcnkgKCR7SlNPTi5zdHJpbmdpZnkoc2Vjb25kYXJ5KX0pIG9iamVjdGApO1xuICAgIH1cbiAgICByZXN1bHRbbmFtZV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIFZhbGlkYXRlcyBjYXBzIGFnYWluc3QgYSBzZXQgb2YgY29uc3RyYWludHNcbmZ1bmN0aW9uIHZhbGlkYXRlQ2FwcyAoY2FwcywgY29uc3RyYWludHMgPSB7fSwgb3B0cyA9IHt9KSB7XG5cbiAgbGV0IHtza2lwUHJlc2VuY2VDb25zdHJhaW50fSA9IG9wdHM7XG5cbiAgaWYgKCFfLmlzUGxhaW5PYmplY3QoY2FwcykpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKGBtdXN0IGJlIGEgSlNPTiBvYmplY3RgKTtcbiAgfVxuXG4gIGNvbnN0cmFpbnRzID0gXy5jbG9uZURlZXAoY29uc3RyYWludHMpOyAvLyBEZWZlbnNpdmUgY29weVxuXG4gIGlmIChza2lwUHJlc2VuY2VDb25zdHJhaW50KSB7XG4gICAgLy8gUmVtb3ZlIHRoZSAncHJlc2VuY2UnIGNvbnN0cmFpbnQgaWYgd2UncmUgbm90IGNoZWNraW5nIGZvciBpdFxuICAgIGZvciAobGV0IGtleSBvZiBfLmtleXMoY29uc3RyYWludHMpKSB7XG4gICAgICBkZWxldGUgY29uc3RyYWludHNba2V5XS5wcmVzZW5jZTtcbiAgICB9XG4gIH1cblxuICBsZXQgdmFsaWRhdGlvbkVycm9ycyA9IHZhbGlkYXRvci52YWxpZGF0ZShfLnBpY2tCeShjYXBzLCB1dGlsLmhhc1ZhbHVlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdHJhaW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZnVsbE1lc3NhZ2VzOiBmYWxzZX0pO1xuXG4gIGlmICh2YWxpZGF0aW9uRXJyb3JzKSB7XG4gICAgbGV0IG1lc3NhZ2UgPSBbXTtcbiAgICBmb3IgKGxldCBbYXR0cmlidXRlLCByZWFzb25zXSBvZiBfLnRvUGFpcnModmFsaWRhdGlvbkVycm9ycykpIHtcbiAgICAgIGZvciAobGV0IHJlYXNvbiBvZiByZWFzb25zKSB7XG4gICAgICAgIG1lc3NhZ2UucHVzaChgJyR7YXR0cmlidXRlfScgJHtyZWFzb259YCk7XG4gICAgICB9XG4gICAgfVxuICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IobWVzc2FnZS5qb2luKCc7ICcpKTtcbiAgfVxuXG4gIC8vIFJldHVybiBjYXBzXG4gIHJldHVybiBjYXBzO1xufVxuXG4vLyBTdGFuZGFyZCwgbm9uLXByZWZpeGVkIGNhcGFiaWxpdGllcyAoc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93ZWJkcml2ZXIvI2Rmbi10YWJsZS1vZi1zdGFuZGFyZC1jYXBhYmlsaXRpZXMpXG5jb25zdCBTVEFOREFSRF9DQVBTID0gW1xuICAnYnJvd3Nlck5hbWUnLFxuICAnYnJvd3NlclZlcnNpb24nLFxuICAncGxhdGZvcm1OYW1lJyxcbiAgJ2FjY2VwdEluc2VjdXJlQ2VydHMnLFxuICAncGFnZUxvYWRTdHJhdGVneScsXG4gICdwcm94eScsXG4gICdzZXRXaW5kb3dSZWN0JyxcbiAgJ3RpbWVvdXRzJyxcbiAgJ3VuaGFuZGxlZFByb21wdEJlaGF2aW9yJ1xuXTtcblxuZnVuY3Rpb24gaXNTdGFuZGFyZENhcCAoY2FwKSB7XG4gIHJldHVybiAhIV8uZmluZChTVEFOREFSRF9DQVBTLCAoc3RhbmRhcmRDYXApID0+IHN0YW5kYXJkQ2FwLnRvTG93ZXJDYXNlKCkgPT09IGAke2NhcH1gLnRvTG93ZXJDYXNlKCkpO1xufVxuXG4vLyBJZiB0aGUgJ2FwcGl1bTonIHByZWZpeCB3YXMgcHJvdmlkZWQgYW5kIGl0J3MgYSB2YWxpZCBjYXBhYmlsaXR5LCBzdHJpcCBvdXQgdGhlIHByZWZpeCAoc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi93ZWJkcml2ZXIvI2Rmbi1leHRlbnNpb24tY2FwYWJpbGl0aWVzKVxuLy8gKE5PVEU6IE1ldGhvZCBpcyBkZXN0cnVjdGl2ZSBhbmQgbXV0YXRlcyBjb250ZW50cyBvZiBjYXBzKVxuZnVuY3Rpb24gc3RyaXBBcHBpdW1QcmVmaXhlcyAoY2Fwcykge1xuICBjb25zdCBwcmVmaXggPSAnYXBwaXVtOic7XG4gIGNvbnN0IHByZWZpeGVkQ2FwcyA9IF8uZmlsdGVyKF8ua2V5cyhjYXBzKSwgKGNhcCkgPT4gYCR7Y2FwfWAuc3RhcnRzV2l0aChwcmVmaXgpKTtcbiAgY29uc3QgYmFkUHJlZml4ZWRDYXBzID0gW107XG5cbiAgLy8gU3RyaXAgb3V0IHRoZSAnYXBwaXVtOicgcHJlZml4XG4gIGZvciAobGV0IHByZWZpeGVkQ2FwIG9mIHByZWZpeGVkQ2Fwcykge1xuICAgIGNvbnN0IHN0cmlwcGVkQ2FwTmFtZSA9IHByZWZpeGVkQ2FwLnN1YnN0cihwcmVmaXgubGVuZ3RoKTtcblxuICAgIC8vIElmIGl0J3Mgc3RhbmRhcmQgY2FwYWJpbGl0eSB0aGF0IHdhcyBwcmVmaXhlZCwgYWRkIGl0IHRvIGFuIGFycmF5IG9mIGluY29ycmVjdGx5IHByZWZpeGVkIGNhcGFiaWxpdGllc1xuICAgIGlmIChpc1N0YW5kYXJkQ2FwKHN0cmlwcGVkQ2FwTmFtZSkpIHtcbiAgICAgIGJhZFByZWZpeGVkQ2Fwcy5wdXNoKHN0cmlwcGVkQ2FwTmFtZSk7XG4gICAgICBpZiAoXy5pc05pbChjYXBzW3N0cmlwcGVkQ2FwTmFtZV0pKSB7XG4gICAgICAgIGNhcHNbc3RyaXBwZWRDYXBOYW1lXSA9IGNhcHNbcHJlZml4ZWRDYXBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nLndhcm4oYElnbm9yaW5nIGNhcGFiaWxpdHkgJyR7cHJlZml4ZWRDYXB9PSR7Y2Fwc1twcmVmaXhlZENhcF19JyBhbmQgYCArXG4gICAgICAgICAgYHVzaW5nIGNhcGFiaWxpdHkgJyR7c3RyaXBwZWRDYXBOYW1lfT0ke2NhcHNbc3RyaXBwZWRDYXBOYW1lXX0nYCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhcHNbc3RyaXBwZWRDYXBOYW1lXSA9IGNhcHNbcHJlZml4ZWRDYXBdO1xuICAgIH1cblxuICAgIC8vIFN0cmlwIG91dCB0aGUgcHJlZml4XG4gICAgZGVsZXRlIGNhcHNbcHJlZml4ZWRDYXBdO1xuICB9XG5cbiAgLy8gSWYgd2UgZm91bmQgc3RhbmRhcmQgY2FwcyB0aGF0IHdlcmUgaW5jb3JyZWN0bHkgcHJlZml4ZWQsIHRocm93IGFuIGV4Y2VwdGlvbiAoZS5nLjogZG9uJ3QgYWNjZXB0ICdhcHBpdW06cGxhdGZvcm1OYW1lJywgb25seSBhY2NlcHQganVzdCAncGxhdGZvcm1OYW1lJylcbiAgaWYgKGJhZFByZWZpeGVkQ2Fwcy5sZW5ndGggPiAwKSB7XG4gICAgbG9nLndhcm4oYFRoZSBjYXBhYmlsaXRpZXMgJHtKU09OLnN0cmluZ2lmeShiYWRQcmVmaXhlZENhcHMpfSBhcmUgc3RhbmRhcmQgY2FwYWJpbGl0aWVzIGFuZCBkbyBub3QgcmVxdWlyZSBcImFwcGl1bTpcIiBwcmVmaXhgKTtcbiAgfVxufVxuXG4vKipcbiAqIEdldCBhbiBhcnJheSBvZiBhbGwgdGhlIHVucHJlZml4ZWQgY2FwcyB0aGF0IGFyZSBiZWluZyB1c2VkIGluICdhbHdheXNNYXRjaCcgYW5kIGFsbCBvZiB0aGUgJ2ZpcnN0TWF0Y2gnIG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IGNhcHMgQSBjYXBhYmlsaXRpZXMgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGZpbmROb25QcmVmaXhlZENhcHMgKHthbHdheXNNYXRjaCA9IHt9LCBmaXJzdE1hdGNoID0gW119KSB7XG4gIHJldHVybiBfLmNoYWluKFthbHdheXNNYXRjaCwgLi4uZmlyc3RNYXRjaF0pXG4gICAgLnJlZHVjZSgodW5wcmVmaXhlZENhcHMsIGNhcHMpID0+IFtcbiAgICAgIC4uLnVucHJlZml4ZWRDYXBzLFxuICAgICAgLi4uXyhjYXBzKS5rZXlzKCkuZmlsdGVyKChjYXApID0+ICFjYXAuaW5jbHVkZXMoJzonKSAmJiAhaXNTdGFuZGFyZENhcChjYXApKSxcbiAgICBdLCBbXSlcbiAgICAudW5pcSgpXG4gICAgLnZhbHVlKCk7XG59XG5cbi8vIFBhcnNlIGNhcGFiaWxpdGllcyAoYmFzZWQgb24gaHR0cHM6Ly93d3cudzMub3JnL1RSL3dlYmRyaXZlci8jcHJvY2Vzc2luZy1jYXBhYmlsaXRpZXMpXG5mdW5jdGlvbiBwYXJzZUNhcHMgKGNhcHMsIGNvbnN0cmFpbnRzID0ge30sIHNob3VsZFZhbGlkYXRlQ2FwcyA9IHRydWUpIHtcbiAgLy8gSWYgY2FwYWJpbGl0aWVzIHJlcXVlc3QgaXMgbm90IGFuIG9iamVjdCwgcmV0dXJuIGVycm9yICgjMS4xKVxuICBpZiAoIV8uaXNQbGFpbk9iamVjdChjYXBzKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoJ1RoZSBjYXBhYmlsaXRpZXMgYXJndW1lbnQgd2FzIG5vdCB2YWxpZCBmb3IgdGhlIGZvbGxvd2luZyByZWFzb24ocyk6IFwiY2FwYWJpbGl0aWVzXCIgbXVzdCBiZSBhIEpTT04gb2JqZWN0LicpO1xuICB9XG5cbiAgLy8gTGV0ICdyZXF1aXJlZENhcHMnIGJlIHByb3BlcnR5IG5hbWVkICdhbHdheXNNYXRjaCcgZnJvbSBjYXBhYmlsaXRpZXMgcmVxdWVzdCAoIzIpXG4gIC8vIGFuZCAnYWxsRmlyc3RNYXRjaENhcHMnIGJlIHByb3BlcnR5IG5hbWVkICdmaXJzdE1hdGNoJyBmcm9tIGNhcGFiaWxpdGllcyByZXF1ZXN0ICgjMylcbiAgbGV0IHtcbiAgICBhbHdheXNNYXRjaDogcmVxdWlyZWRDYXBzID0ge30sIC8vIElmICdyZXF1aXJlZENhcHMnIGlzIHVuZGVmaW5lZCwgc2V0IGl0IHRvIGFuIGVtcHR5IEpTT04gb2JqZWN0ICgjMi4xKVxuICAgIGZpcnN0TWF0Y2g6IGFsbEZpcnN0TWF0Y2hDYXBzID0gW3t9XSwgLy8gSWYgJ2ZpcnN0TWF0Y2gnIGlzIHVuZGVmaW5lZCBzZXQgaXQgdG8gYSBzaW5nbGV0b24gbGlzdCB3aXRoIG9uZSBlbXB0eSBvYmplY3QgKCMzLjEpXG4gIH0gPSBjYXBzO1xuXG4gIC8vIFJlamVjdCAnZmlyc3RNYXRjaCcgYXJndW1lbnQgaWYgaXQncyBub3QgYW4gYXJyYXkgKCMzLjIpXG4gIGlmICghXy5pc0FycmF5KGFsbEZpcnN0TWF0Y2hDYXBzKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoJ1RoZSBjYXBhYmlsaXRpZXMuZmlyc3RNYXRjaCBhcmd1bWVudCB3YXMgbm90IHZhbGlkIGZvciB0aGUgZm9sbG93aW5nIHJlYXNvbihzKTogXCJjYXBhYmlsaXRpZXMuZmlyc3RNYXRjaFwiIG11c3QgYmUgYSBKU09OIGFycmF5IG9yIHVuZGVmaW5lZCcpO1xuICB9XG5cbiAgLy8gSWYgYW4gZW1wdHkgYXJyYXkgYXMgcHJvdmlkZWQsIHdlJ2xsIGJlIGZvcmdpdmluZyBhbmQgbWFrZSBpdCBhbiBhcnJheSBvZiBvbmUgZW1wdHkgb2JqZWN0XG4gIC8vIEluIHRoZSBmdXR1cmUsIHJlamVjdCAnZmlyc3RNYXRjaCcgYXJndW1lbnQgaWYgaXRzIGFycmF5IGRpZCBub3QgaGF2ZSBvbmUgb3IgbW9yZSBlbnRyaWVzICgjMy4yKVxuICBpZiAoYWxsRmlyc3RNYXRjaENhcHMubGVuZ3RoID09PSAwKSB7XG4gICAgbG9nLndhcm4oYFRoZSBmaXJzdE1hdGNoIGFycmF5IGluIHRoZSBnaXZlbiBjYXBhYmlsaXRpZXMgaGFzIG5vIGVudHJpZXMuIEFkZGluZyBhbiBlbXB0eSBlbnRyeSBmbyBybm93LCBgICtcbiAgICAgIGBidXQgaXQgd2lsbCByZXF1aXJlIG9uZSBvciBtb3JlIGVudHJpZXMgYXMgVzNDIHNwZWMuYCk7XG4gICAgYWxsRmlyc3RNYXRjaENhcHMucHVzaCh7fSk7XG4gIH1cblxuICAvLyBDaGVjayBmb3Igbm9uLXByZWZpeGVkLCBub24tc3RhbmRhcmQgY2FwYWJpbGl0aWVzIGFuZCBsb2cgd2FybmluZ3MgaWYgdGhleSBhcmUgZm91bmRcbiAgbGV0IG5vblByZWZpeGVkQ2FwcyA9IGZpbmROb25QcmVmaXhlZENhcHMoY2Fwcyk7XG4gIGlmICghXy5pc0VtcHR5KG5vblByZWZpeGVkQ2FwcykpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKGBBbGwgbm9uLXN0YW5kYXJkIGNhcGFiaWxpdGllcyBzaG91bGQgaGF2ZSBhIHZlbmRvciBwcmVmaXguIFRoZSBmb2xsb3dpbmcgY2FwYWJpbGl0aWVzIGRpZCBub3QgaGF2ZSBvbmU6ICR7bm9uUHJlZml4ZWRDYXBzfWApO1xuICB9XG5cbiAgLy8gU3RyaXAgb3V0IHRoZSAnYXBwaXVtOicgcHJlZml4IGZyb20gYWxsXG4gIHN0cmlwQXBwaXVtUHJlZml4ZXMocmVxdWlyZWRDYXBzKTtcbiAgZm9yIChsZXQgZmlyc3RNYXRjaENhcHMgb2YgYWxsRmlyc3RNYXRjaENhcHMpIHtcbiAgICBzdHJpcEFwcGl1bVByZWZpeGVzKGZpcnN0TWF0Y2hDYXBzKTtcbiAgfVxuXG4gIC8vIFZhbGlkYXRlIHRoZSByZXF1aXJlZENhcHMuIEJ1dCBkb24ndCB2YWxpZGF0ZSAncHJlc2VuY2UnIGJlY2F1c2UgaWYgdGhhdCBjb25zdHJhaW50IGZhaWxzIG9uICdhbHdheXNNYXRjaCcgaXQgY291bGQgc3RpbGwgcGFzcyBvbiBvbmUgb2YgdGhlICdmaXJzdE1hdGNoJyBrZXlzXG4gIGlmIChzaG91bGRWYWxpZGF0ZUNhcHMpIHtcbiAgICByZXF1aXJlZENhcHMgPSB2YWxpZGF0ZUNhcHMocmVxdWlyZWRDYXBzLCBjb25zdHJhaW50cywge3NraXBQcmVzZW5jZUNvbnN0cmFpbnQ6IHRydWV9KTtcbiAgfVxuXG5cbiAgLy8gUmVtb3ZlIHRoZSAncHJlc2VuY2UnIGNvbnN0cmFpbnQgZm9yIGFueSBrZXlzIHRoYXQgYXJlIGFscmVhZHkgcHJlc2VudCBpbiAncmVxdWlyZWRDYXBzJ1xuICAvLyBzaW5jZSB3ZSBrbm93IHRoYXQgdGhpcyBjb25zdHJhaW50IGhhcyBhbHJlYWR5IHBhc3NlZFxuICBsZXQgZmlsdGVyZWRDb25zdHJhaW50cyA9IHsuLi5jb25zdHJhaW50c307XG4gIGxldCByZXF1aXJlZENhcHNLZXlzID0gXy5rZXlzKHJlcXVpcmVkQ2Fwcyk7XG4gIGZvciAobGV0IGtleSBvZiBfLmtleXMoZmlsdGVyZWRDb25zdHJhaW50cykpIHtcbiAgICBpZiAocmVxdWlyZWRDYXBzS2V5cy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICBkZWxldGUgZmlsdGVyZWRDb25zdHJhaW50c1trZXldO1xuICAgIH1cbiAgfVxuXG4gIC8vIFZhbGlkYXRlIGFsbCBvZiB0aGUgZmlyc3QgbWF0Y2ggY2FwYWJpbGl0aWVzIGFuZCByZXR1cm4gYW4gYXJyYXkgd2l0aCBvbmx5IHRoZSB2YWxpZCBjYXBzIChzZWUgc3BlYyAjNSlcbiAgbGV0IHZhbGlkYXRpb25FcnJvcnMgPSBbXTtcbiAgbGV0IHZhbGlkYXRlZEZpcnN0TWF0Y2hDYXBzID0gYWxsRmlyc3RNYXRjaENhcHMubWFwKChmaXJzdE1hdGNoQ2FwcykgPT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBWYWxpZGF0ZSBmaXJzdE1hdGNoIGNhcHNcbiAgICAgIHJldHVybiBzaG91bGRWYWxpZGF0ZUNhcHMgPyB2YWxpZGF0ZUNhcHMoZmlyc3RNYXRjaENhcHMsIGZpbHRlcmVkQ29uc3RyYWludHMpIDogZmlyc3RNYXRjaENhcHM7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdmFsaWRhdGlvbkVycm9ycy5wdXNoKGUubWVzc2FnZSk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0pLmZpbHRlcigoY2FwcykgPT4gIV8uaXNOdWxsKGNhcHMpKTtcblxuICAvLyBUcnkgdG8gbWVyZ2UgcmVxdWlyZWRDYXBzIHdpdGggZmlyc3QgbWF0Y2ggY2FwYWJpbGl0aWVzLCBicmVhayBvbmNlIGl0IGZpbmRzIGl0cyBmaXJzdCBtYXRjaCAoc2VlIHNwZWMgIzYpXG4gIGxldCBtYXRjaGVkQ2FwcyA9IG51bGw7XG4gIGZvciAobGV0IGZpcnN0TWF0Y2hDYXBzIG9mIHZhbGlkYXRlZEZpcnN0TWF0Y2hDYXBzKSB7XG4gICAgdHJ5IHtcbiAgICAgIG1hdGNoZWRDYXBzID0gbWVyZ2VDYXBzKHJlcXVpcmVkQ2FwcywgZmlyc3RNYXRjaENhcHMpO1xuICAgICAgaWYgKG1hdGNoZWRDYXBzKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nLndhcm4oZXJyLm1lc3NhZ2UpO1xuICAgICAgdmFsaWRhdGlvbkVycm9ycy5wdXNoKGVyci5tZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICAvLyBSZXR1cm5zIHZhcmlhYmxlcyBmb3IgdGVzdGluZyBwdXJwb3Nlc1xuICByZXR1cm4ge3JlcXVpcmVkQ2FwcywgYWxsRmlyc3RNYXRjaENhcHMsIHZhbGlkYXRlZEZpcnN0TWF0Y2hDYXBzLCBtYXRjaGVkQ2FwcywgdmFsaWRhdGlvbkVycm9yc307XG59XG5cbi8vIENhbGxzIHBhcnNlQ2FwcyBhbmQganVzdCByZXR1cm5zIHRoZSBtYXRjaGVkQ2FwcyB2YXJpYWJsZVxuZnVuY3Rpb24gcHJvY2Vzc0NhcGFiaWxpdGllcyAoY2FwcywgY29uc3RyYWludHMgPSB7fSwgc2hvdWxkVmFsaWRhdGVDYXBzID0gdHJ1ZSkge1xuICBjb25zdCB7bWF0Y2hlZENhcHMsIHZhbGlkYXRpb25FcnJvcnN9ID0gcGFyc2VDYXBzKGNhcHMsIGNvbnN0cmFpbnRzLCBzaG91bGRWYWxpZGF0ZUNhcHMpO1xuXG4gIC8vIElmIHdlIGZvdW5kIGFuIGVycm9yIHRocm93IGFuIGV4Y2VwdGlvblxuICBpZiAoIXV0aWwuaGFzVmFsdWUobWF0Y2hlZENhcHMpKSB7XG4gICAgaWYgKF8uaXNBcnJheShjYXBzLmZpcnN0TWF0Y2gpICYmIGNhcHMuZmlyc3RNYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBJZiB0aGVyZSB3YXMgbW9yZSB0aGFuIG9uZSAnZmlyc3RNYXRjaCcgY2FwLCBpbmRpY2F0ZSB0aGF0IHdlIGNvdWxkbid0IGZpbmQgYSBtYXRjaGluZyBjYXBhYmlsaXRpZXMgc2V0IGFuZCBzaG93IGFsbCB0aGUgZXJyb3JzXG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKGBDb3VsZCBub3QgZmluZCBtYXRjaGluZyBjYXBhYmlsaXRpZXMgZnJvbSAke0pTT04uc3RyaW5naWZ5KGNhcHMpfTpcXG4gJHt2YWxpZGF0aW9uRXJyb3JzLmpvaW4oJ1xcbicpfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPdGhlcndpc2UsIGp1c3Qgc2hvdyB0aGUgc2luZ3VsYXIgZXJyb3IgbWVzc2FnZVxuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcih2YWxpZGF0aW9uRXJyb3JzWzBdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWF0Y2hlZENhcHM7XG59XG5cbi8qKlxuICogUmV0dXJuIGEgY29weSBvZiBhIGNhcGFiaWxpdGllcyBvYmplY3Qgd2hpY2ggaGFzIHRha2VuIGV2ZXJ5dGhpbmcgd2l0aGluIHRoZSAnb3B0aW9ucydcbiAqIGNhcGFiaWxpdHkgYW5kIHByb21vdGVkIGl0IHRvIHRoZSB0b3AgbGV2ZWwuIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzIGFzc3VtZWQgdG8gYmUgcnVuIGFmdGVyXG4gKiBhbGwgdmVuZG9yIHByZWZpeGVzIGhhdmUgYWxyZWFkeSBiZWVuIHN0cmlwcGVkIGZyb20gdGhlIHRvcCBsZXZlbC4gU28gd2UgYXJlIGRlYWxpbmcgd2l0aCBlLmcuXG4gKiAnb3B0aW9ucycgYW5kIG5vdCAnYXBwaXVtOm9wdGlvbnMnIGF0IHRoaXMgcG9pbnQuIEFueSBwcmVmaXhlcyBfaW5zaWRlXyB0aGUgJ29wdGlvbnMnIGNhcGFiaWxpdHlcbiAqIHdpbGwgdGhlbXNlbHZlcyBiZSBzdHJpcHBlZC4gVGhpcyBpcyBkZXNpZ25lZCBhcyBhbiBpbnRlcm5hbCBmdW5jdGlvbiwgbm90IG9uZSB0byBvcGVyYXRlIG9uXG4gKiB1c2VyLWNvbnN0cnVjdGVkIGNhcGFiaWxpdGllcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gb3JpZ2luYWxDYXBzIC0gdGhlIGNhcGFiaWxpdGllcyB0byBhbmFseXplIGFuZCBwcm9tb3RlIGZyb20gJ29wdGlvbnMnXG4gKiBAcmV0dXJuIHtvYmplY3R9IC0gdGhlIGNhcGFiaWxpdGllcyB3aXRoICdvcHRpb25zJyBwcm9tb3RlZCBpZiBuZWNlc3NhcnlcbiAqL1xuZnVuY3Rpb24gcHJvbW90ZUFwcGl1bU9wdGlvbnMgKG9yaWdpbmFsQ2Fwcykge1xuICBjb25zdCBhcHBpdW1PcHRpb25zID0gb3JpZ2luYWxDYXBzW0FQUElVTV9PUFRTX0NBUF07XG4gIGlmICghYXBwaXVtT3B0aW9ucykge1xuICAgIHJldHVybiBvcmlnaW5hbENhcHM7XG4gIH1cblxuICBsZXQgY2FwcyA9IF8uY2xvbmVEZWVwKG9yaWdpbmFsQ2Fwcyk7XG4gIGlmICghXy5pc1BsYWluT2JqZWN0KGFwcGl1bU9wdGlvbnMpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5TZXNzaW9uTm90Q3JlYXRlZEVycm9yKGBUaGUgJHtBUFBJVU1fT1BUU19DQVB9IGNhcGFiaWxpdHkgbXVzdCBiZSBhbiBvYmplY3RgKTtcbiAgfVxuXG4gIC8vIGZpcnN0IGdldCByaWQgb2YgYW55IHByZWZpeGVzIGluc2lkZSBhcHBpdW06b3B0aW9uc1xuICBzdHJpcEFwcGl1bVByZWZpeGVzKGFwcGl1bU9wdGlvbnMpO1xuXG4gIC8vIHdhcm4gaWYgd2UgYXJlIGdvaW5nIHRvIG92ZXJ3cml0ZSBhbnkga2V5cyBvbiB0aGUgYmFzZSBjYXBzIG9iamVjdFxuICBjb25zdCBvdmVyd3JpdHRlbktleXMgPSBfLmludGVyc2VjdGlvbihPYmplY3Qua2V5cyhjYXBzKSwgT2JqZWN0LmtleXMoYXBwaXVtT3B0aW9ucykpO1xuICBpZiAob3ZlcndyaXR0ZW5LZXlzLmxlbmd0aCA+IDApIHtcbiAgICBsb2cud2FybihgRm91bmQgY2FwYWJpbGl0aWVzIGluc2lkZSAke1BSRUZJWEVEX0FQUElVTV9PUFRTX0NBUH0gdGhhdCB3aWxsIG92ZXJ3cml0ZSBgICtcbiAgICAgICAgICAgICBgY2FwYWJpbGl0aWVzIGF0IHRoZSB0b3AgbGV2ZWw6ICR7SlNPTi5zdHJpbmdpZnkob3ZlcndyaXR0ZW5LZXlzKX1gKTtcbiAgfVxuXG4gIC8vIG5vdyBqdXN0IGFwcGx5IHRoZW0gdG8gdGhlIG1haW4gY2FwcyBvYmplY3RcbiAgY2FwcyA9IHsuLi5jYXBzLCAuLi5hcHBpdW1PcHRpb25zfTtcblxuICAvLyBhbmQgcmVtb3ZlIGFsbCB0cmFjZXMgb2YgdGhlIG9wdGlvbnMgY2FwXG4gIGRlbGV0ZSBjYXBzW0FQUElVTV9PUFRTX0NBUF07XG4gIHJldHVybiBjYXBzO1xufVxuXG5cbmV4cG9ydCB7XG4gIHBhcnNlQ2FwcywgcHJvY2Vzc0NhcGFiaWxpdGllcywgdmFsaWRhdGVDYXBzLCBtZXJnZUNhcHMsIEFQUElVTV9WRU5ET1JfUFJFRklYLCBBUFBJVU1fT1BUU19DQVAsXG4gIGZpbmROb25QcmVmaXhlZENhcHMsIGlzU3RhbmRhcmRDYXAsIHN0cmlwQXBwaXVtUHJlZml4ZXMsIHByb21vdGVBcHBpdW1PcHRpb25zLCBQUkVGSVhFRF9BUFBJVU1fT1BUU19DQVAsXG59O1xuIl0sImZpbGUiOiJsaWIvYmFzZWRyaXZlci9jYXBhYmlsaXRpZXMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
