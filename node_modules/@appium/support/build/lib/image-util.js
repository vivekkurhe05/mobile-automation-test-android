"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MIME_PNG = exports.MIME_JPEG = exports.MIME_BMP = void 0;
exports.base64ToImage = base64ToImage;
exports.cropBase64Image = cropBase64Image;
exports.cropImage = cropImage;
exports.getJimpImage = getJimpImage;
exports.imageToBase64 = imageToBase64;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _jimp = _interopRequireDefault(require("jimp"));

var _buffer = require("buffer");

var _pngjs = require("pngjs");

var _bluebird = _interopRequireDefault(require("bluebird"));

const BYTES_IN_PIXEL_BLOCK = 4;
const SCANLINE_FILTER_METHOD = 4;
const {
  MIME_JPEG,
  MIME_PNG,
  MIME_BMP
} = _jimp.default;
exports.MIME_BMP = MIME_BMP;
exports.MIME_PNG = MIME_PNG;
exports.MIME_JPEG = MIME_JPEG;

async function getJimpImage(data) {
  return await new _bluebird.default((resolve, reject) => {
    if (!_lodash.default.isString(data) && !_lodash.default.isBuffer(data)) {
      return reject(new Error('Must initialize jimp object with string or buffer'));
    }

    if (_lodash.default.isString(data)) {
      data = _buffer.Buffer.from(data, 'base64');
    }

    new _jimp.default(data, (err, imgObj) => {
      if (err) {
        return reject(err);
      }

      if (!imgObj) {
        return reject(new Error('Could not create jimp image from that data'));
      }

      imgObj._getBuffer = imgObj.getBuffer.bind(imgObj);
      imgObj.getBuffer = _bluebird.default.promisify(imgObj._getBuffer, {
        context: imgObj
      });
      resolve(imgObj);
    });
  });
}

async function cropBase64Image(base64Image, rect) {
  const image = await base64ToImage(base64Image);
  cropImage(image, rect);
  return await imageToBase64(image);
}

async function base64ToImage(base64Image) {
  const imageBuffer = _buffer.Buffer.from(base64Image, 'base64');

  return await new _bluebird.default((resolve, reject) => {
    const image = new _pngjs.PNG({
      filterType: SCANLINE_FILTER_METHOD
    });
    image.parse(imageBuffer, (err, image) => {
      if (err) {
        return reject(err);
      }

      resolve(image);
    });
  });
}

async function imageToBase64(image) {
  return await new _bluebird.default((resolve, reject) => {
    const chunks = [];
    image.pack().on('data', chunk => chunks.push(chunk)).on('end', () => {
      resolve(_buffer.Buffer.concat(chunks).toString('base64'));
    }).on('error', err => {
      reject(err);
    });
  });
}

function cropImage(image, rect) {
  const imageRect = {
    width: image.width,
    height: image.height
  };
  const interRect = getRectIntersection(rect, imageRect);

  if (interRect.width < rect.width || interRect.height < rect.height) {
    throw new Error(`Cannot crop ${JSON.stringify(rect)} from ${JSON.stringify(imageRect)} because the intersection between them was not the size of the rect`);
  }

  const firstVerticalPixel = interRect.top;
  const lastVerticalPixel = interRect.top + interRect.height;
  const firstHorizontalPixel = interRect.left;
  const lastHorizontalPixel = interRect.left + interRect.width;
  const croppedArray = [];

  for (let y = firstVerticalPixel; y < lastVerticalPixel; y++) {
    for (let x = firstHorizontalPixel; x < lastHorizontalPixel; x++) {
      const firstByteIdxInPixelBlock = imageRect.width * y + x << 2;

      for (let byteIdx = 0; byteIdx < BYTES_IN_PIXEL_BLOCK; byteIdx++) {
        croppedArray.push(image.data[firstByteIdxInPixelBlock + byteIdx]);
      }
    }
  }

  image.data = _buffer.Buffer.from(croppedArray);
  image.width = interRect.width;
  image.height = interRect.height;
  return image;
}

function getRectIntersection(rect, imageSize) {
  const left = rect.left >= imageSize.width ? imageSize.width : rect.left;
  const top = rect.top >= imageSize.height ? imageSize.height : rect.top;
  const width = imageSize.width >= left + rect.width ? rect.width : imageSize.width - left;
  const height = imageSize.height >= top + rect.height ? rect.height : imageSize.height - top;
  return {
    left,
    top,
    width,
    height
  };
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
