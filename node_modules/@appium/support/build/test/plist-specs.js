"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _path = _interopRequireDefault(require("path"));

var _index = require("../lib/index.js");

const binaryPlistPath = _path.default.join(__dirname, 'assets', 'sample_binary.plist');

const textPlistPath = _path.default.join(__dirname, 'assets', 'sample_text.plist');

describe('plist', function () {
  it('should parse plist file as binary', async function () {
    let content = await _index.plist.parsePlistFile(binaryPlistPath);
    content.should.have.property('com.apple.locationd.bundle-/System/Library/PrivateFrameworks/Parsec.framework');
  });
  it(`should return an empty object if file doesn't exist and mustExist is set to false`, async function () {
    let mustExist = false;
    let content = await _index.plist.parsePlistFile('doesntExist.plist', mustExist);
    content.should.be.an('object');
    content.should.be.empty;
  });
  it('should write plist file as binary', async function () {
    let plistFile = _path.default.resolve(await _index.tempDir.openDir(), 'sample.plist');

    await _index.fs.copyFile(binaryPlistPath, plistFile);
    let updatedFields = {
      'io.appium.test': true
    };
    await _index.plist.updatePlistFile(plistFile, updatedFields, true);
    let content = await _index.plist.parsePlistFile(plistFile);
    content.should.have.property('io.appium.test');
  });
  it('should read binary plist', async function () {
    const content = await _index.fs.readFile(binaryPlistPath);

    const object = _index.plist.parsePlist(content);

    object.should.have.property('com.apple.locationd.bundle-/System/Library/PrivateFrameworks/Parsec.framework');
  });
  it('should read text plist', async function () {
    const content = await _index.fs.readFile(textPlistPath);

    const object = _index.plist.parsePlist(content);

    object.should.have.property('com.apple.locationd.bundle-/System/Library/PrivateFrameworks/Parsec.framework');
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvcGxpc3Qtc3BlY3MuanMiXSwibmFtZXMiOlsiYmluYXJ5UGxpc3RQYXRoIiwicGF0aCIsImpvaW4iLCJfX2Rpcm5hbWUiLCJ0ZXh0UGxpc3RQYXRoIiwiZGVzY3JpYmUiLCJpdCIsImNvbnRlbnQiLCJwbGlzdCIsInBhcnNlUGxpc3RGaWxlIiwic2hvdWxkIiwiaGF2ZSIsInByb3BlcnR5IiwibXVzdEV4aXN0IiwiYmUiLCJhbiIsImVtcHR5IiwicGxpc3RGaWxlIiwicmVzb2x2ZSIsInRlbXBEaXIiLCJvcGVuRGlyIiwiZnMiLCJjb3B5RmlsZSIsInVwZGF0ZWRGaWVsZHMiLCJ1cGRhdGVQbGlzdEZpbGUiLCJyZWFkRmlsZSIsIm9iamVjdCIsInBhcnNlUGxpc3QiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQUNBOztBQUlBLE1BQU1BLGVBQWUsR0FBR0MsY0FBS0MsSUFBTCxDQUFVQyxTQUFWLEVBQXFCLFFBQXJCLEVBQStCLHFCQUEvQixDQUF4Qjs7QUFDQSxNQUFNQyxhQUFhLEdBQUdILGNBQUtDLElBQUwsQ0FBVUMsU0FBVixFQUFxQixRQUFyQixFQUErQixtQkFBL0IsQ0FBdEI7O0FBRUFFLFFBQVEsQ0FBQyxPQUFELEVBQVUsWUFBWTtBQUM1QkMsRUFBQUEsRUFBRSxDQUFDLG1DQUFELEVBQXNDLGtCQUFrQjtBQUN4RCxRQUFJQyxPQUFPLEdBQUcsTUFBTUMsYUFBTUMsY0FBTixDQUFxQlQsZUFBckIsQ0FBcEI7QUFDQU8sSUFBQUEsT0FBTyxDQUFDRyxNQUFSLENBQWVDLElBQWYsQ0FBb0JDLFFBQXBCLENBQTZCLCtFQUE3QjtBQUNELEdBSEMsQ0FBRjtBQUtBTixFQUFBQSxFQUFFLENBQUUsbUZBQUYsRUFBc0Ysa0JBQWtCO0FBQ3hHLFFBQUlPLFNBQVMsR0FBRyxLQUFoQjtBQUNBLFFBQUlOLE9BQU8sR0FBRyxNQUFNQyxhQUFNQyxjQUFOLENBQXFCLG1CQUFyQixFQUEwQ0ksU0FBMUMsQ0FBcEI7QUFDQU4sSUFBQUEsT0FBTyxDQUFDRyxNQUFSLENBQWVJLEVBQWYsQ0FBa0JDLEVBQWxCLENBQXFCLFFBQXJCO0FBQ0FSLElBQUFBLE9BQU8sQ0FBQ0csTUFBUixDQUFlSSxFQUFmLENBQWtCRSxLQUFsQjtBQUNELEdBTEMsQ0FBRjtBQU9BVixFQUFBQSxFQUFFLENBQUMsbUNBQUQsRUFBc0Msa0JBQWtCO0FBRXhELFFBQUlXLFNBQVMsR0FBR2hCLGNBQUtpQixPQUFMLENBQWEsTUFBTUMsZUFBUUMsT0FBUixFQUFuQixFQUFzQyxjQUF0QyxDQUFoQjs7QUFDQSxVQUFNQyxVQUFHQyxRQUFILENBQVl0QixlQUFaLEVBQTZCaUIsU0FBN0IsQ0FBTjtBQUdBLFFBQUlNLGFBQWEsR0FBRztBQUNsQix3QkFBa0I7QUFEQSxLQUFwQjtBQUdBLFVBQU1mLGFBQU1nQixlQUFOLENBQXNCUCxTQUF0QixFQUFpQ00sYUFBakMsRUFBZ0QsSUFBaEQsQ0FBTjtBQUdBLFFBQUloQixPQUFPLEdBQUcsTUFBTUMsYUFBTUMsY0FBTixDQUFxQlEsU0FBckIsQ0FBcEI7QUFDQVYsSUFBQUEsT0FBTyxDQUFDRyxNQUFSLENBQWVDLElBQWYsQ0FBb0JDLFFBQXBCLENBQTZCLGdCQUE3QjtBQUNELEdBZEMsQ0FBRjtBQWdCQU4sRUFBQUEsRUFBRSxDQUFDLDBCQUFELEVBQTZCLGtCQUFrQjtBQUMvQyxVQUFNQyxPQUFPLEdBQUcsTUFBTWMsVUFBR0ksUUFBSCxDQUFZekIsZUFBWixDQUF0Qjs7QUFDQSxVQUFNMEIsTUFBTSxHQUFHbEIsYUFBTW1CLFVBQU4sQ0FBaUJwQixPQUFqQixDQUFmOztBQUNBbUIsSUFBQUEsTUFBTSxDQUFDaEIsTUFBUCxDQUFjQyxJQUFkLENBQW1CQyxRQUFuQixDQUE0QiwrRUFBNUI7QUFDRCxHQUpDLENBQUY7QUFNQU4sRUFBQUEsRUFBRSxDQUFDLHdCQUFELEVBQTJCLGtCQUFrQjtBQUM3QyxVQUFNQyxPQUFPLEdBQUcsTUFBTWMsVUFBR0ksUUFBSCxDQUFZckIsYUFBWixDQUF0Qjs7QUFDQSxVQUFNc0IsTUFBTSxHQUFHbEIsYUFBTW1CLFVBQU4sQ0FBaUJwQixPQUFqQixDQUFmOztBQUNBbUIsSUFBQUEsTUFBTSxDQUFDaEIsTUFBUCxDQUFjQyxJQUFkLENBQW1CQyxRQUFuQixDQUE0QiwrRUFBNUI7QUFDRCxHQUpDLENBQUY7QUFLRCxDQXhDTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBwbGlzdCwgdGVtcERpciwgZnMgfSBmcm9tICcuLi9saWIvaW5kZXguanMnO1xuXG5cblxuY29uc3QgYmluYXJ5UGxpc3RQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJ2Fzc2V0cycsICdzYW1wbGVfYmluYXJ5LnBsaXN0Jyk7XG5jb25zdCB0ZXh0UGxpc3RQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJ2Fzc2V0cycsICdzYW1wbGVfdGV4dC5wbGlzdCcpO1xuXG5kZXNjcmliZSgncGxpc3QnLCBmdW5jdGlvbiAoKSB7XG4gIGl0KCdzaG91bGQgcGFyc2UgcGxpc3QgZmlsZSBhcyBiaW5hcnknLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGNvbnRlbnQgPSBhd2FpdCBwbGlzdC5wYXJzZVBsaXN0RmlsZShiaW5hcnlQbGlzdFBhdGgpO1xuICAgIGNvbnRlbnQuc2hvdWxkLmhhdmUucHJvcGVydHkoJ2NvbS5hcHBsZS5sb2NhdGlvbmQuYnVuZGxlLS9TeXN0ZW0vTGlicmFyeS9Qcml2YXRlRnJhbWV3b3Jrcy9QYXJzZWMuZnJhbWV3b3JrJyk7XG4gIH0pO1xuXG4gIGl0KGBzaG91bGQgcmV0dXJuIGFuIGVtcHR5IG9iamVjdCBpZiBmaWxlIGRvZXNuJ3QgZXhpc3QgYW5kIG11c3RFeGlzdCBpcyBzZXQgdG8gZmFsc2VgLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IG11c3RFeGlzdCA9IGZhbHNlO1xuICAgIGxldCBjb250ZW50ID0gYXdhaXQgcGxpc3QucGFyc2VQbGlzdEZpbGUoJ2RvZXNudEV4aXN0LnBsaXN0JywgbXVzdEV4aXN0KTtcbiAgICBjb250ZW50LnNob3VsZC5iZS5hbignb2JqZWN0Jyk7XG4gICAgY29udGVudC5zaG91bGQuYmUuZW1wdHk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgd3JpdGUgcGxpc3QgZmlsZSBhcyBiaW5hcnknLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgLy8gY3JlYXRlIGEgdGVtcG9yYXJ5IGZpbGUsIHRvIHdoaWNoIHdlIHdpbGwgd3JpdGVcbiAgICBsZXQgcGxpc3RGaWxlID0gcGF0aC5yZXNvbHZlKGF3YWl0IHRlbXBEaXIub3BlbkRpcigpLCAnc2FtcGxlLnBsaXN0Jyk7XG4gICAgYXdhaXQgZnMuY29weUZpbGUoYmluYXJ5UGxpc3RQYXRoLCBwbGlzdEZpbGUpO1xuXG4gICAgLy8gd3JpdGUgc29tZSBkYXRhXG4gICAgbGV0IHVwZGF0ZWRGaWVsZHMgPSB7XG4gICAgICAnaW8uYXBwaXVtLnRlc3QnOiB0cnVlXG4gICAgfTtcbiAgICBhd2FpdCBwbGlzdC51cGRhdGVQbGlzdEZpbGUocGxpc3RGaWxlLCB1cGRhdGVkRmllbGRzLCB0cnVlKTtcblxuICAgIC8vIG1ha2Ugc3VyZSB0aGUgZGF0YSBpcyB0aGVyZVxuICAgIGxldCBjb250ZW50ID0gYXdhaXQgcGxpc3QucGFyc2VQbGlzdEZpbGUocGxpc3RGaWxlKTtcbiAgICBjb250ZW50LnNob3VsZC5oYXZlLnByb3BlcnR5KCdpby5hcHBpdW0udGVzdCcpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlYWQgYmluYXJ5IHBsaXN0JywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBmcy5yZWFkRmlsZShiaW5hcnlQbGlzdFBhdGgpO1xuICAgIGNvbnN0IG9iamVjdCA9IHBsaXN0LnBhcnNlUGxpc3QoY29udGVudCk7XG4gICAgb2JqZWN0LnNob3VsZC5oYXZlLnByb3BlcnR5KCdjb20uYXBwbGUubG9jYXRpb25kLmJ1bmRsZS0vU3lzdGVtL0xpYnJhcnkvUHJpdmF0ZUZyYW1ld29ya3MvUGFyc2VjLmZyYW1ld29yaycpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlYWQgdGV4dCBwbGlzdCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgZnMucmVhZEZpbGUodGV4dFBsaXN0UGF0aCk7XG4gICAgY29uc3Qgb2JqZWN0ID0gcGxpc3QucGFyc2VQbGlzdChjb250ZW50KTtcbiAgICBvYmplY3Quc2hvdWxkLmhhdmUucHJvcGVydHkoJ2NvbS5hcHBsZS5sb2NhdGlvbmQuYnVuZGxlLS9TeXN0ZW0vTGlicmFyeS9Qcml2YXRlRnJhbWV3b3Jrcy9QYXJzZWMuZnJhbWV3b3JrJyk7XG4gIH0pO1xufSk7XG4iXSwiZmlsZSI6InRlc3QvcGxpc3Qtc3BlY3MuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
