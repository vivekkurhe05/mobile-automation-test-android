"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _imageUtil = require("../lib/image-util");

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../lib");

const FIXTURES_ROOT = _path.default.resolve(__dirname, '..', '..', 'test', 'images');

async function getImage(name) {
  const imagePath = _path.default.resolve(FIXTURES_ROOT, name);

  return await _lib.fs.readFile(imagePath, 'utf8');
}

describe('image-util', function () {
  describe('cropBase64Image', function () {
    let originalImage = null;
    before(async function () {
      const originalImage64 = await getImage('full-image.b64');
      originalImage = await (0, _imageUtil.base64ToImage)(originalImage64);
      originalImage.width.should.be.equal(640, 'unexpected width');
      originalImage.height.should.be.equal(1136, 'unexpected height');
    });
    it('should verify that an image is cropped correctly', async function () {
      const croppedImage = await (0, _imageUtil.cropImage)(originalImage, {
        left: 35,
        top: 107,
        width: 323,
        height: 485
      });
      croppedImage.width.should.be.equal(323, 'unexpected width');
      croppedImage.height.should.be.equal(485, 'unexpected height');
      const croppedImageShouldBe = await getImage('cropped-image.b64');
      const croppedImage64 = await (0, _imageUtil.imageToBase64)(croppedImage);
      croppedImage64.should.be.equal(croppedImageShouldBe);
    });
  });
  describe('Jimp helpers', function () {
    it('should get a jimp object using image buffer', async function () {
      const base64Image = await getImage('cropped-image.b64');
      const imageBuffer = Buffer.from(base64Image, 'base64');
      const jimpImg = await (0, _imageUtil.getJimpImage)(imageBuffer);
      jimpImg.hash().should.eql('80000000000');
      jimpImg.bitmap.height.should.eql(485);
      jimpImg.bitmap.width.should.eql(323);
    });
    it('should get a jimp object using b64 string', async function () {
      const base64Image = await getImage('cropped-image.b64');
      const jimpImg = await (0, _imageUtil.getJimpImage)(base64Image);
      jimpImg.hash().should.eql('80000000000');
      jimpImg.bitmap.height.should.eql(485);
      jimpImg.bitmap.width.should.eql(323);
    });
    it('should error with incorrect data type', async function () {
      await (0, _imageUtil.getJimpImage)(1234).should.eventually.be.rejectedWith(/string or buffer/);
    });
    it('should error with incorrect image data', async function () {
      await (0, _imageUtil.getJimpImage)('foo').should.eventually.be.rejectedWith(/Could not find MIME for Buffer/);
    });
    it('should get an image buffer via the overridden getBuffer method', async function () {
      const base64Image = await getImage('cropped-image.b64');
      const jimpImg = await (0, _imageUtil.getJimpImage)(base64Image);
      const buf = await jimpImg.getBuffer(_imageUtil.MIME_PNG);
      _lodash.default.isBuffer(buf).should.be.true;
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
