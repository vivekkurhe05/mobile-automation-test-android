"use strict";

require("source-map-support/register");

var _helpers = require("./helpers");

const LOG_LEVELS = ['silly', 'verbose', 'info', 'http', 'warn', 'error'];
describe('normal logger', function () {
  let writers, log;
  beforeEach(function () {
    writers = (0, _helpers.setupWriters)();
    log = (0, _helpers.getDynamicLogger)(false, false);
    log.level = 'silly';
  });
  afterEach(function () {
    (0, _helpers.restoreWriters)(writers);
  });
  it('should not rewrite log levels outside of testing', function () {
    for (const levelName of LOG_LEVELS) {
      log[levelName](levelName);
      (0, _helpers.assertOutputContains)(writers, levelName);
    }
  });
  it('throw should not rewrite log levels outside of testing and throw error', function () {
    (() => {
      log.errorAndThrow('msg1');
    }).should.throw('msg1');
    (() => {
      log.errorAndThrow(new Error('msg2'));
    }).should.throw('msg2');
    (0, _helpers.assertOutputContains)(writers, 'msg1');
    (0, _helpers.assertOutputContains)(writers, 'msg2');
  });
  it('should get and set log levels', function () {
    log.level = 'warn';
    log.level.should.equal('warn');
    log.info('information');
    log.warn('warning');
    (0, _helpers.assertOutputDoesntContain)(writers, 'information');
    (0, _helpers.assertOutputContains)(writers, 'warning');
  });
  it('should split lines of multi-line logs', function () {
    log.level = 'warn';
    log.warn('this is one line\nand this is another');
    (0, _helpers.assertOutputDoesntContain)(writers, 'this is one line\nand this is another');
    (0, _helpers.assertOutputContains)(writers, 'this is one line');
    (0, _helpers.assertOutputContains)(writers, 'and this is another');
  });
  it('should split stack trace of Error', function () {
    log.level = 'warn';
    let error = new Error('this is an error');
    error.stack = 'stack line 1\nstack line 2';
    log.warn(error);
    (0, _helpers.assertOutputDoesntContain)(writers, 'stack line 1\nstack line 2');
    (0, _helpers.assertOutputContains)(writers, 'stack line 1');
    (0, _helpers.assertOutputContains)(writers, 'stack line 2');
  });
});
describe('normal logger with static prefix', function () {
  let writers, log;
  const PREFIX = 'my_static_prefix';
  before(function () {
    writers = (0, _helpers.setupWriters)();
    log = (0, _helpers.getDynamicLogger)(false, false, PREFIX);
    log.level = 'silly';
  });
  after(function () {
    (0, _helpers.restoreWriters)(writers);
  });
  it('should not rewrite log levels outside of testing', function () {
    for (const levelName of LOG_LEVELS) {
      log[levelName](levelName);
      (0, _helpers.assertOutputContains)(writers, levelName);
      (0, _helpers.assertOutputContains)(writers, PREFIX);
    }
  });
  it('throw should not rewrite log levels outside of testing and throw error', function () {
    (() => {
      log.errorAndThrow('msg');
    }).should.throw('msg');
    (0, _helpers.assertOutputContains)(writers, 'error');
    (0, _helpers.assertOutputContains)(writers, PREFIX);
  });
});
describe('normal logger with dynamic prefix', function () {
  let writers, log;
  const PREFIX = 'my_dynamic_prefix';
  before(function () {
    writers = (0, _helpers.setupWriters)();
    log = (0, _helpers.getDynamicLogger)(false, false, () => PREFIX);
    log.level = 'silly';
  });
  after(function () {
    (0, _helpers.restoreWriters)(writers);
  });
  it('should not rewrite log levels outside of testing', function () {
    for (const levelName of LOG_LEVELS) {
      log[levelName](levelName);
      (0, _helpers.assertOutputContains)(writers, levelName);
      (0, _helpers.assertOutputContains)(writers, PREFIX);
    }
  });
  it('throw should not rewrite log levels outside of testing and throw error', function () {
    (() => {
      log.errorAndThrow('msg');
    }).should.throw('msg');
    (0, _helpers.assertOutputContains)(writers, 'error');
    (0, _helpers.assertOutputContains)(writers, PREFIX);
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
