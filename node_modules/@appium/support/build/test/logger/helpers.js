"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertOutputContains = assertOutputContains;
exports.assertOutputDoesntContain = assertOutputDoesntContain;
exports.getDynamicLogger = getDynamicLogger;
exports.restoreWriters = restoreWriters;
exports.setupWriters = setupWriters;

require("source-map-support/register");

var _sinon = _interopRequireDefault(require("sinon"));

var _lodash = _interopRequireDefault(require("lodash"));

var _lib = require("../../lib");

function setupWriters() {
  return {
    'stdout': _sinon.default.spy(process.stdout, 'write'),
    'stderr': _sinon.default.spy(process.stderr, 'write')
  };
}

function getDynamicLogger(testingMode, forceLogs, prefix = null) {
  process.env._TESTING = testingMode ? '1' : '0';
  process.env._FORCE_LOGS = forceLogs ? '1' : '0';
  return _lib.logger.getLogger(prefix);
}

function restoreWriters(writers) {
  for (let w of _lodash.default.values(writers)) {
    w.restore();
  }
}

function someoneHadOutput(writers, output) {
  let hadOutput = false;

  let matchOutput = _sinon.default.match(function (value) {
    return value && value.indexOf(output) >= 0;
  }, 'matchOutput');

  for (let writer of _lodash.default.values(writers)) {
    if (writer.calledWith) {
      hadOutput = writer.calledWithMatch(matchOutput);
      if (hadOutput) break;
    }
  }

  return hadOutput;
}

function assertOutputContains(writers, output) {
  if (!someoneHadOutput(writers, output)) {
    throw new Error(`Expected something to have been called with: '${output}'`);
  }
}

function assertOutputDoesntContain(writers, output) {
  if (someoneHadOutput(writers, output)) {
    throw new Error(`Expected nothing to have been called with: '${output}'`);
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvbG9nZ2VyL2hlbHBlcnMuanMiXSwibmFtZXMiOlsic2V0dXBXcml0ZXJzIiwic2lub24iLCJzcHkiLCJwcm9jZXNzIiwic3Rkb3V0Iiwic3RkZXJyIiwiZ2V0RHluYW1pY0xvZ2dlciIsInRlc3RpbmdNb2RlIiwiZm9yY2VMb2dzIiwicHJlZml4IiwiZW52IiwiX1RFU1RJTkciLCJfRk9SQ0VfTE9HUyIsImxvZ2dlciIsImdldExvZ2dlciIsInJlc3RvcmVXcml0ZXJzIiwid3JpdGVycyIsInciLCJfIiwidmFsdWVzIiwicmVzdG9yZSIsInNvbWVvbmVIYWRPdXRwdXQiLCJvdXRwdXQiLCJoYWRPdXRwdXQiLCJtYXRjaE91dHB1dCIsIm1hdGNoIiwidmFsdWUiLCJpbmRleE9mIiwid3JpdGVyIiwiY2FsbGVkV2l0aCIsImNhbGxlZFdpdGhNYXRjaCIsImFzc2VydE91dHB1dENvbnRhaW5zIiwiRXJyb3IiLCJhc3NlcnRPdXRwdXREb2VzbnRDb250YWluIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFJQSxTQUFTQSxZQUFULEdBQXlCO0FBQ3ZCLFNBQU87QUFBQyxjQUFVQyxlQUFNQyxHQUFOLENBQVVDLE9BQU8sQ0FBQ0MsTUFBbEIsRUFBMEIsT0FBMUIsQ0FBWDtBQUNDLGNBQVVILGVBQU1DLEdBQU4sQ0FBVUMsT0FBTyxDQUFDRSxNQUFsQixFQUEwQixPQUExQjtBQURYLEdBQVA7QUFFRDs7QUFFRCxTQUFTQyxnQkFBVCxDQUEyQkMsV0FBM0IsRUFBd0NDLFNBQXhDLEVBQW1EQyxNQUFNLEdBQUcsSUFBNUQsRUFBa0U7QUFDaEVOLEVBQUFBLE9BQU8sQ0FBQ08sR0FBUixDQUFZQyxRQUFaLEdBQXVCSixXQUFXLEdBQUcsR0FBSCxHQUFTLEdBQTNDO0FBQ0FKLEVBQUFBLE9BQU8sQ0FBQ08sR0FBUixDQUFZRSxXQUFaLEdBQTBCSixTQUFTLEdBQUcsR0FBSCxHQUFTLEdBQTVDO0FBQ0EsU0FBT0ssWUFBT0MsU0FBUCxDQUFpQkwsTUFBakIsQ0FBUDtBQUNEOztBQUVELFNBQVNNLGNBQVQsQ0FBeUJDLE9BQXpCLEVBQWtDO0FBQ2hDLE9BQUssSUFBSUMsQ0FBVCxJQUFjQyxnQkFBRUMsTUFBRixDQUFTSCxPQUFULENBQWQsRUFBaUM7QUFDL0JDLElBQUFBLENBQUMsQ0FBQ0csT0FBRjtBQUNEO0FBQ0Y7O0FBRUQsU0FBU0MsZ0JBQVQsQ0FBMkJMLE9BQTNCLEVBQW9DTSxNQUFwQyxFQUE0QztBQUMxQyxNQUFJQyxTQUFTLEdBQUcsS0FBaEI7O0FBQ0EsTUFBSUMsV0FBVyxHQUFHdkIsZUFBTXdCLEtBQU4sQ0FBWSxVQUFVQyxLQUFWLEVBQWlCO0FBQzdDLFdBQU9BLEtBQUssSUFBSUEsS0FBSyxDQUFDQyxPQUFOLENBQWNMLE1BQWQsS0FBeUIsQ0FBekM7QUFDRCxHQUZpQixFQUVmLGFBRmUsQ0FBbEI7O0FBSUEsT0FBSyxJQUFJTSxNQUFULElBQW1CVixnQkFBRUMsTUFBRixDQUFTSCxPQUFULENBQW5CLEVBQXNDO0FBQ3BDLFFBQUlZLE1BQU0sQ0FBQ0MsVUFBWCxFQUF1QjtBQUNyQk4sTUFBQUEsU0FBUyxHQUFHSyxNQUFNLENBQUNFLGVBQVAsQ0FBdUJOLFdBQXZCLENBQVo7QUFDQSxVQUFJRCxTQUFKLEVBQWU7QUFDaEI7QUFDRjs7QUFDRCxTQUFPQSxTQUFQO0FBQ0Q7O0FBRUQsU0FBU1Esb0JBQVQsQ0FBK0JmLE9BQS9CLEVBQXdDTSxNQUF4QyxFQUFnRDtBQUM5QyxNQUFJLENBQUNELGdCQUFnQixDQUFDTCxPQUFELEVBQVVNLE1BQVYsQ0FBckIsRUFBd0M7QUFDdEMsVUFBTSxJQUFJVSxLQUFKLENBQVcsaURBQWdEVixNQUFPLEdBQWxFLENBQU47QUFDRDtBQUNGOztBQUVELFNBQVNXLHlCQUFULENBQW9DakIsT0FBcEMsRUFBNkNNLE1BQTdDLEVBQXFEO0FBQ25ELE1BQUlELGdCQUFnQixDQUFDTCxPQUFELEVBQVVNLE1BQVYsQ0FBcEIsRUFBdUM7QUFDckMsVUFBTSxJQUFJVSxLQUFKLENBQVcsK0NBQThDVixNQUFPLEdBQWhFLENBQU47QUFDRDtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHNpbm9uIGZyb20gJ3Npbm9uJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBsb2dnZXIgfSBmcm9tICcuLi8uLi9saWInO1xuXG5cblxuZnVuY3Rpb24gc2V0dXBXcml0ZXJzICgpIHtcbiAgcmV0dXJuIHsnc3Rkb3V0Jzogc2lub24uc3B5KHByb2Nlc3Muc3Rkb3V0LCAnd3JpdGUnKSxcbiAgICAgICAgICAnc3RkZXJyJzogc2lub24uc3B5KHByb2Nlc3Muc3RkZXJyLCAnd3JpdGUnKX07XG59XG5cbmZ1bmN0aW9uIGdldER5bmFtaWNMb2dnZXIgKHRlc3RpbmdNb2RlLCBmb3JjZUxvZ3MsIHByZWZpeCA9IG51bGwpIHtcbiAgcHJvY2Vzcy5lbnYuX1RFU1RJTkcgPSB0ZXN0aW5nTW9kZSA/ICcxJyA6ICcwJztcbiAgcHJvY2Vzcy5lbnYuX0ZPUkNFX0xPR1MgPSBmb3JjZUxvZ3MgPyAnMScgOiAnMCc7XG4gIHJldHVybiBsb2dnZXIuZ2V0TG9nZ2VyKHByZWZpeCk7XG59XG5cbmZ1bmN0aW9uIHJlc3RvcmVXcml0ZXJzICh3cml0ZXJzKSB7XG4gIGZvciAobGV0IHcgb2YgXy52YWx1ZXMod3JpdGVycykpIHtcbiAgICB3LnJlc3RvcmUoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzb21lb25lSGFkT3V0cHV0ICh3cml0ZXJzLCBvdXRwdXQpIHtcbiAgbGV0IGhhZE91dHB1dCA9IGZhbHNlO1xuICBsZXQgbWF0Y2hPdXRwdXQgPSBzaW5vbi5tYXRjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgdmFsdWUuaW5kZXhPZihvdXRwdXQpID49IDA7XG4gIH0sICdtYXRjaE91dHB1dCcpO1xuXG4gIGZvciAobGV0IHdyaXRlciBvZiBfLnZhbHVlcyh3cml0ZXJzKSkge1xuICAgIGlmICh3cml0ZXIuY2FsbGVkV2l0aCkge1xuICAgICAgaGFkT3V0cHV0ID0gd3JpdGVyLmNhbGxlZFdpdGhNYXRjaChtYXRjaE91dHB1dCk7XG4gICAgICBpZiAoaGFkT3V0cHV0KSBicmVhazsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjdXJseVxuICAgIH1cbiAgfVxuICByZXR1cm4gaGFkT3V0cHV0O1xufVxuXG5mdW5jdGlvbiBhc3NlcnRPdXRwdXRDb250YWlucyAod3JpdGVycywgb3V0cHV0KSB7XG4gIGlmICghc29tZW9uZUhhZE91dHB1dCh3cml0ZXJzLCBvdXRwdXQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBzb21ldGhpbmcgdG8gaGF2ZSBiZWVuIGNhbGxlZCB3aXRoOiAnJHtvdXRwdXR9J2ApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydE91dHB1dERvZXNudENvbnRhaW4gKHdyaXRlcnMsIG91dHB1dCkge1xuICBpZiAoc29tZW9uZUhhZE91dHB1dCh3cml0ZXJzLCBvdXRwdXQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBub3RoaW5nIHRvIGhhdmUgYmVlbiBjYWxsZWQgd2l0aDogJyR7b3V0cHV0fSdgKTtcbiAgfVxufVxuXG5leHBvcnQge1xuICBzZXR1cFdyaXRlcnMsIHJlc3RvcmVXcml0ZXJzLCBhc3NlcnRPdXRwdXRDb250YWlucywgYXNzZXJ0T3V0cHV0RG9lc250Q29udGFpbixcbiAgZ2V0RHluYW1pY0xvZ2dlcixcbn07XG4iXSwiZmlsZSI6InRlc3QvbG9nZ2VyL2hlbHBlcnMuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
