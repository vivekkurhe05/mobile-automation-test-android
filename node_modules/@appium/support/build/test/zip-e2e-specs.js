"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _path = _interopRequireDefault(require("path"));

var zip = _interopRequireWildcard(require("../lib/zip"));

var _index = require("../lib/index");

var _helpers = require("./helpers");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

describe('#zip', function () {
  const optionMap = new Map([['native JS unzip', {}], ['system unzip', {
    useSystemUnzip: true
  }]]);
  optionMap.forEach((options, desc) => {
    describe(desc, function () {
      let assetsPath;
      let zippedFilePath;
      let tmpRoot;
      beforeEach(async function () {
        assetsPath = await _index.tempDir.openDir();
        tmpRoot = await _index.tempDir.openDir();
        const zippedBase64 = 'UEsDBAoAAAAAALlzk0oAAAAAAAAAAAAAAAAJABAAdW56aXBwZWQvVVgMANBO+VjO1vdY9QEUAFBLAwQKAAAAAADAc5NKAAAAAAAAAAAAAAAAEgAQAHVuemlwcGVkL3Rlc3QtZGlyL1VYDADQTvlY19b3WPUBFABQSwMEFAAIAAgAwnOTSgAAAAAAAAAAAAAAABcAEAB1bnppcHBlZC90ZXN0LWRpci9hLnR4dFVYDACDTvlY3Nb3WPUBFADzSM3JyVcIzy/KSQEAUEsHCFaxF0oNAAAACwAAAFBLAwQUAAgACADEc5NKAAAAAAAAAAAAAAAAFwAQAHVuemlwcGVkL3Rlc3QtZGlyL2IudHh0VVgMAINO+Vjf1vdY9QEUAHPLz1dwSiwCAFBLBwhIfrZJCQAAAAcAAABQSwECFQMKAAAAAAC5c5NKAAAAAAAAAAAAAAAACQAMAAAAAAAAAABA7UEAAAAAdW56aXBwZWQvVVgIANBO+VjO1vdYUEsBAhUDCgAAAAAAwHOTSgAAAAAAAAAAAAAAABIADAAAAAAAAAAAQO1BNwAAAHVuemlwcGVkL3Rlc3QtZGlyL1VYCADQTvlY19b3WFBLAQIVAxQACAAIAMJzk0pWsRdKDQAAAAsAAAAXAAwAAAAAAAAAAECkgXcAAAB1bnppcHBlZC90ZXN0LWRpci9hLnR4dFVYCACDTvlY3Nb3WFBLAQIVAxQACAAIAMRzk0pIfrZJCQAAAAcAAAAXAAwAAAAAAAAAAECkgdkAAAB1bnppcHBlZC90ZXN0LWRpci9iLnR4dFVYCACDTvlY39b3WFBLBQYAAAAABAAEADEBAAA3AQAAAAA=';
        zippedFilePath = _path.default.resolve(tmpRoot, 'zipped.zip');
        await _index.fs.writeFile(zippedFilePath, zippedBase64, 'base64');
        await zip.extractAllTo(zippedFilePath, assetsPath, options);
      });
      afterEach(async function () {
        for (const tmpPath of [assetsPath, tmpRoot]) {
          if (!(await _index.fs.exists(tmpPath))) {
            continue;
          }

          await _index.fs.rimraf(tmpPath);
        }
      });
      describe('extractAllTo()', function () {
        it('should extract contents of a .zip file to a directory', async function () {
          await _index.fs.readFile(_path.default.resolve(assetsPath, 'unzipped', 'test-dir', 'a.txt'), {
            encoding: 'utf8'
          }).should.eventually.equal('Hello World');
          await _index.fs.readFile(_path.default.resolve(assetsPath, 'unzipped', 'test-dir', 'b.txt'), {
            encoding: 'utf8'
          }).should.eventually.equal('Foo Bar');
        });
      });
      describe('assertValidZip', function () {
        it('should not throw an error if a valid ZIP file is passed', async function () {
          await zip.assertValidZip(zippedFilePath).should.eventually.be.fulfilled;
        });
        it('should throw an error if the file does not exist', async function () {
          await zip.assertValidZip('blabla').should.eventually.be.rejected;
        });
        it('should throw an error if the file is invalid', async function () {
          await zip.assertValidZip(_path.default.resolve(assetsPath, 'unzipped', 'test-dir', 'a.txt')).should.eventually.be.rejected;
        });
      });
      describe('readEntries()', function () {
        const expectedEntries = [{
          name: 'unzipped/'
        }, {
          name: 'unzipped/test-dir/'
        }, {
          name: 'unzipped/test-dir/a.txt',
          contents: 'Hello World'
        }, {
          name: 'unzipped/test-dir/b.txt',
          contents: 'Foo Bar'
        }];
        it('should iterate entries (directories and files) of zip file', async function () {
          let i = 0;
          await zip.readEntries(zippedFilePath, async ({
            entry,
            extractEntryTo
          }) => {
            entry.fileName.should.equal(expectedEntries[i].name);

            if (expectedEntries[i].contents) {
              await extractEntryTo(tmpRoot);
              await _index.fs.readFile(_path.default.resolve(tmpRoot, entry.fileName), {
                flags: 'r',
                encoding: 'utf8'
              }).should.eventually.equal(expectedEntries[i].contents);
            }

            i++;
          });
        });
        it('should stop iterating zipFile if onEntry callback returns false', async function () {
          let i = 0;
          await zip.readEntries(zippedFilePath, async () => {
            i++;
            return false;
          });
          i.should.equal(1);
        });
        it('should be rejected if it uses a non-zip file', async function () {
          let promise = zip.readEntries(_path.default.resolve(assetsPath, 'unzipped', 'test-dir', 'a.txt'), async () => {});
          await promise.should.eventually.be.rejected;
        });
      });
      describe('toInMemoryZip()', function () {
        it('should convert a local file to an in-memory zip buffer', async function () {
          const testFolder = _path.default.resolve(assetsPath, 'unzipped');

          const buffer = await zip.toInMemoryZip(testFolder);
          Buffer.isBuffer(buffer).should.be.true;
          await _index.fs.writeFile(_path.default.resolve(tmpRoot, 'test.zip'), buffer);
          await zip.extractAllTo(_path.default.resolve(tmpRoot, 'test.zip'), _path.default.resolve(tmpRoot, 'output'), {
            fileNamesEncoding: 'utf8'
          });
          await _index.fs.readFile(_path.default.resolve(tmpRoot, 'output', 'test-dir', 'a.txt'), {
            encoding: 'utf8'
          }).should.eventually.equal('Hello World');
          await _index.fs.readFile(_path.default.resolve(tmpRoot, 'output', 'test-dir', 'b.txt'), {
            encoding: 'utf8'
          }).should.eventually.equal('Foo Bar');
        });
        it('should convert a local folder to an in-memory base64-encoded zip buffer', async function () {
          const testFolder = _path.default.resolve(assetsPath, 'unzipped');

          const buffer = await zip.toInMemoryZip(testFolder, {
            encodeToBase64: true
          });
          await _index.fs.writeFile(_path.default.resolve(tmpRoot, 'test.zip'), Buffer.from(buffer.toString(), 'base64'));
          await zip.extractAllTo(_path.default.resolve(tmpRoot, 'test.zip'), _path.default.resolve(tmpRoot, 'output'));
          await _index.fs.readFile(_path.default.resolve(tmpRoot, 'output', 'test-dir', 'a.txt'), {
            encoding: 'utf8'
          }).should.eventually.equal('Hello World');
          await _index.fs.readFile(_path.default.resolve(tmpRoot, 'output', 'test-dir', 'b.txt'), {
            encoding: 'utf8'
          }).should.eventually.equal('Foo Bar');
        });
        it('should be rejected if use a bad path', async function () {
          await zip.toInMemoryZip(_path.default.resolve(assetsPath, 'bad_path')).should.be.rejectedWith(/no such/i);
        });
        it('should be rejected if max size is exceeded', async function () {
          const testFolder = _path.default.resolve(assetsPath, 'unzipped');

          await zip.toInMemoryZip(testFolder, {
            maxSize: 1
          }).should.be.rejectedWith(/must not be greater/);
        });
      });
      describe('_extractEntryTo()', function () {
        let entry, mockZipFile, mockZipStream;
        beforeEach(async function () {
          entry = {
            fileName: _path.default.resolve(await _index.tempDir.openDir(), 'temp', 'file')
          };
          mockZipStream = new _helpers.MockReadWriteStream();
          mockZipFile = {
            openReadStream: (entry, cb) => cb(null, mockZipStream)
          };
        });
        it('should be rejected if zip stream emits an error', async function () {
          mockZipStream.pipe = () => {
            mockZipStream.emit('error', new Error('zip stream error'));
          };

          await zip._extractEntryTo(mockZipFile, entry).should.be.rejectedWith('zip stream error');
        });
        it('should be rejected if write stream emits an error', async function () {
          mockZipStream.pipe = writeStream => {
            writeStream.emit('error', new Error('write stream error'));
            mockZipStream.end();
            writeStream.end();
          };

          await zip._extractEntryTo(mockZipFile, entry).should.be.rejectedWith('write stream error');
        });
      });
      describe('toArchive', function () {
        it('should zip all files into an archive', async function () {
          const testFolder = _path.default.resolve(assetsPath, 'unzipped');

          const dstPath = _path.default.resolve(tmpRoot, 'test.zip');

          await zip.toArchive(dstPath, {
            cwd: testFolder
          });
          await zip.extractAllTo(dstPath, _path.default.resolve(tmpRoot, 'output'));
          await _index.fs.readFile(_path.default.resolve(tmpRoot, 'output', 'test-dir', 'a.txt'), {
            encoding: 'utf8'
          }).should.eventually.equal('Hello World');
          await _index.fs.readFile(_path.default.resolve(tmpRoot, 'output', 'test-dir', 'b.txt'), {
            encoding: 'utf8'
          }).should.eventually.equal('Foo Bar');
        });
      });
    });
  });
  describe('unicode filename handling', function () {
    let zippedFilePath, assetsPath, tmpRoot;
    beforeEach(async function () {
      assetsPath = await _index.tempDir.openDir();
      tmpRoot = await _index.tempDir.openDir();
      const zippedBase64 = 'UEsDBBQACAAIABF8/EYAAAAAAAAAABoAAAATACAAa2Fuamkt5q2j5LiW5LiVLmFwcFVUDQAHAgO4VVpX+GBZV/hgdXgLAAEE9QEAAAQUAAAAK8nILFYAorz8EoWi1MScnEqFxDyFxIICLgBQSwcIR93jPhoAAAAaAAAAUEsBAhQDFAAIAAgAEXz8Rkfd4z4aAAAAGgAAABMAIAAAAAAAAAAAAKSBAAAAAGthbmppLeato+S4luS4lS5hcHBVVA0ABwIDuFVaV/hgWVf4YHV4CwABBPUBAAAEFAAAAFBLBQYAAAAAAQABAGEAAAB7AAAAAAA=';
      zippedFilePath = _path.default.resolve(tmpRoot, 'zipped.zip');
      await _index.fs.writeFile(zippedFilePath, zippedBase64, 'base64');
      await zip.extractAllTo(zippedFilePath, assetsPath, {
        useSystemUnzip: true
      });
    });
    afterEach(async function () {
      for (const tmpPath of [assetsPath, tmpRoot]) {
        if (!(await _index.fs.exists(tmpPath))) {
          continue;
        }

        await _index.fs.rimraf(tmpPath);
      }
    });
    it('should retain the proper filenames', async function () {
      const expectedPath = _path.default.join(assetsPath, 'kanji-正世丕.app');

      if (!(await _index.fs.exists(expectedPath))) {
        throw new chai.AssertionError(`Expected ${expectedPath} to exist, but it does not`);
      }
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
