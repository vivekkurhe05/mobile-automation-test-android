"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _index = require("../lib/index.js");

var _path = _interopRequireDefault(require("path"));

var _teen_process = require("teen_process");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _lodash = _interopRequireDefault(require("lodash"));

const MOCHA_TIMEOUT = 20000;
describe('fs', function () {
  this.timeout(MOCHA_TIMEOUT);

  const existingPath = _path.default.resolve(__dirname, 'fs-specs.js');

  it('should have expected methods', function () {
    should.exist(_index.fs.open);
    should.exist(_index.fs.close);
    should.exist(_index.fs.access);
    should.exist(_index.fs.mkdir);
    should.exist(_index.fs.readlink);
    should.exist(_index.fs.exists);
    should.exist(_index.fs.rimraf);
    should.exist(_index.fs.rimrafSync);
    should.exist(_index.fs.readFile);
    should.exist(_index.fs.writeFile);
    should.exist(_index.fs.lstat);
    should.exist(_index.fs.mv);
  });
  describe('mkdir', function () {
    let dirName = _path.default.resolve(__dirname, 'tmp');

    it('should make a directory that does not exist', async function () {
      await _index.fs.rimraf(dirName);
      await _index.fs.mkdir(dirName);
      let exists = await _index.fs.hasAccess(dirName);
      exists.should.be.true;
    });
    it('should not complain if the dir already exists', async function () {
      let exists = await _index.fs.hasAccess(dirName);
      exists.should.be.true;
      await _index.fs.mkdir(dirName);
    });
    it('should still throw an error if something else goes wrong', async function () {
      await _index.fs.mkdir('/bin/foo').should.be.rejected;
    });
  });
  it('hasAccess', async function () {
    (await _index.fs.exists(existingPath)).should.be.ok;

    let nonExistingPath = _path.default.resolve(__dirname, 'wrong-specs.js');

    (await _index.fs.hasAccess(nonExistingPath)).should.not.be.ok;
  });
  it('exists', async function () {
    (await _index.fs.exists(existingPath)).should.be.ok;

    let nonExistingPath = _path.default.resolve(__dirname, 'wrong-specs.js');

    (await _index.fs.exists(nonExistingPath)).should.not.be.ok;
  });
  it('readFile', async function () {
    (await _index.fs.readFile(existingPath, 'utf8')).should.contain('readFile');
  });
  describe('copyFile', function () {
    it('should be able to copy a file', async function () {
      let newPath = _path.default.resolve(await _index.tempDir.openDir(), 'fs-specs.js');

      await _index.fs.copyFile(existingPath, newPath);
      (await _index.fs.readFile(newPath, 'utf8')).should.contain('readFile');
    });
    it('should throw an error if the source does not exist', async function () {
      await _index.fs.copyFile('/sdfsdfsdfsdf', '/tmp/bla').should.eventually.be.rejected;
    });
  });
  it('rimraf', async function () {
    let newPath = _path.default.resolve(await _index.tempDir.openDir(), 'fs-specs.js');

    await _index.fs.copyFile(existingPath, newPath);
    (await _index.fs.exists(newPath)).should.be.true;
    await _index.fs.rimraf(newPath);
    (await _index.fs.exists(newPath)).should.be.false;
  });
  it('sanitizeName', function () {
    _index.fs.sanitizeName(':file?.txt', {
      replacement: '-'
    }).should.eql('-file-.txt');
  });
  it('rimrafSync', async function () {
    let newPath = _path.default.resolve(await _index.tempDir.openDir(), 'fs-specs.js');

    await _index.fs.copyFile(existingPath, newPath);
    (await _index.fs.exists(newPath)).should.be.true;

    _index.fs.rimrafSync(newPath);

    (await _index.fs.exists(newPath)).should.be.false;
  });
  describe('md5', function () {
    this.timeout(1200000);
    let smallFilePath;
    let bigFilePath;
    before(async function () {
      smallFilePath = existingPath;
      bigFilePath = _path.default.resolve(await _index.tempDir.openDir(), 'enormous.txt');
      let file = await _index.fs.open(bigFilePath, 'w');
      let fileData = '';

      for (let i = 0; i < 4096; i++) {
        fileData += '1';
      }

      for (let i = 0; i < 40000; i++) {
        await _index.fs.write(file, fileData);
      }

      await _index.fs.close(file);
    });
    after(async function () {
      await _index.fs.unlink(bigFilePath);
    });
    it('should calculate hash of correct length', async function () {
      (await _index.fs.md5(smallFilePath)).should.have.length(32);
    });
    it('should be able to run on huge file', async function () {
      (await _index.fs.md5(bigFilePath)).should.have.length(32);
    });
  });
  describe('hash', function () {
    it('should calculate sha1 hash', async function () {
      (await _index.fs.hash(existingPath, 'sha1')).should.have.length(40);
    });
    it('should calculate md5 hash', async function () {
      (await _index.fs.hash(existingPath, 'md5')).should.have.length(32);
    });
  });
  it('stat', async function () {
    let stat = await _index.fs.stat(existingPath);
    stat.should.have.property('atime');
  });
  describe('which', function () {
    it('should find correct executable', async function () {
      let systemNpmPath = (await (0, _teen_process.exec)('which', ['npm'])).stdout.trim();
      let npmPath = await _index.fs.which('npm');
      npmPath.should.equal(systemNpmPath);
    });
    it('should fail gracefully', async function () {
      await _index.fs.which('something_that_does_not_exist').should.eventually.be.rejected;
    });
  });
  it('glob', async function () {
    let glob = '*-specs.js';
    let tests = await _index.fs.glob(glob, {
      cwd: __dirname
    });
    tests.should.be.an('array');
    tests.should.have.length.above(2);
  });
  describe('walkDir', function () {
    it('walkDir recursive', async function () {
      let inCallback = 0;
      const filePath = await _index.fs.walkDir(__dirname, true, async item => {
        if (item.endsWith('logger/helpers.js')) {
          ++inCallback;
          await _bluebird.default.delay(500);
          --inCallback;
          return true;
        }
      });
      inCallback.should.equal(0);
      filePath.should.not.be.null;
    });
    it('should walk all elements recursive', async function () {
      let inCallback = 0;
      const filePath = await _index.fs.walkDir(__dirname, true, async () => {
        ++inCallback;
        await _bluebird.default.delay(500);
        --inCallback;
      });
      inCallback.should.equal(0);
      _lodash.default.isNil(filePath).should.be.true;
    });
    it('should throw error through callback', async function () {
      let processed = 0;
      await chai.expect(_index.fs.walkDir(__dirname, true, () => {
        ++processed;
        throw 'Callback error';
      })).to.be.rejectedWith('Callback error');
      processed.should.equal(1);
    });
    it('should traverse non-recursively', async function () {
      const filePath = await _index.fs.walkDir(__dirname, false, item => item.endsWith('logger/helpers.js'));
      _lodash.default.isNil(filePath).should.be.true;
    });
  });
  describe('findRoot()', function () {
    describe('when not provided an argument', function () {
      it('should throw', function () {
        (() => _index.fs.findRoot()).should.throw(TypeError);
      });
    });
    describe('when provided a relative path', function () {
      it('should throw', function () {
        (() => _index.fs.findRoot('./foo')).should.throw(TypeError);
      });
    });
    describe('when provided an empty string', function () {
      it('should throw', function () {
        (() => _index.fs.findRoot('')).should.throw(TypeError);
      });
    });
    describe('when provided an absolute path', function () {
      describe('when the path has a parent `package.json`', function () {
        it('should locate the dir with the closest `package.json`', function () {
          _index.fs.findRoot(__dirname).should.be.a('string');
        });
      });
      describe('when the path does not have a parent `package.json`', function () {
        it('should throw', function () {
          (() => _index.fs.findRoot('/')).should.throw(Error);
        });
      });
    });
  });
  describe('readPackageJsonFrom()', function () {
    describe('when not provided an argument', function () {
      it('should throw', function () {
        (() => _index.fs.readPackageJsonFrom()).should.throw(TypeError, /non-empty, absolute path/);
      });
    });
    describe('when provided a relative path', function () {
      it('should throw', function () {
        (() => _index.fs.readPackageJsonFrom('./foo')).should.throw(TypeError);
      });
    });
    describe('when provided an empty string', function () {
      it('should throw', function () {
        (() => _index.fs.readPackageJsonFrom('')).should.throw(TypeError);
      });
    });
    describe('when provided an absolute path', function () {
      describe('when the path does not have a parent `package.json`', function () {
        it('should throw', function () {
          (() => _index.fs.readPackageJsonFrom('/')).should.throw(Error);
        });
      });
      describe('when the path has a parent `package.json`', function () {
        it('should read the `package.json` found in the root dir', function () {
          _index.fs.readPackageJsonFrom(__dirname).should.be.an('object');
        });
      });
    });
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
